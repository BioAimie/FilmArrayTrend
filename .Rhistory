bugs.reg <- rbind(bugs.reg, bugs.site)
}
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
bugs.reg.trim$combocat <- do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
bugs.reg.trim$Record <- 1
bugs.reg.combo <- do.call(rbind, lapply(1:length(unique(bugs.reg.trim$combocat)), function(x) cbind(merge(unique(calendar.df[,c('YearWeek','Year')]), bugs.reg.trim[bugs.reg.trim$combocat == unique(bugs.reg.trim$combocat)[x], c('YearWeek','Record')], by='YearWeek', all.x=TRUE), ComboCat = unique(bugs.reg.trim$combocat)[x])))
deCombo <- as.data.frame(sapply(1:length(colsToCat), function(x) do.call(rbind, strsplit(as.character(bugs.reg.combo$ComboCat), split=','))[,x]))
colnames(deCombo) <- colsToCat
bugs.reg.fill <- cbind(bugs.reg.combo[,c('YearWeek','Record')], deCombo)
bugs.reg.fill[is.na(bugs.reg.fill$Record),'Record'] <- 0
bugs.reg.agg <- with(bugs.reg.fill, aggregate(Record~YearWeek+Region+Name+CustomerSiteId+BugPositive, FUN=sum))
bugs <- as.character(unique(bugs.reg.agg$BugPositive))[order(as.character(unique(bugs.reg.agg$BugPositive)))]
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
sites <- as.character(unique(runs.reg.norm$CustomerSiteId))
sites <- sites[order(sites)]
sites
bugs
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
sites
sites
head(bugs.reg.fill)
head(bugs.reg.agg)
sites
bugs
sapply(1:length(sites), function(x) unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive']))
sapply(1:length(sites), function(x) unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))
sapply(1:length(sites), function(x) length(unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive']))))
sapply(1:length(sites), function(x) unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))
sapply(1:length(sites), function(x) bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))])
sapply(1:length(sites), function(x) length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]))
sapply(1:length(sites), function(x) length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive']), data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))], data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]), data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]), data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]), data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
do.call(rbind, lapply(1:length(sites), function(x) ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]), data.frame(CustomerSiteId = NULL, BugPositive = NULL))))
sapply(1:length(sites), function(x) length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]))
length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[1], 'BugPositive'])))])
length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[2], 'BugPositive'])))])
length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[3], 'BugPositive'])))])
do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))])))
do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
site.missing.bugs
head(bugs.reg.agg)
head(region.)
head(regions.df)
site.missing.bugs
head(bugs.reg.agg)
merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')
data.frame(YearWeek = min(bugs.reg.agg$YearWeek), merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId')])
data.frame(YearWeek = min(bugs.reg.agg$YearWeek), merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0)
bugs.reg.agg <- rbind(bugs.reg.agg, data.frame(YearWeek = min(bugs.reg.agg$YearWeek), merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0))
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
head(bugs.reg.fill)
head(bugs.reg.trim)
head(bugs.reg.trim)
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
head(bugs.reg.trim)
as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
bugs <- as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
head(bugs.reg.trim)
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
bugs.reg.trim$Record <- 1
bugs <- as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
data.frame(YearWeek = min(bugs.reg.agg$YearWeek), merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0)
data.frame(YearWeek = min(bugs.reg.agg$YearWeek), merge(site.missing.bugs, unique(bugs.reg.agg[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0)
head(bugs.reg.trim)
data.frame(YearWeek = min(bugs.reg.trim$YearWeek), merge(site.missing.bugs, unique(bugs.reg.trim[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0)
bugs.reg.trim <- rbind(bugs.reg.trim, data.frame(YearWeek = min(bugs.reg.trim$YearWeek), merge(site.missing.bugs, unique(bugs.reg.trim[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0))
bugs.reg.trim$combocat <- do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
bugs.reg.combo <- do.call(rbind, lapply(1:length(unique(bugs.reg.trim$combocat)), function(x) cbind(merge(unique(calendar.df[,c('YearWeek','Year')]), bugs.reg.trim[bugs.reg.trim$combocat == unique(bugs.reg.trim$combocat)[x], c('YearWeek','Record')], by='YearWeek', all.x=TRUE), ComboCat = unique(bugs.reg.trim$combocat)[x])))
deCombo <- as.data.frame(sapply(1:length(colsToCat), function(x) do.call(rbind, strsplit(as.character(bugs.reg.combo$ComboCat), split=','))[,x]))
colnames(deCombo) <- colsToCat
bugs.reg.fill <- cbind(bugs.reg.combo[,c('YearWeek','Record')], deCombo)
bugs.reg.fill[is.na(bugs.reg.fill$Record),'Record'] <- 0
do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
sites
head(bugs.reg.fill)
a <- data.frame(bugs.reg.fill, Count = 1)
with(a, aggregate(Count~YearWeek+CustomerSiteId+BugPositive, FUN=sum))
head(a)
a <- data.frame(bugs.reg.agg, Count = 1)
head(a)
head(a)
with(a, aggregate(Count~CustomerSiteId, FUN=sum))
site.missing.bugs
4347-4141
as.character(unique(a$YearWeek))
length(as.character(unique(a$YearWeek)))
a[a$CustomerSiteId=='25' & a$BugPositive=='Influenza A H1', ]
head(bugs.reg.trim)
unique(bugs.reg.trim$combocat)
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
bugs.reg.trim$Record <- 1
bugs <- as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
bugs.reg.trim <- rbind(bugs.reg.trim, data.frame(YearWeek = min(bugs.reg.trim$YearWeek), merge(site.missing.bugs, unique(bugs.reg.trim[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0))
head(bugs.reg.trim)
bugs.reg.trim[bugs.reg.trim$CustomerSiteId=='25' & bugs.reg.trim$BugPositive=='Influenza A H1', ]
bugs.reg.trim[bugs.reg.trim$CustomerSiteId=='38' & bugs.reg.trim$BugPositive=='Influenza A H1', ]
bugs.reg.trim$combocat <- do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
unique(bugs.reg.trim$combocat)
do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
bugs.reg.trim[bugs.reg.trim$CustomerSiteId=='25' & bugs.reg.trim$BugPositive=='Influenza A H1', ]
bugs.reg.trim[bugs.reg.trim$CustomerSiteId=='25' & bugs.reg.trim$BugPositive=='Influenza A H1', ]
bugs.reg.trim[bugs.reg.trim$CustomerSiteId=='38' & bugs.reg.trim$BugPositive=='Influenza A H1', ]
bugs.reg.combo <- do.call(rbind, lapply(1:length(unique(bugs.reg.trim$combocat)), function(x) cbind(merge(unique(calendar.df[,c('YearWeek','Year')]), bugs.reg.trim[bugs.reg.trim$combocat == unique(bugs.reg.trim$combocat)[x], c('YearWeek','Record')], by='YearWeek', all.x=TRUE), ComboCat = unique(bugs.reg.trim$combocat)[x])))
head(bugs.reg.combo)
deCombo <- as.data.frame(sapply(1:length(colsToCat), function(x) do.call(rbind, strsplit(as.character(bugs.reg.combo$ComboCat), split=','))[,x]))
head(deCombo)
colnames(deCombo) <- colsToCat
head(deCombo)
deCombo[deCombo$CustomerSiteId=='25' & deCombo$BugPositive=='Influenza A H1']
deCombo[deCombo$CustomerSiteId=='25' & deCombo$BugPositive=='Influenza A H1', ]
deCombo[deCombo$CustomerSiteId=='38' & deCombo$BugPositive=='Influenza A H1', ]
head(bugs.reg.combo)
head(deCombo)
head(bugs.reg.combo)
bugs.reg.fill <- cbind(bugs.reg.combo[,c('YearWeek','Record')], deCombo)
bugs.reg.fill[bugs.reg.fill$CustomerSiteId=='38' & bugs.reg.fill$BugPositive=='Influenza A H1', ]
bugs.reg.fill[is.na(bugs.reg.fill$Record),'Record'] <- 0
bugs.reg.fill[bugs.reg.fill$CustomerSiteId=='38' & bugs.reg.fill$BugPositive=='Influenza A H1', ]
bugs.reg.fill[bugs.reg.fill$CustomerSiteId=='25' & bugs.reg.fill$BugPositive=='Influenza A H1', ]
bugs.reg.agg <- with(bugs.reg.fill, aggregate(Record~YearWeek+Region+Name+CustomerSiteId+BugPositive, FUN=sum))
bugs.reg.agg[bugs.reg.agg$CustomerSiteId=='25' & bugs.reg.agg$BugPositive=='Influenza A H1', ]
bugs.reg.agg[bugs.reg.agg$CustomerSiteId=='38' & bugs.reg.agg$BugPositive=='Influenza A H1', ]
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
head(bugs.reg.roll)
runs.reg.roll <- runs.reg.norm[,c('YearWeek','CustomerSiteId','RollRuns')]
colnames(runs.reg.roll) <- c('YearWeek','CustomerSiteId','Runs')
positives.count.all <- merge(runs.reg.roll, bugs.reg.roll, by=c('YearWeek','CustomerSiteId'))
decoder <- data.frame(Bug = bugs, Code = letters[1:length(bugs)])
prevalence.reg.agg <- merge(subset(positives.count.all, as.character(YearWeek) >= '2014-01'), cdc.reg.count.df, by=c('YearWeek','Region'), all.x=TRUE)
prevalence.reg.agg$Rate <- with(prevalence.reg.agg, ILITotal/TotalPatients)
prevalence.reg.agg$Prevalence <- with(prevalence.reg.agg, Positives/Runs)
prevalence.reg.wrap <- merge(prevalence.reg.agg[,c('Bug','Code','YearWeek','CustomerSiteId','Rate','Prevalence')], shortnames.df, by.x='Bug', by.y='Organism')
prevalence.nat.individual.wrap <- with(prevalence.reg.wrap, aggregate(cbind(Rate, Prevalence)~YearWeek+Bug+Code+ShortName, FUN=mean))
# now make the figures and break out by organisms and type
bacterias <- as.character(decoder[decoder$Code %in% c('b','c','p'), 'Bug'])
rhino <- 'Human Rhinovirus/Enterovirus'
fluAs <- as.character(decoder[grep('Influenza A', decoder$Bug),'Bug'])
fluBs <- as.character(decoder[grep('Influenza B', decoder$Bug),'Bug'])
rsv <- 'Respiratory Syncytial Virus'
flus <- as.character(decoder[grep('Influenza', decoder$Bug),'Bug'])
pivs <- as.character(decoder[grep('Parainfluenza', decoder$Bug),'Bug'])
corona <- as.character(decoder[grep('Corona', decoder$Bug),'Bug'])
adeno <- 'Adenovirus'
hmp <- 'Human Metapneumovirus'
# create beautiful time-series prevalence chart
bug.individual.Pal <- createPaletteOfVariableLength(prevalence.nat.individual.wrap, 'ShortName')
# dateBreaks <- as.character(unique(prevalence.nat.individual.wrap$YearWeek))[order(as.character(unique(prevalence.nat.individual.wrap$YearWeek)))][seq(1, length(as.character(unique(prevalence.nat.individual.wrap$YearWeek))), 8)]
dateBreaks <- c('2014-01', '2014-14','2014-27','2014-40','2015-01', '2015-14','2015-27','2015-40','2016-01','2016-14','2016-27','2016-40')
dateLabels <- c('Jan-2014','-','--','-','Jan-2015','-','--','-','Jan-2016','-','--','-')
ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='Percent Detection of Organisms in Trend Population', y='Percent Detection', x='Date')
ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='Percent Detection of Organisms in Trend Population', y='Percent Detection', x='Date')
p.PercentDetectionTrend <- ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='Percent Detection of Organisms in Trend Population', y='Percent Detection', x='Date')
sites <- sites[order(sites)]
positives.count.all <- positives.count.all[with(positives.count.all, order(CustomerSiteId, Code, YearWeek)), ]
prevalence.reg.count <- data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
colnames(prevalence.reg.count) <- letters[1:length(prevalence.reg.count[1,])]
prevalence.reg.count <- data.frame(unique(positives.count.all[,c('YearWeek','CustomerSiteId','Region','Name','Runs')]), prevalence.reg.count)
# sum by family
prevalence.nat.fluA <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza A', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluAs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.fluB <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza B', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluBs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.bacteria <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Bacteria', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% bacterias,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rhino <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'HRV/Entero', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rhino,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.adeno <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Adeno', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% adeno,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.pivs <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Parainfluenza', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% pivs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.corona <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Coronavirus', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% corona,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.hmp <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'hMPV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% hmp,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rsv <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'RSV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rsv,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.families <- rbind(prevalence.nat.fluA, prevalence.nat.fluB, prevalence.nat.bacteria, prevalence.nat.rhino, prevalence.nat.adeno, prevalence.nat.hmp, prevalence.nat.pivs, prevalence.nat.corona, prevalence.nat.rsv)
bug.family.Pal <- c(bug.individual.Pal[names(bug.individual.Pal) == 'Flu A'], bug.individual.Pal[names(bug.individual.Pal) == 'FluB'], bug.individual.Pal[names(bug.individual.Pal) %in% as.character(unique(prevalence.nat.families$Key))], bug.individual.Pal[names(bug.individual.Pal) == 'CoV NL63'], bug.individual.Pal[names(bug.individual.Pal) == 'PIV3'], bug.individual.Pal[names(bug.individual.Pal) == 'C. pneumoniae'])
names(bug.family.Pal) <- c('Influenza A', 'Influenza B', 'Adeno', 'hMPV', 'HRV/Entero', 'RSV', 'Coronavirus', 'Parainfluenza', 'Bacteria')
prevalence.nat.families$Name <- factor(prevalence.nat.families$Key, levels=unique(prevalence.nat.families[with(prevalence.nat.families, order(as.character(Key))), 'Key']))
prevalence.nat.families <- prevalence.nat.families[as.character(prevalence.nat.families$YearWeek) >= '2014-01', ]
ggplot(prevalence.nat.families[with(prevalence.nat.families, order(Name, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name, order=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='Percent Detection of Organism Families in Trend Population', y='Percent Detection', x='Date')
sites
sites[order(sites)]
sites <- as.character(unique(runs.reg.norm$CustomerSiteId))
sites <- sites[order(sites)]
sites
ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='Percent Detection of Organisms in Trend Population', y='Percent Detection', x='Date')
positives.count.all <- positives.count.all[with(positives.count.all, order(CustomerSiteId, Code, YearWeek)), ]
prevalence.reg.count <- data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
colnames(prevalence.reg.count) <- letters[1:length(prevalence.reg.count[1,])]
prevalence.reg.count <- data.frame(unique(positives.count.all[,c('YearWeek','CustomerSiteId','Region','Name','Runs')]), prevalence.reg.count)
head(prevalence.reg.count)
prevalence.nat.fluA <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza A', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluAs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.fluB <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza B', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluBs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.bacteria <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Bacteria', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% bacterias,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rhino <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'HRV/Entero', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rhino,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.adeno <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Adeno', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% adeno,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.pivs <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Parainfluenza', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% pivs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.corona <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Coronavirus', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% corona,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.hmp <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'hMPV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% hmp,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rsv <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'RSV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rsv,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.families <- rbind(prevalence.nat.fluA, prevalence.nat.fluB, prevalence.nat.bacteria, prevalence.nat.rhino, prevalence.nat.adeno, prevalence.nat.hmp, prevalence.nat.pivs, prevalence.nat.corona, prevalence.nat.rsv)
head(prevalence.nat.families)
bug.family.Pal <- c(bug.individual.Pal[names(bug.individual.Pal) == 'Flu A'], bug.individual.Pal[names(bug.individual.Pal) == 'FluB'], bug.individual.Pal[names(bug.individual.Pal) %in% as.character(unique(prevalence.nat.families$Key))], bug.individual.Pal[names(bug.individual.Pal) == 'CoV NL63'], bug.individual.Pal[names(bug.individual.Pal) == 'PIV3'], bug.individual.Pal[names(bug.individual.Pal) == 'C. pneumoniae'])
names(bug.family.Pal) <- c('Influenza A', 'Influenza B', 'Adeno', 'hMPV', 'HRV/Entero', 'RSV', 'Coronavirus', 'Parainfluenza', 'Bacteria')
factor(prevalence.nat.families$Key, levels=unique(prevalence.nat.families[with(prevalence.nat.families, order(as.character(Key))), 'Key']))
prevalence.nat.families$Name <- factor(prevalence.nat.families$Key, levels=unique(prevalence.nat.families[with(prevalence.nat.families, order(as.character(Key))), 'Key']))
prevalence.nat.families <- prevalence.nat.families[as.character(prevalence.nat.families$YearWeek) >= '2014-01', ]
ggplot(prevalence.nat.families[with(prevalence.nat.families, order(Name, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name, order=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='Percent Detection of Organism Families in Trend Population', y='Percent Detection', x='Date')
head(prevalence.nat.families)
ggplot(prevalence.nat.families, aes(x=YearWeek, y=Prevalence)) + facet_wrap(~Name)
ggplot(prevalence.nat.families, aes(x=YearWeek, y=Prevalence)) + geom_bar() + facet_wrap(~Name)
ggplot(prevalence.nat.families, aes(x=YearWeek, y=Prevalence)) + geom_bar(stat='identity') + facet_wrap(~Name)
head(prevalence.nat.fluA)
head(prevalence.reg.count)
prevalence.nat.families[prevalence.nat.families$Prevalence > 1, ]
head(positives.count.all)
data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
a <- data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
head(positives.count.all)
head(a)
sites
sites <- sites[order(as.numeric(sites))]
sites
sites <- sites[order(as.numeric(sites))]
prevalence.reg.count <- data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
colnames(prevalence.reg.count) <- letters[1:length(prevalence.reg.count[1,])]
prevalence.reg.count <- data.frame(unique(positives.count.all[,c('YearWeek','CustomerSiteId','Region','Name','Runs')]), prevalence.reg.count)
prevalence.nat.fluA <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza A', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluAs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.fluB <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza B', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluBs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.bacteria <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Bacteria', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% bacterias,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rhino <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'HRV/Entero', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rhino,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.adeno <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Adeno', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% adeno,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.pivs <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Parainfluenza', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% pivs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.corona <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Coronavirus', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% corona,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.hmp <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'hMPV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% hmp,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rsv <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'RSV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rsv,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.families <- rbind(prevalence.nat.fluA, prevalence.nat.fluB, prevalence.nat.bacteria, prevalence.nat.rhino, prevalence.nat.adeno, prevalence.nat.hmp, prevalence.nat.pivs, prevalence.nat.corona, prevalence.nat.rsv)
bug.family.Pal <- c(bug.individual.Pal[names(bug.individual.Pal) == 'Flu A'], bug.individual.Pal[names(bug.individual.Pal) == 'FluB'], bug.individual.Pal[names(bug.individual.Pal) %in% as.character(unique(prevalence.nat.families$Key))], bug.individual.Pal[names(bug.individual.Pal) == 'CoV NL63'], bug.individual.Pal[names(bug.individual.Pal) == 'PIV3'], bug.individual.Pal[names(bug.individual.Pal) == 'C. pneumoniae'])
names(bug.family.Pal) <- c('Influenza A', 'Influenza B', 'Adeno', 'hMPV', 'HRV/Entero', 'RSV', 'Coronavirus', 'Parainfluenza', 'Bacteria')
prevalence.nat.families$Name <- factor(prevalence.nat.families$Key, levels=unique(prevalence.nat.families[with(prevalence.nat.families, order(as.character(Key))), 'Key']))
prevalence.nat.families <- prevalence.nat.families[as.character(prevalence.nat.families$YearWeek) >= '2014-01', ]
ggplot(prevalence.nat.families[with(prevalence.nat.families, order(Name, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name, order=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='Percent Detection of Organism Families in Trend Population', y='Percent Detection', x='Date')
p.PercentDetectionTrend_Grouped <- ggplot(prevalence.nat.families[with(prevalence.nat.families, order(Name, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name, order=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(label=percent, limits=c(0,0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='Percent Detection of Organism Families in Trend Population', y='Percent Detection', x='Date')
start.year <- 2014
# use data from all time and show a pareto of prevalence (collapsing fluA, coronas, pivs, and bacterias)
positives.count.trim <- positives.count.all[as.character(positives.count.all$YearWeek) >= '2014-01', ]
# need to sum up flu As, CoVs, PIVs, and Bacterias by customer site Id... then join these onto the positives.count.trim data frame
positives.count.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.agg <- rbind(positives.count.trim[,c('YearWeek','CustomerSiteId','Code','Positives','Runs')], positives.count.fluas, positives.count.covs, positives.count.pivs, positives.count.bacteria)
decoder.agg <- rbind(decoder, data.frame(Bug='Influenza A (all)', Code='v'), data.frame(Bug='Coronavirus (all)', Code='w'), data.frame(Bug='Parainfluenza (all)', Code='x'), data.frame(Bug='Bacteria (all)', Code='y'))
positives.count.agg <- merge(positives.count.agg, decoder.agg, by='Code')
positives.count.agg <- merge(positives.count.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
positives.count.agg$ShortName <- as.character(positives.count.agg$ShortName)
positives.count.agg[as.character(positives.count.agg$Code)=='v', 'ShortName'] <- 'Flu A (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='w', 'ShortName'] <- 'CoV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='x', 'ShortName'] <- 'PIV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
# Make various paretos...
prev.pareto.all <- merge(positives.count.agg, unique(runs.reg.date[,c('YearWeek','Year')]), by='YearWeek')
prev.pareto.all <- subset(prev.pareto.all, Year >= start.year)
prev.pareto.all$Prevalence <- with(prev.pareto.all, Positives/Runs)
# start with all data from the 8 sites starting in 2014-present showing all organisms and then grouping by family.
prev.pareto.all.nat <- with(prev.pareto.all, aggregate(Prevalence~ShortName+Code, FUN=mean))
prev.pareto.all.nat.ind <- prev.pareto.all.nat[!(prev.pareto.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.all.nat.fam <- prev.pareto.all.nat[!(prev.pareto.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
label.order.all <- prev.pareto.all.nat[with(prev.pareto.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.all <- label.order.all[c(1,2,3,7,15,17,19,4,5,10,14,18,21,6,8,9,12,20,24,25,11,16,22,23,13)]
prev.pareto.all.nat$Name <- factor(prev.pareto.all.nat$ShortName, levels = label.order.all)
label.order.ind <- prev.pareto.all.nat.ind[with(prev.pareto.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.ind$Name <- factor(prev.pareto.all.nat.ind$ShortName, levels = label.order.ind)
label.order.fam <- prev.pareto.all.nat.fam[with(prev.pareto.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.fam$Name <- factor(prev.pareto.all.nat.fam$ShortName, levels = label.order.fam)
p.PercentDetectionPareto <- ggplot(prev.pareto.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto_Individual <- ggplot(prev.pareto.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto_Family <- ggplot(prev.pareto.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
# subset the data into children's hospitals and mixed population hospitals
sites.mixed <- unique(runs.reg.date[!(runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name)[grep('Children', unique(runs.reg.date$Name))])),'CustomerSiteId'])
sites.child <- unique(runs.reg.date[runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name))[grep('Children', unique(runs.reg.date$Name))],'CustomerSiteId'])
prev.pareto.all.pop <- prev.pareto.all
prev.pareto.all.pop$Key <- with(prev.pareto.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
prev.pareto.all.nat.pop <- with(prev.pareto.all.pop, aggregate(Prevalence~ShortName+Code+Key, FUN=mean))
prev.pareto.all.nat.pop$Name <- factor(prev.pareto.all.nat.pop$ShortName, levels=label.order.all)
prev.pareto.all.nat.pop.ind <- prev.pareto.all.nat.pop[!(prev.pareto.all.nat.pop$Code %in% c('v','w','x','y')), ]
prev.pareto.all.nat.pop.fam <- prev.pareto.all.nat.pop[!(prev.pareto.all.nat.pop$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.all.nat.pop.ind$Name <- factor(prev.pareto.all.nat.pop.ind$ShortName, levels=label.order.ind)
prev.pareto.all.nat.pop.fam$Name <- factor(prev.pareto.all.nat.pop.fam$ShortName, levels=label.order.fam)
p.PercentDetectionParetoByPopulation <- ggplot(prev.pareto.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulation_Individual <- ggplot(prev.pareto.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulation_Family <- ggplot(prev.pareto.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
# subset by year (2014, 2015, 2016)
prev.pareto.all.year <- with(prev.pareto.all, aggregate(Prevalence~Year+ShortName+Code, FUN=mean))
prev.pareto.all.year$Name <- factor(prev.pareto.all.year$ShortName, levels = label.order.all)
prev.pareto.all.year.ind <- prev.pareto.all.year[!(prev.pareto.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.all.year.fam <- prev.pareto.all.year[!(prev.pareto.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.all.year.ind$Name <- factor(prev.pareto.all.year.ind$ShortName, levels = label.order.ind)
prev.pareto.all.year.fam$Name <- factor(prev.pareto.all.year.fam$ShortName, levels = label.order.fam)
p.PercentDetectionParetoAnnual <- ggplot(prev.pareto.all.year, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnual_Individual <- ggplot(prev.pareto.all.year.ind, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnual_Family <- ggplot(prev.pareto.all.year.fam, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionPareto
label.order.all <- prev.pareto.all.nat[with(prev.pareto.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.all
label.order.all <- label.order.all[c(1,2,3,7,16,17,18,4,5,11,14,19,20,6,9,13,21,24,25,8,10,15,22,23,12)]
prev.pareto.all.nat$Name <- factor(prev.pareto.all.nat$ShortName, levels = label.order.all)
label.order.ind <- prev.pareto.all.nat.ind[with(prev.pareto.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.ind$Name <- factor(prev.pareto.all.nat.ind$ShortName, levels = label.order.ind)
label.order.fam <- prev.pareto.all.nat.fam[with(prev.pareto.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.fam$Name <- factor(prev.pareto.all.nat.fam$ShortName, levels = label.order.fam)
ggplot(prev.pareto.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto <- ggplot(prev.pareto.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto_Individual <- ggplot(prev.pareto.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto_Family <- ggplot(prev.pareto.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionPareto_Family
p.PercentDetectionPareto_Individual
p.PercentDetectionParetoByPopulation
p.PercentDetectionParetoAnnual_Individual
runs.reg.norm.trim <- merge(runs.reg.norm[, c('YearWeek','Year','Week','CustomerSiteId','RollRuns','NormRollRate','NormRollRateByInst','NormalizedBurn')], unique(runs.reg[,c('CustomerSiteId','Name','Region')]), by='CustomerSiteId')
runs.reg.norm.ili <- merge(runs.reg.norm.trim, data.frame(YearWeek = cdc.reg.count.df$YearWeek, Region = cdc.reg.count.df$Region, Rate = with(cdc.reg.count.df, ILITotal/TotalPatients)), by=c('YearWeek','Region'), all.x=TRUE)
ili.burn.nat <- with(runs.reg.norm.ili, aggregate(cbind(Rate, NormalizedBurn)~YearWeek, FUN=mean))
dateBreaksAlt <- c('2013-26','2013-39','2013-52',dateBreaks)
dateLabelsAlt <- c('--','','',dateLabels)
p1 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=Rate, color='CDC ILI', group='CDC ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization'), subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), lwd=1.5) + scale_color_manual(values=c('black','red'), name='') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0,max(ili.burn.nat$Rate)), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white')) + labs(title='CDC Reported Influenza Like Illness (ILI) vs.\nNormalized FlimArray Test Utilization', x='Date', y='ILI')
p2 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization')) + geom_line(lwd=1.5, color='red') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0, max(ili.burn.nat$Rate)), breaks=c(0.01, 0.02, 0.03, 0.04, 0.05), labels=c('1','2','3','4','5')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Normalized Test Utilization')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
ili.burn.nat.compare <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(ili.burn.nat.compare)
head(runs.reg.norm.trim)
runs.reg.norm.ili <- merge(runs.reg.norm.trim, data.frame(YearWeek = cdc.reg.count.df$YearWeek, Region = cdc.reg.count.df$Region, Rate = with(cdc.reg.count.df, ILITotal/TotalPatients)), by=c('YearWeek','Region'), all.x=TRUE)
tail(ili.burn.nat)
tail(runs.reg.norm.ili)
runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek), ]
head(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek), ])
head(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek), ])
head(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek), ])
tail(ili.burn.nat)
head(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ])
runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ]
head(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ])
head(ili.burn.nat)
with(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ], aggregate(NormalizedBurn~YearWeek, FUN=mean))
data.frame(with(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ], aggregate(NormalizedBurn~YearWeek, FUN=mean)), Rate = NA)
add.back.burn <- data.frame(with(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ], aggregate(NormalizedBurn~YearWeek, FUN=mean)), Rate = NA)
rbind(ili.burn.nat, add.back.burn[,c('YearWeek','Rate','NormalizedBurn')])
ili.burn.nat <- rbind(ili.burn.nat, add.back.burn[,c('YearWeek','Rate','NormalizedBurn')])
dateBreaksAlt <- c('2013-26','2013-39','2013-52',dateBreaks)
dateLabelsAlt <- c('--','','',dateLabels)
p1 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=Rate, color='CDC ILI', group='CDC ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization'), subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), lwd=1.5) + scale_color_manual(values=c('black','red'), name='') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0,max(ili.burn.nat$Rate)), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white')) + labs(title='CDC Reported Influenza Like Illness (ILI) vs.\nNormalized FlimArray Test Utilization', x='Date', y='ILI')
p2 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization')) + geom_line(lwd=1.5, color='red') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0, max(ili.burn.nat$Rate)), breaks=c(0.01, 0.02, 0.03, 0.04, 0.05), labels=c('1','2','3','4','5')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Normalized Test Utilization')
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
ili.burn.nat.compare <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(ili.burn.nat.compare)
max(ili.burn.nat$Rate)
max(ili.burn.nat$Rate, na.rm=TRUE)
p1 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=Rate, color='CDC ILI', group='CDC ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization'), subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), lwd=1.5) + scale_color_manual(values=c('black','red'), name='') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0,0.05), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white')) + labs(title='CDC Reported Influenza Like Illness (ILI) vs.\nNormalized FlimArray Test Utilization', x='Date', y='ILI')
p2 <- ggplot(subset(ili.burn.nat, as.character(YearWeek) > '2013-25'), aes(x=YearWeek, y=NormalizedBurn/100, group='FilmArray Utilization', color='FilmArray Utilization')) + geom_line(lwd=1.5, color='red') + scale_x_discrete(breaks=dateBreaksAlt, labels=dateLabelsAlt) + scale_y_continuous(limits=c(0, 0.05), breaks=c(0.01, 0.02, 0.03, 0.04, 0.05), labels=c('1','2','3','4','5')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Normalized Test Utilization')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
ili.burn.nat.compare <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(ili.burn.nat.compare)
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=CustomerSiteId, color=CustomerSiteId)) + geom_line(lwd=2)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId)
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId)
sitesByCensusRegions.etc
sitesByCensusRegions.etc
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId) + scale_x_discrete(breaks=dateBreaks)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId) + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
sitesByCensusRegions.etc
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId) + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=Runs, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId) + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=RunRate, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId) + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=RunRate, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line(lwd=2) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId))) + geom_line(color='black') + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId)), data=runs.reg.norm, color='blue') + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId))) + geom_line(color='black') + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId)), data=runs.reg.norm, color='blue') + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId)), data=runs.reg.norm, color='red') + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId))) + geom_line() + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId)), data=runs.reg.norm, color='blue') + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color=as.factor(CustomerSiteId)), data=runs.reg.norm) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId))) + geom_line(color='black') + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId)), data=runs.reg.norm, color='blue') + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId)), data=runs.reg.norm, color='red') + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId), color='NormRunByInst')) + geom_line() + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color='NormRun'), data=runs.reg.norm) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color='Burn'), data=runs.reg.norm, color='red') + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90)) + scale_color_manual(values=c('red','blue','black'))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId), color='NormRunByInst')) + geom_line() + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color='NormRun'), data=runs.reg.norm) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color='Burn'), data=runs.reg.norm) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90)) + scale_color_manual(values=c('red','blue','black'))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormRollRateByInst, group=as.factor(CustomerSiteId), color='NormRunByInst')) + geom_line() + geom_line(aes(x=YearWeek, y=NormRollRate, group=as.factor(CustomerSiteId), color='NormRun'), data=runs.reg.norm) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group=as.factor(CustomerSiteId), color='Burn'), data=runs.reg.norm) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90)) + scale_color_manual(values=c('red','blue','black'))
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=RollRate, group=as.factor(CustomerSiteId), color='RunRate')) + geom_line() + geom_line(aes(x=YearWeek, y=RollRateByInst, group=as.factor(CustomerSiteId), color='RunRateByInst'), data=runs.reg.norm) + geom_line(aes(x=YearWeek, y=8*NormalizedBurn, group=as.factor(CustomerSiteId), color='Burn'), data=runs.reg.norm) + facet_wrap(~CustomerSiteId, scale='free_y') + scale_x_discrete(breaks=dateBreaks) + theme(axis.text.x=element_text(angle=90)) + scale_color_manual(values=c('red','blue','black'))
sitesByCensusRegions.etc
