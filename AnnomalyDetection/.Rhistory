library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
# Set up variables needed later in the analysis
# ===========================================================================================
# create an Epi date calendar that will be used by all the data sets
startYear <- 2013
calendar.df <- createCalendarLikeMicrosoft(startYear, 'Week')
calendar.df <- transformToEpiWeeks(calendar.df)
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df$Days <- 1
# set up some constants
imgDir <- 'Figures/'
dateBreaks <- unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])[order(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek']))][seq(1, length(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])), 8)]
# Load in the data
# ===========================================================================================
# set some query variables, like the customer site... also, get the number of RP runs by site
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/CustomerSiteIdsWithNames.sql')
query <- paste(queryVector ,collapse="\n")
custnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/sitesRunningRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
sites.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/rpRunsBySite.sql',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianCpRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.cps <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianTmRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.tms <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoDataAtCHLA.sql')
query <- paste(queryVector, collapse = '\n')
chla.df <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/CMH_SequencedRuns.sql')
query <- paste(queryVector, collapse = '\n')
cmh.df <- sqlQuery(PMScxn, query)
odbcClose(PMScxn)
# start a loop to gather Cp, Tm, and MaxFluor data for all HRV/Entero Assays by site
dat.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoDataBySite.sql')
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse="\n")
dat.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
dat.df <- rbind(dat.df, dat.site.df)
}
rm(dat.site.df)
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
cp.median <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
cp.median.chla <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
cp.median.cmh <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
cp.median <- rbind(rbind(cp.median, cp.median.chla), cp.median.cmh)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
tm.median <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
tm.median.chla <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
tm.median.cmh <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
tm.median <- rbind(rbind(tm.median, tm.median.chla), tm.median.cmh)
tm.spread <- spread(data = tm.median, key = AssayName, value = Tm)
head(cmh.df)
head(dat.df)
mf.median <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
head(cmh.df)
mf.median.chla <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
mf.median.cmh <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
mf.median <- rbind(rbind(mf.median, mf.median.chla), mf.median.cmh)
mf.spread <- spread(data = mf.median, key = AssayName, value = MaxFluor)
setwd('~/FilmArrayTrend/AnnomalyDetection/')
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
head(mf.spread)
head(mf.spread)
qc.yeast.cp.avg <- mean(subset(qc.lot.cps, Name=='yeastRNA')$MedianCp)
cp.norm <- merge(data.frame(cp.spread[,1:4], cp.spread[,5:10]/cp.spread$yeastRNA), qc.lot.cps[qc.lot.cps$Name=='yeastRNA',c('PouchLotNumber','MedianCp')], by.x='LotNo', by.y='PouchLotNumber')
cp.norm <- data.frame(cp.norm[,1:4], cp.norm[,5:10]*cp.norm$MedianCp/qc.yeast.cp.avg)
colnames(cp.norm)[5:10] <- paste(colnames(cp.norm[5:10]), 'Cp', sep='_')
head(cp.norm)
hist(cp.norm$Entero1_Cp)
hist(cp.norm$Entero2_Cp)
hist(cp.norm$HRV1_Cp)
hist(cp.norm$HRV2_Cp)
hist(cp.norm$HRV3_Cp)
hist(cp.norm$HRV4_Cp)
head(cp.norm)
head(cp.spread)
hist(cp.spread$HRV4)
hist(cp.spread$HRV2)
head(qc.yeast.cp.avg)
head(cp.spread)
colnames(cp.norm)[5:10]
colnames(cp.spread)[5:10]
cp.sparse.handler <- 40 # TRY TUNING THIS????
cp.spread[,c(5:10)][is.na(cp.spread[,c(5:10)])] <- cp.sparse.handler
cp.norm <- merge(data.frame(cp.spread[,1:4], cp.spread[,5:10]/cp.spread$yeastRNA), qc.lot.cps[qc.lot.cps$Name=='yeastRNA',c('PouchLotNumber','MedianCp')], by.x='LotNo', by.y='PouchLotNumber')
cp.norm <- data.frame(cp.norm[,1:4], cp.norm[,5:10]*cp.norm$MedianCp/qc.yeast.cp.avg)
colnames(cp.norm)[5:10] <- paste(colnames(cp.norm[5:10]), 'Cp', sep='_')
hist(cp.norm$HRV2_Cp)
hist(cp.norm$HRV1_Cp)
hist(cp.norm$HRV4_Cp)
hist(cp.norm$HRV3_Cp)
hist(cp.norm$Entero1_Cp)
hist(cp.norm$Entero2_Cp)
head(cp.spread)
cp.norm[cp.norm$RunDataId==14956, ]
head(cp.norm)
qc.yeast.tm.avg <- mean(subset(qc.lot.tms, Name=='yeastRNA')$MedianTm)
head(tm.spread)
max(tm.spread[,5:10])
max(tm.spread[,5:10], na.rm=TRUE)
tm.sparse.handler <- 100 # TRY TUNING THIS????
tm.spread[,c(5:10)][is.na(tm.spread[,c(5:10)])] <- tm.sparse.handler
head(tm.spread)
tm.norm <- merge(data.frame(tm.spread[,1:4], tm.spread[,5:10]/tm.spread$yeastRNA), qc.lot.tms[qc.lot.tms$Name=='yeastRNA',c('PouchLotNumber','MedianTm')], by.x='LotNo', by.y='PouchLotNumber')
tm.norm <- data.frame(RunDataId = tm.spread$RunDataId, tm.spread[,5:10]*tm.norm$MedianTm/qc.yeast.tm.avg)
head(tm.norm)
tm.norm[tm.norm$RunDataId==14956, ]
tm.spread[tm.spread$RunDataId==14956, ]
tm.norm[tm.norm$RunDataId==14956, ]
head(tm.norm)
colnames(tm.norm)[2:7] <- paste(colnames(tm.norm[2:7]), 'Tm', sep='_')
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianMaxFluorRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.mfs <- sqlQuery(PMScxn, query)
odbcClose(PMScxn)
head(qc.lot.mfs)
head(mf.median)
head(mf.spread)
rm(qc.lot.mfs)
head(mf.spread)
max(mf.spread[,5:12], na.rm=TRUE)
head(cp.spread)
mf.sparse.handler <- 100  # TRY TUNING THIS????
mf.spread[,c(5:12)][is.na(mf.spread[,c(5:12)])] <- mf.sparse.handler
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianMaxFluorRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.mfs <- sqlQuery(PMScxn, query)
odbcClose(PMScxn)
head(qc.lot.mfs)
hist(qc.lot.mfs[qc.lot.mfs$Name=='yeastRNA', 'MedianMaxFluor'])
ggplot(qc.lot.mfs[qc.lot.mfs$Name=='yeastRNA',], aes(x=PouchLotNumber, y=MedianMaxFluor)) + geom_point()
ggplot(qc.lot.mfs[qc.lot.mfs$Name=='PCR2',], aes(x=PouchLotNumber, y=MedianMaxFluor)) + geom_point()
mf.norm <- merge(data.frame(mf.spread[,1:4], mf.spread[,5:10]/mf.spread$yeastRNA))
mf.norm <- data.frame(mf.spread[,1:4], mf.spread[,5:10]/mf.spread$yeastRNA)
head(mf.norm)
hist(mf.norm$Entero1)
hist(mf.norm$HRV1)
max(mf.norm[,2:10])
head(mf.spread)
mf.spread[mf.spread$yeastRNA==100, ]
mf.spread[mf.spread$yeastRNA==100, ]
head(mf.median)
a <- mf.median[is.na(mf.median$MaxFluor) & mf.median$AssayName=='yeastRNA', ]
unique(mf.median$AssayName)
head(mf.spread)
mf.spread <- spread(data = mf.median, key = AssayName, value = MaxFluor)
mf.spread[is.na(mf.spread$yeastRNA), ]
head(mf.median)
unique(mf.median$AssayName)
mf.median[is.na(mf.median$MaxFluor) & as.character(mf.median$AssayName)=='yeastRNA', ]
head(mf.spread)
mf.spread[is.na(mf.spread$yeastRNA), ]
a <- mf.spread[is.na(mf.spread$yeastRNA), ]
View(a)
setwd('~/FilmArrayTrend/AnnomalyDetection/')
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
# Set up variables needed later in the analysis
# ===========================================================================================
# create an Epi date calendar that will be used by all the data sets
startYear <- 2013
calendar.df <- createCalendarLikeMicrosoft(startYear, 'Week')
calendar.df <- transformToEpiWeeks(calendar.df)
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df$Days <- 1
# set up some constants
imgDir <- 'Figures/'
dateBreaks <- unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])[order(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek']))][seq(1, length(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])), 8)]
# Load in the data - For the first iteration, build using HRV/EV Assay
# ===========================================================================================
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/CustomerSiteIdsWithNames.sql')
query <- paste(queryVector ,collapse="\n")
custnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/sitesRunningRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
sites.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/rpRunsBySite.sql',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianCpRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.cps <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianTmRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.tms <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianMaxFluorRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.mfs <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoDataAtCHLA.sql')
query <- paste(queryVector, collapse = '\n')
chla.df <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/CMH_SequencedRuns.sql')
query <- paste(queryVector, collapse = '\n')
cmh.df <- sqlQuery(PMScxn, query)
odbcClose(PMScxn)
# start a loop to gather Cp, Tm, and MaxFluor data for all HRV/Entero Assays by site
dat.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
# need to change based on Target & also may want data for negative assays (MaxFluor will be non-null)
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoAllWellData.sql')
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse="\n")
dat.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
dat.df <- rbind(dat.df, dat.site.df)
}
rm(dat.site.df)
# Clean the data and reformat
# ============================================================================================
cp.median <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
cp.median.chla <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
cp.median.cmh <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
cp.median <- rbind(rbind(cp.median, cp.median.chla), cp.median.cmh)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
tm.median <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
tm.median.chla <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
tm.median.cmh <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
tm.median <- rbind(rbind(tm.median, tm.median.chla), tm.median.cmh)
tm.spread <- spread(data = tm.median, key = AssayName, value = Tm)
mf.median <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
mf.median.chla <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
mf.median.cmh <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.df)
mf.median <- rbind(rbind(mf.median, mf.median.chla), mf.median.cmh)
mf.spread <- spread(data = mf.median, key = AssayName, value = MaxFluor)
head(cp.median)
head(cp.spread)
cp.median[as.character(cp.median$AssayName)=='PCR2', ]
head(cmh.df)
# Set the environment
# ===========================================================================================
setwd('~/FilmArrayTrend/AnnomalyDetection/')
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
# Set up variables needed later in the analysis
# ===========================================================================================
# create an Epi date calendar that will be used by all the data sets
startYear <- 2013
calendar.df <- createCalendarLikeMicrosoft(startYear, 'Week')
calendar.df <- transformToEpiWeeks(calendar.df)
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df$Days <- 1
# set up some constants
imgDir <- 'Figures/'
dateBreaks <- unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])[order(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek']))][seq(1, length(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])), 8)]
# Load in the data - For the first iteration, build using HRV/EV Assay
# ===========================================================================================
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/CustomerSiteIdsWithNames.sql')
query <- paste(queryVector ,collapse="\n")
custnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/sitesRunningRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
sites.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/rpRunsBySite.sql',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianCpRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.cps <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianTmRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.tms <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/qcMedianMaxFluorRP.sql')
query <- paste(queryVector, collapse = '\n')
qc.lot.mfs <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/CHLA_SequencedRuns.sql')
query <- paste(queryVector, collapse = '\n')
chla.df <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/EnteroD68/CMH_SequencedRuns.sql')
query <- paste(queryVector, collapse = '\n')
cmh.df <- sqlQuery(PMScxn, query)
odbcClose(PMScxn)
# start a loop to gather Cp, Tm, and MaxFluor data for all HRV/Entero Assays by site
dat.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
# need to change based on Target & also may want data for negative assays (MaxFluor will be non-null)
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoAllWellData.sql')
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse="\n")
dat.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
dat.df <- rbind(dat.df, dat.site.df)
}
rm(dat.site.df)
head(cmh.df)
head(dat.df)
dat.df[dat.df$Id %in% cmh.df$Id, ]
a <- dat.df[dat.df$Id %in% cmh.df$Id, ]
View(a)
14700-14469
231/21
dat.df[dat.df$CustomerSiteId==25 & dat.df$Id %in% chla.df$Id, ]
chla.df$Id
head(chla.df)
dat.df[dat.df$CustomerSiteId==25, ]
head(dat.df[dat.df$CustomerSiteId==25, ])
chla.df[chla.df$Id %in% dat.df$Id, ]
head(chla.df)
head(dat.df)
class(chla.df$Id)
class(dat.df$Id)
chla.df[chla.df$Id %in% dat.df$Id, ]
rm(a)
cmh.df[!(cmh.df$Id %in% dat.df$Id), ]
a <- cmh.df[!(cmh.df$Id %in% dat.df$Id), ]
231/21
cmh.df[!(cmh.df$Id %in% dat.df$Id), ]
chla.df[chla.df$Id %in% dat.df$Id, ]
cmh.add <- cmh.df[!(cmh.df$Id %in% dat.df$Id), ] # some data from Children's Mercy is already in the Trend data set
rm(a)
cp.median <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
cp.median.chla <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
cp.median.cmh <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
cp.median <- rbind(rbind(cp.median, cp.median.chla), cp.median.cmh)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
tm.median <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
tm.median.chla <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
tm.median.cmh <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
tm.median <- rbind(rbind(tm.median, tm.median.chla), tm.median.cmh)
tm.spread <- spread(data = tm.median, key = AssayName, value = Tm)
mf.median <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
mf.median.chla <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
mf.median.cmh <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
mf.median <- rbind(rbind(mf.median, mf.median.chla), mf.median.cmh)
mf.spread <- spread(data = mf.median, key = AssayName, value = MaxFluor)
head(cp.spread)
head(tm.spread)
head(mf.spread)
max(cp.spread[,5:10], na.rm=TRUE)
cp.spread[is.na(cp.spread[,5:10])]
head(cp.spread)
cp.spread[is.na(cp.spread$HRV1), ]
a <- cp.spread[is.na(cp.spread$HRV1), ]
b <- tm.spread[is.na(tm.spread$HRV1), ]
head(a)
head(b)
dat.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
# need to change based on Target & also may want data for negative assays (MaxFluor will be non-null)
queryVector <- readLines('../DataSources/SQL/EnteroD68/rhinoAllWellData.sql')
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse="\n")
dat.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
dat.df <- rbind(dat.df, dat.site.df)
}
rm(dat.site.df)
cp.median <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
cp.median.chla <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
cp.median.cmh <- aggregate(Cp~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
cp.median <- rbind(rbind(cp.median, cp.median.chla), cp.median.cmh)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
tm.median <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
tm.median.chla <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
tm.median.cmh <- aggregate(Tm~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
tm.median <- rbind(rbind(tm.median, tm.median.chla), tm.median.cmh)
tm.spread <- spread(data = tm.median, key = AssayName, value = Tm)
mf.median <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=dat.df)
mf.median.chla <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=chla.df)
mf.median.cmh <- aggregate(MaxFluor~RunDataId+LotNo+CustomerSiteId+Date+AssayName, FUN=median, data=cmh.add)
mf.median <- rbind(rbind(mf.median, mf.median.chla), mf.median.cmh)
mf.spread <- spread(data = mf.median, key = AssayName, value = MaxFluor)
cp.spread[is.na(cp.spread$HRV1), ]
cp.spread
cp.spread[is.na(cp.spread)]
cp.spread[is.na(cp.spread[,5:10])]
rm(a, b)
qc.yeast.cp.avg <- mean(subset(qc.lot.cps, Name=='yeastRNA')$MedianCp)
cp.norm <- merge(data.frame(cp.spread[,1:4], cp.spread[,5:10]/cp.spread$yeastRNA), qc.lot.cps[qc.lot.cps$Name=='yeastRNA',c('PouchLotNumber','MedianCp')], by.x='LotNo', by.y='PouchLotNumber')
cp.norm <- data.frame(cp.norm[,1:4], cp.norm[,5:10]*cp.norm$MedianCp/qc.yeast.cp.avg)
colnames(cp.norm)[5:10] <- paste(colnames(cp.norm[5:10]), 'Cp', sep='_')
qc.yeast.tm.avg <- mean(subset(qc.lot.tms, Name=='yeastRNA')$MedianTm)
# tm.sparse.handler <- 100 # TRY TUNING THIS????
# tm.spread[,c(5:10)][is.na(tm.spread[,c(5:10)])] <- tm.sparse.handler
tm.norm <- merge(data.frame(tm.spread[,1:4], tm.spread[,5:10]/tm.spread$yeastRNA), qc.lot.tms[qc.lot.tms$Name=='yeastRNA',c('PouchLotNumber','MedianTm')], by.x='LotNo', by.y='PouchLotNumber')
tm.norm <- data.frame(RunDataId = tm.spread$RunDataId, tm.spread[,5:10]*tm.norm$MedianTm/qc.yeast.tm.avg)
colnames(tm.norm)[2:7] <- paste(colnames(tm.norm[2:7]), 'Tm', sep='_')
mf.norm <- data.frame(mf.spread[,1:4], mf.spread[,5:10]/mf.spread$yeastRNA)
head(mf.norm)
hist(mf.norm$Entero1)
hist(mf.norm$Entero2)
hist(mf.norm$Entero3)
hist(mf.norm$HRV1)
hist(mf.norm$HRV2)
hist(mf.norm$HRV3)
hist(mf.norm$HRV4)
mf.norm[mf.norm$Entero1 > 10, ]
mf.spread[mf.spread$RunDataId==654064, ]
dat.df[dat.df$RunDataId==654064, ]
mf.norm[mf.norm$Entero1 > 10, ]
mf.norm[mf.norm$HRV1 > 10, ]
hist(mf.norm$HRV3)
dat.df[dat.df$RunDataId==654064, ]
mf.norm[mf.norm$HRV1 > 10, ]
dat.df[dat.df$RunDataId==12348889244, ]
dat.df[dat.df$RunDataId==654064, ]
chla.df[chla.df$RunDataId==12348889244, ]
cmh.df[cmh.df$RunDataId==12348889244, ]
