# Make a chart showing TURN and ILI overlaid (national)
dateBreaks <- c('2013-28','2013-40','2014-01', '2014-14','2014-27','2014-40','2015-01', '2015-14','2015-27','2015-40','2016-01','2016-14','2016-27','2016-40','2017-01','2017-14','2017-27')
dateLabels <- c('Jul-2013','-','Jan-2014','-','Jul-2014','-','Jan-2015','-','Jul-2015','-','Jan-2016','-','Jul-2016','-','Jan-2017','-','Jul-2017')
ggplot(site.turn, aes(x=YearWeek, y=TURN, group='SiteTURN', color='SiteTURN')) + geom_line(size=1.5) + geom_line(aes(x=YearWeek, y=TURN, group='NationalTURN', color='NationalTURN'), data=natn.turn, size=1.5) + scale_color_manual(values=c('black','blue')) + facet_wrap(~CustomerSiteId, scale='free_y') + labs(title='TURN_v3') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(site.turn, aes(x=YearWeek, y=TURN, group=CustomerSiteId, color=CustomerSiteId)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1)) + scale_color_manual(values=createPaletteOfVariableLength(site.turn, 'CustomerSiteId'))
if(FALSE) {
####################################
# WORK ON A WAY TO HANDLE DATA WHERE THE DERIVATIVE OF DETECTION IS ABNORMAL (ESD)... AS MAY OCCUR AT SITES WITH BIG TURN SPIKES???
# COULD BE INCLUDED INTO TURN_omega.R
a <- subset(site.turn, CustomerSiteId==38)
a$Detection <- with(a, Positives/Runs)
a[2:(nrow(a)-1),'dD'] <- sapply(2:(nrow(a)-1), function(x) (a[(x+1),'Detection']-a[(x-1),'Detection'])/2)
b <- a[!(is.nan(a$dD)) & !(is.na(a$dD)), 'dD']
# hist(b, 30) # the distribution is approximately normal with some outliers
# ESD test - one iteration
# b <- c(-0.25, 0.68, 0.94, 1.15, 1.20, 1.26, 1.26, 1.34, 1.38, 1.43, 1.49, 1.49, 1.55, 1.56, 1.58, 1.65, 1.69, 1.70, 1.76, 1.77, 1.81, 1.91, 1.94, 1.96, 1.99, 2.06, 2.09, 2.10, 2.14, 2.15, 2.23, 2.24, 2.26, 2.35, 2.37, 2.40, 2.47, 2.54, 2.62, 2.64, 2.90, 2.92, 2.92, 2.93, 3.21, 3.26, 3.30, 3.59, 3.68, 4.30, 4.64, 5.34, 5.42, 6.01)
esd.test <- c()
n <- length(b)
# s <- sd(b)
# xbar <- mean(b)
alpha <- 0.05
for(i in 1:floor(sqrt(n))) {
s <- sd(b)
xbar <- mean(b)
R <- max(abs(b-xbar))/s
p <- 1 - alpha/(2*(n-i+1))
v <- n - i - 1
t <- qt(p = p, df = v)
lambda <- (n-i)*t/sqrt((n-i-1+t^2)*(n-i+1))
R > lambda # FIND THE MAX i FOR WHICH R > lambda... THAT IS THE NUMBER OF OUTLIERS IN THE DATA SET
temp <- data.frame(Outliers = i, testValue = R, criticalValue = lambda)
esd.test <- rbind(esd.test, temp)
# adjust b to remove the observation
remove.index <- which(abs(b-mean(b)) == max(abs(b-mean(b))))
b <- b[!(abs(b-mean(b)) == max(abs(b-mean(b))))]
}
####################################
}
# Add TURN and ILI together so that there's national and regional data for both
ili.turn.mrg <- merge(regn.turn, cdc.trend.rate.reg, by=c('YearWeek','CensusRegionNational'), all.x=TRUE)
ili.turn.mrg.nat <- merge(natn.turn, cdc.trend.rate.nat, by=c('YearWeek'), all.x=TRUE)
# regional and national plots of ILI vs. TURN for summer 2013 - present
p.RegionalOverlayOfILIandTURN <- ggplot(ili.turn.mrg, aes(x=YearWeek, y=Rate, color='ILI (CDC)', group='ILI (CDC)')) + geom_line(data=ili.turn.mrg, aes(x=YearWeek, y=TURN/50, color='TURN', group='TURN'), lwd=1.5) + geom_line(lwd=1.5) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0, 0.08), breaks=c(0, 0.02, 0.04, 0.06, 0.08), labels=c(0, 2, 4, 6, 8), sec.axis = sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)', x='Date') + scale_color_manual(values=c('black','red'), name='') + facet_wrap(~CensusRegionNational)
p.NationalOverlayOfILIandTURN <- ggplot(ili.turn.mrg.nat, aes(x=YearWeek, y=Rate, color='ILI (CDC)', group='ILI (CDC)')) + geom_line(data=ili.turn.mrg.nat, aes(x=YearWeek, y=TURN/50, color='TURN', group='TURN'), lwd=1.5) + geom_line(lwd=1.5) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0, 0.06), breaks=c(0, 0.02, 0.04, 0.06), labels=c(0, 2, 4, 6), sec.axis = sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)', x='Date') + scale_color_manual(values=c('black','red'), name='')
comp.df <- merge(merge(cdc.ili.df, cdc.flu.df, by=c('YearWeek','hhsRegion')), goog.flu.df, by=c('YearWeek','hhsRegion'))
hhs.turn <- merge(site.turn[,c('YearWeek','CustomerSiteId','TURN')], names.df[,c('CustomerSiteId','hhsRegion')], by='CustomerSiteId')
hhs.turn <- with(hhs.turn, aggregate(TURN~YearWeek+hhsRegion, FUN=mean))
comp.df <- merge(comp.df, hhs.turn, by=c('YearWeek','hhsRegion'), all.x=TRUE)
comp.trim <- comp.df[comp.df$hhsRegion %in% c(2, 5), ]
ggplot(comp.trim, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=Rate, group='Google Flu', color='Google Flu'), data=comp.trim, lwd=1.5) +  geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.trim, lwd=1.5) + facet_wrap(~hhsRegion, ncol=1) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + scale_color_manual(values=c('blue','black','red'), name='') + labs(y='Google Flu (%), ILI (%)', x='')
p.TripleOverlay201314 <- ggplot(comp.trim, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=Rate, group='Google Flu', color='Google Flu'), data=comp.trim, lwd=1.5) +  geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.trim, lwd=1.5) + facet_wrap(~hhsRegion, ncol=1) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + scale_color_manual(values=c('blue','black','red'), name='') + labs(y='Google Flu (%), ILI (%)', x='')
ev.d68 <- merge(subset(site.prev, ShortName=='HRV/EV'), names.df[names.df$hhsRegion %in% c(2, 5),c('CustomerSiteId','hhsRegion')], by='CustomerSiteId')
ev.d68 <- with(ev.d68, aggregate(Detection~YearWeek+hhsRegion+ShortName, FUN=mean))
ev.d68$hhsRegion <- paste('HHS Region', ev.d68$hhsRegion, sep=' ')
comp.trim$hhsRegion <- paste('HHS Region', comp.trim$hhsRegion, sep=' ')
ggplot(subset(ev.d68, as.character(YearWeek) >= '2013-41' & as.character(YearWeek) <= '2014-39'), aes(x=YearWeek)) + geom_area(aes(y=Detection, fill=ShortName, group=ShortName), stat='identity', position='stack') + geom_line(aes(x=YearWeek, y=TURN/3, group='TURN', color='TURN'), data=comp.trim, lwd=1.5) + geom_line(aes(x=YearWeek, y=18*iliRate, group='ILI', color='ILI'), data=comp.trim, lwd=1.5) + geom_line(aes(x=YearWeek, y=18*Rate, group='Google Flu', color='Google Flu'), data=comp.trim, lwd=1.5) + facet_wrap(~hhsRegion, ncol=1) + scale_fill_manual(values=taffy.pal, name='') + scale_color_manual(values=c('black','blue','red'), name='') + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8), sec.axis = sec_axis(~.*3, name='TURN, Rescaled ILI and Google Flu')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
regions <- unique(comp.trim$hhsRegion)
cor.region <- do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs ILI', Cor = cor(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate']))))
cor.region <- rbind(cor.region, do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs Google Flu', Cor = cor(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])))))
ccf.region <- do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs ILI', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'iliRate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$lag)$CCF)), ]))
ccf.region <- rbind(ccf.region, do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$lag)$CCF)), ])))
comp.nat <- merge(ili.turn.mrg.nat, goog.flu.df[goog.flu.df$hhsRegion==0, c('YearWeek','Rate')], by='YearWeek')
colnames(comp.nat)[grep('Rate\\.', colnames(comp.nat))] <- c('iliRate','googRate')
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red')) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red')) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
head(comp.nat)
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red'))
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5)
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5)
dev.off()
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red')) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
ggplot(comp.trim, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=Rate, group='Google Flu', color='Google Flu'), data=comp.trim, lwd=1.5) +  geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.trim, lwd=1.5) + facet_wrap(~hhsRegion, ncol=1) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + scale_color_manual(values=c('blue','black','red'), name='') + labs(y='Google Flu (%), ILI (%)', x='')
p.TripleOverlayNational201314 <- ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red')) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
head(comp.nat)
ccf(comp.nat$TURN, comp.nat$iliRate)
ccf(comp.nat$TURN, comp.nat$iliRate)$acf
ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf
ccf.region <- do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs ILI', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'])$lag, plot = FALSE)$CCF)), ]))
ccf.region <- rbind(ccf.region, do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$lag)$CCF, plot = FALSE)), ])))
head(comp.nat)
data.frame(CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)
ccf.nat <- data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)
ccf.nat
ccf.nat[which(ccf.nat$CCF==max(ccf.nat$CCF)), ]
data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)), ]
data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF)), ]
rbind(ccf.nat, data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ])
data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF)), ]
data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ]
data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ]
ccf.nat
ccf.nat <- data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs ILI', CCF = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$iliRate, plot = FALSE)$lag)$CCF)), ]
ccf.nat <- rbind(ccf.nat, data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'TURN vs Google Flu', CCF = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$TURN, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ])
ccf.nat
rbind(ccf.nat, data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ])
ccf.nat <- rbind(ccf.nat, data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)[which(data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)$CCF==max(data.frame(Key = 'ILI vs Google Flu', CCF = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$acf, Lag = ccf(comp.nat$iliRate, comp.nat$googRate, plot = FALSE)$lag)$CCF)), ])
rm(cor.region)
do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'ILI vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'])$lag)$CCF, plot = FALSE)), ]))
do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'ILI vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF)), ]))
do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'ILI vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF)), ]))
ccf.region <- do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs ILI', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], plot = FALSE)$lag)$CCF)), ]))
ccf.region <- rbind(ccf.region, do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'ILI vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'iliRate'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF)), ])))
# CHANGE TO iliRate vs. Google Flu
ccf.region <- rbind(ccf.region, do.call(rbind, lapply(1:length(regions), function(x) data.frame(Region = regions[x], Key = 'TURN vs Google Flu', CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[1], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)[which(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF == max(data.frame(CCF = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$acf, Lag = ccf(comp.trim[comp.trim$hhsRegion==regions[x], 'TURN'], comp.trim[comp.trim$hhsRegion==regions[x], 'Rate'], plot = FALSE)$lag)$CCF)), ])))
ccf.region
ccf.nat
head(natn.prev)
head(ili.turn.mrg.nat)
organism.drivers.df <- merge(ili.turn.mrg.nat, natn.prev, by='YearWeek')
head(organism.drivers.df)
head(natn.prev)
spread(natn.prev, key=ShortName, value=Detection)
a <- spread(natn.prev[,c('YearWeek','ShortName','Detection')], key=ShortName, value=Detection)
head(a)
View(a)
natn.prev.spread <- spread(natn.prev[,c('YearWeek','ShortName','Detection')], key=ShortName, value=Detection)
head(natn.prev.spread)
colnames(natn.prev.spread)[2:ncol(natn.prev.spread)]
data.frame(ShortName = colnames(natn.prev.spread)[2:ncol(natn.prev.spread)], Code = letters[1:(nrow(natn.prev.spread)-1)])
data.frame(ShortName = colnames(natn.prev.spread)[2:ncol(natn.prev.spread)], Code = letters[1:(ncol(natn.prev.spread)-1)])
decoder.df <- data.frame(ShortName = colnames(natn.prev.spread)[2:ncol(natn.prev.spread)], Code = letters[1:(ncol(natn.prev.spread)-1)])
colnames(natn.prev.spread)[2:ncol(natn.prev.spread)] <- letters[1:(ncol(natn.prev.spread)-1)]
organism.drivers.df <- merge(ili.turn.mrg.nat, natn.prev.spread, by='YearWeek')
head(organism.drivers.df)
install.packages('glmnet')
library(glmnet)
View(organism.drivers.df)
glmnet(x = as.matrix(organism.drivers.df[,3:ncol(organism.drivers.df)]))
as.matrix(organism.drivers.df[,3:ncol(organism.drivers.df)])
glmnet(x = as.matrix(organism.drivers.df[,3:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, alpha = 1)
a <- as.matrix(organism.drivers.df[,3:ncol(organism.drivers.df)])
View(a)
glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, alpha = 1)
glm.lasso.fit <- glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, alpha = 1)
summary(glm.lasso.fit)
glm.lasso.fit
plot(glm.lasso.fit, xvar='lambda', label=TRUE)
coef(glm.lasso.fit)
coef(glm.lasso.fit, s= 'lambda.1se')
coef(glm.lasso.fit, s='lambda.1se')
coef(glm.lasso.fit)
summary(glm.lasso.fit)
summary(glm.lasso.fit)$lambda
glm.lasso.fit$lambda
glm.lasso.fit
cv.glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, family='mgaussian')
plot(glm.lasso.fit)
cv.glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, family='mgaussian')
cv.glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN)
glm.cvm.fit <- cv.glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN)
plot(glm.cvm.fit)
coef(glm.cvm.fit, s = 'lambda.1se')
attributes(coef(glm.cvm.fit, s = 'lambda.1se'))
head(site.prev)
coeff(glm.lasso.fit)
coef(glm.lasso.fit)
head(site.pr    )
head(site.prev)
unique(site.prev[grep('FluA', site.prev$ShortName), 'ShortName'])
unique(site.prev[grep('FluA|fluenza A', site.prev$ShortName), 'ShortName'])
unique(site.prev[grep('FluA|Flu', site.prev$ShortName), 'ShortName'])
unique(site.prev[grep('FluA|Flu A', site.prev$ShortName), 'ShortName'])
site.prev[grep('FluA|Flu A', site.prev$ShortName), 'ShortName']
site.prev.agg <- site.prev
site.prev.agg$ShortName <- as.character(site.prev.agg$ShortName)
site.prev.agg[grep('FluA|Flu A', site.prev.agg$ShortName), 'ShortName']
site.prev[grep('FluB', site.prev$ShortName), 'ShortName']
site.prev.agg[grep('FluA|Flu A', site.prev.agg$ShortName), 'ShortName'] <- 'FluA'
unique(site.prev.agg$ShortName)
head(site.prev.agg)
site.prev.agg <- merge(with(site.prev.agg, aggregate(Runs~YearWeek+CustomerSiteId+ShortName, FUN=mean)), with(site.prev.agg, aggregate(Positives~YearWeek+CustomerSiteId+ShortName, FUN=sum)), by=c('YearWeek','CustomerSiteId'))
head(site.prev.agg)
site.prev.agg <- site.prev
site.prev.agg$ShortName <- as.character(site.prev.agg$ShortName)
site.prev.agg[grep('FluA|Flu A', site.prev.agg$ShortName), 'ShortName'] <- 'FluA'
head(site.prev.agg)
head(site.prev.agg[site.prev.agg$YearWeek=='2015-33' & site.prev.agg$CustomerSiteId==2 & site.prev.agg$ShortName=='Adeno', ])
site.prev.agg <- merge(with(site.prev.agg, aggregate(Runs~YearWeek+CustomerSiteId, FUN=mean)), with(site.prev.agg, aggregate(Positives~YearWeek+CustomerSiteId+ShortName, FUN=sum)), by=c('YearWeek','CustomerSiteId'))
head(site.prev.agg[site.prev.agg$YearWeek=='2015-33' & site.prev.agg$CustomerSiteId==2 & site.prev.agg$ShortName=='Adeno', ])
head(site.prev.agg)
49200-41820
49200-41820/5
(49200-41820)/5
(49200-41820)/5/200
(49200-41820)/5/204
head(site.prev.agg)
site.prev.agg$Detection <- with(site.prev.agg, Positives/Runs)
natn.prev.agg <- with(site.prev.agg, aggregate(Detection~YearWeek+ShortName, FUN=mean))
site.prev.agg[site.prev.agg$Runs < 30, 'Detection'] <- NA
natn.prev.agg <- with(site.prev.agg, aggregate(Detection~YearWeek+ShortName, FUN=mean))
head(natn.prev.agg)
ggplot(natn.prev.agg, aes(x=YearWeek, y=Detection, group=ShortName, fill=ShortName)) + goem_bar(stat='identity')
ggplot(natn.prev.agg, aes(x=YearWeek, y=Detection, group=ShortName, fill=ShortName)) + geom_bar(stat='identity')
site.prev.agg[grep('CoV', site.prev.agg$ShortName), 'ShortName']
site.prev.agg <- site.prev
site.prev.agg$ShortName <- as.character(site.prev.agg$ShortName)
site.prev.agg[grep('FluA|Flu A', site.prev.agg$ShortName), 'ShortName'] <- 'FluA'
site.prev.agg[grep('CoV', site.prev.agg$ShortName), 'ShortName'] <- 'CoV'
site.prev.agg[grep('PIV', site.prev.agg$ShortName), 'ShortName'] <- 'PIV'
site.prev.agg <- merge(with(site.prev.agg, aggregate(Runs~YearWeek+CustomerSiteId, FUN=mean)), with(site.prev.agg, aggregate(Positives~YearWeek+CustomerSiteId+ShortName, FUN=sum)), by=c('YearWeek','CustomerSiteId'))
site.prev.agg$Detection <- with(site.prev.agg, Positives/Runs)
site.prev.agg[site.prev.agg$Runs < 30, 'Detection'] <- NA
natn.prev.agg <- with(site.prev.agg, aggregate(Detection~YearWeek+ShortName, FUN=mean))
ggplot(natn.prev.agg, aes(x=YearWeek, y=Detection, group=ShortName, fill=ShortName)) + geom_bar(stat='identity')
site.prev.agg[grep('pne|per', site.prev.agg$ShortName), 'ShortName']
site.prev.agg <- site.prev
site.prev.agg$ShortName <- as.character(site.prev.agg$ShortName)
site.prev.agg[grep('FluA|Flu A', site.prev.agg$ShortName), 'ShortName'] <- 'FluA'
site.prev.agg[grep('CoV', site.prev.agg$ShortName), 'ShortName'] <- 'CoV'
site.prev.agg[grep('PIV', site.prev.agg$ShortName), 'ShortName'] <- 'PIV'
site.prev.agg[grep('pne|per', site.prev.agg$ShortName), 'ShortName'] <- 'Bacteria'
site.prev.agg <- merge(with(site.prev.agg, aggregate(Runs~YearWeek+CustomerSiteId, FUN=mean)), with(site.prev.agg, aggregate(Positives~YearWeek+CustomerSiteId+ShortName, FUN=sum)), by=c('YearWeek','CustomerSiteId'))
site.prev.agg$Detection <- with(site.prev.agg, Positives/Runs)
site.prev.agg[site.prev.agg$Runs < 30, 'Detection'] <- NA
natn.prev.agg <- with(site.prev.agg, aggregate(Detection~YearWeek+ShortName, FUN=mean))
site.prev.agg[grep('pne|per', site.prev.agg$ShortName), 'ShortName']
ggplot(natn.prev.agg, aes(x=YearWeek, y=Detection, group=ShortName, fill=ShortName)) + geom_bar(stat='identity')
ggplot(natn.prev.agg, aes(x=YearWeek, y=Detection, group=ShortName, fill=ShortName)) + geom_bar(stat='identity')
natn.prev.spread <- spread(natn.prev.agg[,c('YearWeek','ShortName','Detection')], key=ShortName, value=Detection)
head(natn.prev.spread)
decoder.df <- data.frame(ShortName = colnames(natn.prev.spread)[2:ncol(natn.prev.spread)], Code = letters[1:(ncol(natn.prev.spread)-1)])
colnames(natn.prev.spread)[2:ncol(natn.prev.spread)] <- letters[1:(ncol(natn.prev.spread)-1)]
organism.drivers.df <- merge(ili.turn.mrg.nat, natn.prev.spread, by='YearWeek')
glm.lasso.fit <- glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN, alpha = 1)
glm.cvm.fit <- cv.glmnet(x = as.matrix(organism.drivers.df[,4:ncol(organism.drivers.df)]), y = organism.drivers.df$TURN)
plot(glm.cvm.fit)
head(organism.drivers.df)
source('../Rfunctions/generateCombosBetter.R')
generateCombos(letters[2:nrow(natn.prev.spread)], 2)
letters[1:(nrow(natn.prev.spread)-1)]
letters[1:(ncol(natn.prev.spread)-1)]
head(organism.drivers.df)
decoder.df
letters[1:(ncol(natn.prev.spread)-1)]
generateCombos(letters[1:(ncol(natn.prev.spread)-1)], 3)
tri.orgs <- generateCombos(letters[1:(ncol(natn.prev.spread)-1)], 3)
head(tri.orgs)
head(organism.drivers.df)
paste('TURN', letters[1:(ncol(natn.prev.spread)-1)], sep='~')
paste('TURN', paste(letters[1:(ncol(natn.prev.spread)-1)], collapse='+'), sep='~')
lm(as.formula(paste('TURN', paste(letters[1:(ncol(natn.prev.spread)-1)], collapse='+'), sep='~')), data=organism.drivers.df)
summary(lm(as.formula(paste('TURN', paste(letters[1:(ncol(natn.prev.spread)-1)], collapse='+'), sep='~')), data=organism.drivers.df))
decoder.df
lm(as.formula(paste('TURN', paste(tri.orgs[1], collapse='+'), sep='~')), data=organism.drivers.df)
head(tri.orgs)
lm(as.formula(paste('TURN', tri.orgs[1], sep='~')), data=organism.drivers.df)
ggplot(comp.trim, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=Rate, group='Google Flu', color='Google Flu'), data=comp.trim, lwd=1.5) +  geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.trim, lwd=1.5) + facet_wrap(~hhsRegion, ncol=1) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + scale_color_manual(values=c('blue','black','red'), name='') + labs(y='Google Flu (%), ILI (%)', x='')
ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red')) + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
lm(as.formula(paste('TURN', tri.orgs[1], sep='~')), data=organism.drivers.df)
paste('TURN', tri.orgs[1], sep='~')
paste('TURN', tri.orgs[1,'Combos'], sep='~')
paste('TURN', tri.orgs[1,'Combo'], sep='~')
p.TripleOverlayNational201314 <- ggplot(comp.nat, aes(x=YearWeek, y=iliRate, group='ILI', color='ILI')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=googRate, group='Google Flu', color='Google Flu'), data=comp.nat, lwd=1.5) + geom_line(aes(x=YearWeek, y=TURN/50, group='TURN', color='TURN'), data=comp.nat, lwd=1.5) + scale_color_manual(values=c('blue','black','red'), name='') + scale_x_discrete(breaks=dateBreaks.alt, labels=dateLabels.alt) + scale_y_continuous(limits=c(0,0.05), labels=c(0, 1, 2, 3, 4, 5), breaks=c(0, 0.01, 0.02, 0.03, 0.04, 0.05), sec.axis=sec_axis(~.*50, name='TURN')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
lm(as.formula(paste('TURN', tri.orgs[x,'Combo'], sep='~')), data=organism.drivers.df)
lm(as.formula(paste('TURN', tri.orgs[1,'Combo'], sep='~')), data=organism.drivers.df)
library(RODBC)
library(lubridate)
library(xlsx)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(dplyr)
library(tidyr)
require(dateManip)
library(glmnet)
# load custom functions
source('../Rfunctions/TURN_omega.R')
source('../Rfunctions/generateCombosBetter.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
lm(as.formula(paste('TURN', tri.orgs[1,'Combo'], sep='~')), data=organism.drivers.df)
summary(lm(as.formula(paste('TURN', tri.orgs[1,'Combo'], sep='~')), data=organism.drivers.df))
summary(lm(as.formula(paste('TURN', tri.orgs[1,'Combo'], sep='~')), data=organism.drivers.df))$coef
rm(tri.orgs)
decoder.df
summary(lm(as.formula(paste('TURN', tri.orgs[1,'Combo'], sep='~')), data=organism.drivers.df))
combos <- generateCombos(letters[1:(ncol(natn.prev.spread)-1)], 3)
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
attributes(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df)))
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[1]
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$df
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$terms
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$residuals
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$sigma
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$coeff
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
atributes(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df)))
attributes(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df)))
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$cov.unscaled
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$aliased
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic
pf(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[1], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[2], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[3])
pf(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[1], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[2], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[3], lower=FALSE)
pf(summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[1], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[2], summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))$fstatistic[3], lower=FALSE)
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
generateCombos(decoder.df$Code, 3)
summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
fit.sum <- summary(lm(as.formula(paste('TURN', combos[1,'Combo'], sep='~')), data=organism.drivers.df))
fit.sum
fit.sum$adj.r.squared
fit.sum$sigma
fit.sum$fstatistic[1]
pf(fit.sum$fstatistic[1], fit.sum$fstatistic[2], fit.sum$fstatistic[3], lower=FALSE)
fit.sum$coef
fit.sum$coefclass())
class(fit.sum$coef)
fit.sum$coef[3,]
fit.sum$coef[,3]
fit.sum$coef[2:4,4]
fit.sum$coef[2:4,4] < 0.05
sum(fit.sum$coef[2:4,4] < 0.05)
sum(fit.sum$coef[2:4,4] < 0.01)
sum(fit.sum$coef[2:4,4] < 0.001)
i <- 3
fits.df <- c()
combos <- generateCombos(decoder.df$Code, i)
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
fits.df
a <- fits.df
a <- a[with(a, order(R2, decreasing = TRUE)), ]
View(a)
decoder.df
i <- 4
fits.df <- c()
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
b <- fits.df
b <- b[with(b, order(R2, decreasing = TRUE)), ]
View(b)
decoder.df
anova(lm(TURN~d+g+i, data=organism.drivers.df), lm(TURN~d+g+i+e, data=organism.drivers.df))
i
i <- 5
fits.df <- c()
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
d <- fits.df
d <- d[with(d, order(R2, decreasing = TRUE)), ]
View(d)
anova(lm(TURN~d+g+i, data=organism.drivers.df), lm(TURN~d+g+i+e, data=organism.drivers.df), lm(TURN~d+g+i+e+c, data=organism.drivers.df))
fits.df[fits.df$Fstat == max(fits.df$Fstat),]
fits.df <- c()
best.fits <- c()
for (i in 3:length(decoder.df$Code)) {
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
best.fit <- fits.df[fits.df$Fstat == max(fits.df$Fstat), ]
best.fits <- rbind(best.fits, best.fit)
}
best.fits
i
fits.df <- c()
best.fits <- c()
for (i in 3:length(decoder.df$Code)) {
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
best.fit <- fit.df[fit.df$Fstat == max(fit.df$Fstat), ]
best.fits <- rbind(best.fits, best.fit)
}
best.fits
with(best.fits, plot(x=Vars, y=RSE))
with(best.fits, lines(x=Vars, y=RSE))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits)
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, se=F, method=lm, formula=RSE~poly(Vars, 8)))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, se=F, method=lm, formula=RSE~poly(best.fits$Vars, 8)))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, se=F, method=lm, formula=best.fit$RSE~poly(best.fits$Vars, 8)))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, method=lm, formula=RSE~poly(Vars, 8)), data=best.fits)
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, method=lm, formula=as.formula(RSE~poly(Vars, 8))), data=best.fits)
lm(RSE~poly(Vars, 8), data=best.fits)
lm(RSE~poly(Vars, 3), data=best.fits)
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, method=lm, formula=RSE~poly(Vars, 3)), data=best.fits)
predict(lm(RSE~poly(Vars, 3), data=best.fits))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 3), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 4), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 3), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 3), data=best.fits)), method='lm'))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_line(lwd=1.5) + geom_point(aes(x=Vars, y=RSE), data=best.fits) + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 3), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point() + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 3), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point() + stat_smooth(aes(x=Vars, y=predict(lm(RSE~poly(Vars, 4), data=best.fits))))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point()
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=2)
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=2) + labs(x='Variables in Model', y='Residual Standard Error')
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=2) + labs(x='Variables in Model', y='Residual Standard Error') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=2) + labs(x='Variables in Model', y='Residual Standard Error') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank())
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=2) + labs(x='Variables in Model', y='Residual Standard Error') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=3, color='red') + labs(x='Variables in Model', y='Residual Standard Error') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'))
ggplot(best.fits, aes(x=Vars, y=RSE, group='Residual Standard Error')) + geom_point(size=5, color='red') + labs(x='Variables in Model', y='Residual Standard Error') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'))
best.fits
decoder.df
lm(TURN~g+h+i, data=organism.drivers.df)
summary(lm(TURN~g+h+i, data=organism.drivers.df))
decoder.df
i
i <- 3
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
best.fits <- c()
fits.df <- c()
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
a <- fites.df
a <- fits.df
a <- a[with(a, order(Fstat, decreasing = TRUE)), ]
View(a)
rm(b, d)
best.fits
best.fits <- c()
fits.df <- c()
for (i in 3:length(decoder.df$Code)) {
combos <- generateCombos(decoder.df$Code, i)
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
best.fit <- fit.df[fit.df$Fstat == max(fit.df$Fstat), ]
best.fits <- rbind(best.fits, best.fit)
}
best.fits
decoder.df
best.fit
best.fits <- c()
for (i in 3:length(decoder.df$Code)) {
combos <- generateCombos(decoder.df$Code, i)
fits.df <- c()
for(j in 1:length(combos$Combo)) {
fit.sum <- summary(lm(as.formula(paste('TURN', combos[j,'Combo'], sep='~')), data=organism.drivers.df))
fit.df  <- data.frame(Vars = i, Combo = combos$Combo[j], RSE = fit.sum$sigma, R2 = fit.sum$adj.r.squared,
Fstat = fit.sum$fstatistic[1], pFstat = pf(fit.sum$fstatistic[1],fit.sum$fstatistic[2],fit.sum$fstatistic[3],lower=FALSE),
Coefp05 = sum(fit.sum$coeff[2:(i+1),4] < 0.05), Coefp01 = sum(fit.sum$coeff[2:(i+1),4] < 0.01), Coefp001 = sum(fit.sum$coeff[2:(i+1),4] < 0.001))
fits.df <- rbind(fits.df, fit.df)
}
best.fit <- fits.df[fits.df$Fstat == max(fits.df$Fstat), ]
best.fits <- rbind(best.fits, best.fit)
}
best.fits
lm(TURN~d+g+i, data=organism.drivers.df)
summary(lm(TURN~d+g+i, data=organism.drivers.df))
decoder.df
summary(lm(TURN~d+g+i, data=organism.drivers.df))
decoder.df
head(natn.prev)
rm(a, b, d)
regn.prev$Name <- factor(regn.prev$ShortName, levels=c('RSV','PIV4','PIV3','PIV2','PIV1','hMPV','FluB','FluA H3','FluA H1-09','FluA H1','Flu A','CoV OC43','CoV NL63','CoV HKU1','CoV 229E','HRV/EV','M. pne','C. pne','B. per','Adeno'))
natn.prev$Name <- factor(natn.prev$ShortName, levels=c('RSV','PIV4','PIV3','PIV2','PIV1','hMPV','FluB','FluA H3','FluA H1-09','FluA H1','Flu A','CoV OC43','CoV NL63','CoV HKU1','CoV 229E','HRV/EV','M. pne','C. pne','B. per','Adeno'))
ggplot(regn.prev, aes(x=YearWeek)) + geom_area(aes(y=Detection, fill=Name, group=Name), stat='identity', position='stack') + facet_wrap(~CensusRegionNational) + scale_fill_manual(values=taffy.pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
p.RegionalLaffyTaffy <- ggplot(regn.prev, aes(x=YearWeek)) + geom_area(aes(y=Detection, fill=Name, group=Name), stat='identity', position='stack') + facet_wrap(~CensusRegionNational) + scale_fill_manual(values=taffy.pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
p.NationalLaffyTaffy <- ggplot(natn.prev, aes(x=YearWeek)) + geom_area(aes(y=Detection, fill=Name, group=Name), stat='identity', position='stack') + scale_fill_manual(values=taffy.pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
p.NationalLaffyTaffy
# PRINT OUT ALL THE FIGURES
plots <- ls()[grep('^p\\.',ls())]
plots
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
