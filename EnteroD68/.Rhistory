pca.test.count <- min(which(sapply(1:12, function(x) pca.test$sdev[x]^2/sum(pca.test$sdev^2)) <= 0.05))
pca.test.var.at.train.pca <- 1 - pca.test$sdev[pca.train.count]^2/sum(pca.test$sdev^2)
# create some data frame that contains information about the timeslice
temp <- data.frame(CustomerSiteId = sites[i], Seq = j, TestStartDate = site.test[site.test$Obs==min(site.test$Obs), 'Date'],
TrainNoise = train.noise, TestNoise = test.noise, # RatioNoise = test.horizon*test.noise/train.noise,
TrainPCA = pca.train.count, TrainVar = pca.train.var, TestPCA = pca.test.count, TestVar = pca.test.var,
TestVarWithTrainPCA = pca.test.var.at.train.pca) #,
# RatioPCA = pca.test.count/pca.train.count)
site.df <- rbind(site.df, temp)
}
# print(Sys.time() - site.start.time)
scored.df <- rbind(scored.df, site.df)
}
head(scored.df)
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
head(scored.df)
ggplot(scored.df, aes(x=TestStartDate, y=10*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + facet_wrap(~CustomerSiteId)
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
ggplot(scored.df, aes(x=TestStartDate, y=10*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + facet_wrap(~CustomerSiteId)
head(scored.df)
ggplot(scored.df, aes(x=TestStartDate, y=(10*TestNoise/TrainNoise+TestPCA/TrainPCA/TestVarWithTrainPCA), color=TestVarWithTrainPCA)) + geom_point() + facet_wrap(~CustomerSiteId)
with(scored.df, 10*TestNoise/TrainNoise+TestPCA/TrainPCA/TestVarWithTrainPCA)
head(with(scored.df, 10*TestNoise/TrainNoise+TestPCA/TrainPCA/TestVarWithTrainPCA))
head(with(scored.df, 10*TestNoise/TrainNoise+TestPCA/TrainPCA/TestVarWithTrainPCA))
head(with(scored.df, 10*TestNoise/TrainNoise))
head(with(scored.df, 10*TestNoise/TrainNoise/TestVarWithTrainPCA))
head(cp.assay.norm.seq)
seq.anoms <- c()
for(i in 1:length(sites)) {
site.date <- min(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Date'])
site.sequences <- as.character(unique(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Sequence']))
site.anoms <- c()
for(j in 1:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
site.anoms$Date <- as.Date(site.anoms$timestamp)
site.anom.agg.date <- with(site.anoms, aggregate(anoms~Date, FUN=sum))
site.anom.agg.seq <- with(site.anoms, aggregate(anoms~Sequence, FUN=sum))
site.anom.agg.date[site.anom.agg.date$anoms > (mean(site.anom.agg.date$anoms) + 3*sd(site.anom.agg.date$anoms)), ]
site.anom.agg.seq[site.anom.agg.seq$anoms > (mean(site.anom.agg.seq$anoms) + 3*sd(site.anom.agg.seq$anoms)), ]
seq.anoms <- rbind(seq.anoms, site.anoms)
}
head(site.anoms)
head(seq.anoms)
head(site.anoms)
head(site.seq.anoms)
i
sites[i]
data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
head(site.seq.anoms)
site.seq.anoms$anoms
nrow(site.seq.anoms$anoms)
j
site.sequences
length(site.sequences)
j
for(j in 39:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
if(nrow(site.seq.anoms$anoms)==0) { next() }
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
site.anoms$Date <- as.Date(site.anoms$timestamp)
site.anom.agg.date <- with(site.anoms, aggregate(anoms~Date, FUN=sum))
site.anom.agg.seq <- with(site.anoms, aggregate(anoms~Sequence, FUN=sum))
site.anom.agg.date[site.anom.agg.date$anoms > (mean(site.anom.agg.date$anoms) + 3*sd(site.anom.agg.date$anoms)), ]
site.anom.agg.seq[site.anom.agg.seq$anoms > (mean(site.anom.agg.seq$anoms) + 3*sd(site.anom.agg.seq$anoms)), ]
seq.anoms <- rbind(seq.anoms, site.anoms)
i
j
for(i in 6:length(sites)) {
site.date <- min(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Date'])
site.sequences <- as.character(unique(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Sequence']))
site.anoms <- c()
for(j in 1:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
if(nrow(site.seq.anoms$anoms)==0) { next() }
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
site.anoms$Date <- as.Date(site.anoms$timestamp)
site.anom.agg.date <- with(site.anoms, aggregate(anoms~Date, FUN=sum))
site.anom.agg.seq <- with(site.anoms, aggregate(anoms~Sequence, FUN=sum))
site.anom.agg.date[site.anom.agg.date$anoms > (mean(site.anom.agg.date$anoms) + 3*sd(site.anom.agg.date$anoms)), ]
site.anom.agg.seq[site.anom.agg.seq$anoms > (mean(site.anom.agg.seq$anoms) + 3*sd(site.anom.agg.seq$anoms)), ]
seq.anoms <- rbind(seq.anoms, site.anoms)
}
head(site.seq.anoms)
i
j
sites[i]
site.date
head(site.seq.anoms)
head(site.sequences)
head(sequence.freq)
sites[i]
site.sequences[j]
head(sequence.freq.fill)
head(run.freq.fill)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
head(sequence.freq.fill)
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
site.seq.anoms$anoms
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
head(site.anoms)
tail(site.anoms)
site.anoms$Date <- as.Date(site.anoms$timestamp)
site.anom.agg.date <- with(site.anoms, aggregate(anoms~Date, FUN=sum))
site.anom.agg.seq <- with(site.anoms, aggregate(anoms~Sequence, FUN=sum))
site.anom.agg.date[site.anom.agg.date$anoms > (mean(site.anom.agg.date$anoms) + 3*sd(site.anom.agg.date$anoms)), ]
site.anom.agg.seq[site.anom.agg.seq$anoms > (mean(site.anom.agg.seq$anoms) + 3*sd(site.anom.agg.seq$anoms)), ]
tail(seq.anoms)
sites[i]
site.sequences[j]
j
length(site.sequences)
for(j in 83:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
if(nrow(site.seq.anoms$anoms)==0) { next() }
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
j
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.anoms <- rbind(site.anoms, site.seq.anoms)
head(site.anoms)
head(site.seq.anoms)
as.Date(site.seq.anoms$timestamp)
site.seq.anoms$Date <- as.Date(site.seq.anoms$timestamp)
site.anoms <- rbind(site.anoms, site.seq.anoms)
j
for(j in 84:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
if(nrow(site.seq.anoms$anoms)==0) { next() }
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.seq.anoms$Date <- as.Date(site.seq.anoms$timestamp)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
i
for(i in 11:length(sites)) {
site.date <- min(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Date'])
site.sequences <- as.character(unique(cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i], 'Sequence']))
site.anoms <- c()
for(j in 1:length(site.sequences)) {
sequence.freq <- cp.assay.norm.seq[cp.assay.norm.seq$CustomerSiteId==sites[i] & cp.assay.norm.seq$Sequence==site.sequences[j], ]
sequence.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), data.frame(Date = sequence.freq[,c('Date')], Freq = 1), by='Date', all.x=TRUE)
sequence.freq.fill[is.na(sequence.freq.fill$Freq), 'Freq'] <- 0
sequence.freq.fill <- with(sequence.freq.fill, aggregate(Freq~Date, FUN=sum))
# I don't think it's appropriate to use a count, because that is skewed over time by changes in utlization... it should be a rate of positive HRV/EV tests or something
run.freq.fill <- merge(data.frame(Date = calendar.df[calendar.df$Date > site.date, 'Date']), runs.df[runs.df$CustomerSiteId==sites[i], c('Date','Run')], by='Date', all.x=TRUE)
run.freq.fill[is.na(run.freq.fill$Run), 'Run'] <- 0
run.freq.fill <- with(run.freq.fill, aggregate(Run~Date, FUN=sum))
sequence.freq.fill <- merge(run.freq.fill, sequence.freq.fill, by='Date')
sequence.freq.fill$Rate <- with(sequence.freq.fill, Freq/Run)
sequence.freq.fill[is.nan(sequence.freq.fill$Rate), 'Rate'] <- 0
# update
sequence.freq.fill$Date <- as.POSIXct(sequence.freq.fill$Date)
site.seq.anoms <- AnomalyDetectionTs(sequence.freq.fill[,c('Date','Rate')], max_anoms=0.01, direction='both', plot=FALSE)
if(nrow(site.seq.anoms$anoms)==0) { next() }
site.seq.anoms <- data.frame(CustomerSiteId = sites[i], Sequence = site.sequences[j], site.seq.anoms$anoms)
site.seq.anoms$Date <- as.Date(site.seq.anoms$timestamp)
site.anoms <- rbind(site.anoms, site.seq.anoms)
}
# site.anoms$Date <- as.Date(site.anoms$timestamp)
# site.anom.agg.date <- with(site.anoms, aggregate(anoms~Date, FUN=sum))
# site.anom.agg.seq <- with(site.anoms, aggregate(anoms~Sequence, FUN=sum))
# site.anom.agg.date[site.anom.agg.date$anoms > (mean(site.anom.agg.date$anoms) + 3*sd(site.anom.agg.date$anoms)), ]
# site.anom.agg.seq[site.anom.agg.seq$anoms > (mean(site.anom.agg.seq$anoms) + 3*sd(site.anom.agg.seq$anoms)), ]
seq.anoms <- rbind(seq.anoms, site.anoms)
}
head(seq.anoms)
ggplot(subset(seq.anoms, CustomerSiteId=='13'), aes(x=Date, y=anoms, fill=Sequence)) + geom_bar(stat='identity')
ggplot(subset(seq.anoms, CustomerSiteId=='13'), aes(x=Date, y=anoms, fill=Sequence)) + geom_bar(stat='identity') + theme(legend.position='bottom')
head(scored.df)
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(1, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 90)]
i
i <- 1
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date')
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(90, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 90)]
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date')
head(site.date.temp)
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)))
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed')
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
i
i <- 2
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
png(paste('CustomerSite',site.to.gif,'_',i))
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
dev.off()
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# png(paste('CustomerSite',site.to.gif,'_',i))
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
paste('CustomerSite',site.to.gif,'_',i)
paste('CustomerSite',site.to.gif,'_',i,'.png', sep='')
length(site.date.breaks)
ifelse(i < 10, paste('0',i, sep=''))
ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
paste('CustomerSite',site.to.gif,'_',ifelse(i < 10, paste('0',i, sep=''), paste(i, sep='')),'.png', sep='')
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(90, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 90)]
for(i in 1:length(site.date.breaks)) {
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
png(paste('Movie/Scored/','CustomerSite',site.to.gif,'_',ifelse(i < 10, paste('0',i, sep=''), paste(i, sep='')),'.png', sep=''))
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
dev.off()
}
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(90, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 90)]
for(i in 1:length(site.date.breaks)) {
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
png(paste('Movie/Scored/','CustomerSite',site.to.gif,'_',ifelse(i < 10, paste('0',i, sep=''), paste(i, sep='')),'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red'))
dev.off()
}
install.packages('installr')
library(installr)
install.ImageMagick()
i
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
length(site.date.breaks)
paste('0',i, sep='')
if(length(site.date.breaks) < 100) {
paste('0',i, sep='')
}
if(length(site.date.breaks) >= 100) {
ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
}
if (length(site.date.breaks) >= 10) {
ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
}
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
paste('Movie/Scored/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep='')
site.date.temp
i <- 1
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red')
nrow(site.date.temp)
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
print(nrow(site.date.temp))
# png(paste('Movie/Scored/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
# print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red'))
# dev.off()
}
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed)
)
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed)
ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+3*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed')
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# print(nrow(site.date.temp))
png(paste('Movie/Scored/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+5*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed'))
dev.off()
}
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# print(nrow(site.date.temp))
png(paste('Movie/Scored/',site.to.gif,'/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+5*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed'))
dev.off()
}
paste('Movie/Scored/',site.to.gif,'/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep='')
site.to.gif <- '13'
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# print(nrow(site.date.temp))
png(paste('Movie/Scored/',site.to.gif,'/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date') + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+5*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed'))
dev.off()
}
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# print(nrow(site.date.temp))
png(paste('Movie/Scored/',site.to.gif,'/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date')) # + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+5*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed'))
dev.off()
}
movie.sites <- as.character(unique(scored.df$CustomerSiteId))
movie.sites
h
movie.sites
for(h in 2:length(movie.sites)) {
site.to.gif <- movie.sites[h]
site.date.breaks <- unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])[seq(30, length(unique(scored.df[scored.df$CustomerSiteId==site.to.gif,'TestStartDate'])), 30)]
for(i in 1:length(site.date.breaks)) {
if(length(site.date.breaks) >= 100) {
i.extension <- ifelse(i < 10, paste('00',i, sep=''), ifelse(i < 100, paste('0',i, sep=''), paste(i, sep='')))
} else if (length(site.date.breaks) >= 10) {
i.extension <- ifelse(i < 10, paste('0',i, sep=''), paste(i, sep=''))
} else {
i.extension <- paste(i, sep='')
}
site.date.temp <- subset(scored.df, CustomerSiteId==site.to.gif & TestStartDate <= site.date.breaks[i])
# print(nrow(site.date.temp))
png(paste('Movie/Scored/',site.to.gif,'/','CustomerSite',site.to.gif,'_',i.extension,'.png', sep=''))
print(ggplot(site.date.temp, aes(x=TestStartDate, y=test.horizon*TestNoise/TrainNoise, color=TestVarWithTrainPCA)) + geom_point() + labs(title=paste('Customer Site', site.to.gif, 'at date <=', site.date.breaks[i], sep=' '), y='Score', x='Date')) # + geom_line(aes(x=TestStartDate, y=mean(10*TestNoise/TrainNoise)+5*sd(10*TestNoise/TrainNoise)), data=site.date.temp, color='red', lty='dashed'))
dev.off()
}
# create a gif by using command prompt, cd into the dir with the pngs then run magick convert *.png -delay x -loop y name.gif
}
head(seq.anoms)
head(cp.assay.norm)
library(RODBC)
library(lubridate)
library(ggplot2)
library(mgcv)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
library(rgl)
library(AnomalyDetection)
head(cp.assay.norm)
ggplot(cp.assay.norm, aes(x=Date, y=MedianCp)) + geom_point()
head(seq.anoms)
head(cp.assay.norm)
ggplot(cp.assay.norm, aes(x=Date, y=YeastCp)) + geom_point()
ggplot(cp.assay.norm, aes(x=Date, y=MedianCp/YeastCp)) + geom_point()
ggplot(cp.assay.norm, aes(x=Date, y=Cp/MedianCp/YeastCp)) + geom_point()
head(qc.lot.cps)
