merge(rhino.features.neat.2, remove.data, by=c('Date','CustomerSiteId'), all.x=TRUE)
rhino.features.neat.2 <- merge(rhino.features.neat.2, remove.data, by=c('Date','CustomerSiteId'), all.x=TRUE)
rhino.features.neat.2[is.na(rhino.features.neat.2$Run.y), ]
head(rhino.features.neat.2)
head(rhino.features.neat.2[is.na(rhino.features.neat.2$Run.y), colnames(rhino.features.neat.2)!='Run.y'])
rhino.features.neat.2 <- rhino.features.neat.2[is.na(rhino.features.neat.2$Run.y), colnames(rhino.features.neat.2)!='Run.y']
head(rhino.featuers.neat.2)
head(rhino.features.neat.2)
year(rhino.features.neat.2$Date)
head(rhino.features.neat.2)
ggplot(rhino.features.neat.2[year(rhino.features.neat.2$Date)==2013, ], aes(x=Date, y=SequenceRate, fill=as.factor(SequenceIndex))) + geom_bar(stat='identity')
ggplot(rhino.features.neat.2[year(rhino.features.neat.2$Date)==2014, ], aes(x=Date, y=SequenceRate, fill=as.factor(SequenceIndex))) + geom_bar(stat='identity')
rhino.sequence.index[grep('^HRV4', rhino.sequence.index$Sequence),'SequenceIndex']
rhino.sequence.index[grep('^HRV4', rhino.sequence.index$Sequence),]
rhino.sequence.index[grep('HRV4, HRV1', rhino.sequence.index$Sequence),]
ggplot(rhino.features.neat.2[year(rhino.features.neat.2$Date)==2013 & rhino.features.neat.2$SequenceIndex %in% c(3,9,18,73), ], aes(x=Date, y=SequenceRate, fill=as.factor(SequenceIndex))) + geom_bar(stat='identity')
ggplot(rhino.features.neat.2[year(rhino.features.neat.2$Date)==2014 & rhino.features.neat.2$SequenceIndex %in% c(3,9,18,73), ], aes(x=Date, y=SequenceRate, fill=as.factor(SequenceIndex))) + geom_bar(stat='identity')
ggplot(rhino.features.neat.2, aes(x=Date, y=Run)) + geom_bar(stat='identity')
ggplot(rhino.features.neat.2, aes(x=Date, y=Run.x)) + geom_bar(stat='identity')
ggplot(rhino.features.neat.2, aes(x=Date, y=PositiveRate)) + geom_bar(stat='identity')
ggplot(with(rhino.features.neat.2, aggregate(PositiveRate~Date, FUN=mean)), aes(x=Date, y=PositiveRate)) + geom_bar(stat='identity')
ggplot(with(rhino.features.neat.2, aggregate(RhinoRate~Date, FUN=mean)), aes(x=Date, y=RhinoRate)) + geom_bar(stat='identity')
head(rhino.features.neat.2)
lm(SequenceIndex~Cp1+Cp2+Cp3+Cp4+Cp5+Cp6, data=rhino.features.neat.2)
cp.fit.sequence <- lm(SequenceIndex~Cp1+Cp2+Cp3+Cp4+Cp5+Cp6, data=rhino.features.neat.2)
summary(cp.fit.sequence)
cp.fit.sequence <- lm(SequenceIndex~Cp1+Cp2+Cp3+Cp4+Cp5+Cp6, data=rhino.features.neat.2[year(rhino.features.neat.2$Date)<2016, ])
predict(cp.fit.sequence, newdata = rhino.features.neat.2[year(rhino.features.neat.2$Date)>=2016, ])
predicted.sequence <- predict(cp.fit.sequence, newdata = rhino.features.neat.2[year(rhino.features.neat.2$Date)>=2016, ])
a <- cbind(rhino.features.neat.2[year(rhino.features.neat.2$Date)<2016, ], predicted.sequence)
a <- cbind(rhino.features.neat.2[year(rhino.features.neat.2$Date)>=2016, ], predicted.sequence)
head(a)
range(a$predicted.sequence)
range(a$SequenceIndex)
123/6
cp.fit.sequence <- lm(SequenceIndex~Assay1+Assay2+Assay3+Assay4+Assay5+Assay6, data=rhino.features.neat.2[year(rhino.features.neat.2$Date)<2016, ])
predicted.sequence <- predict(cp.fit.sequence, newdata = rhino.features.neat.2[year(rhino.features.neat.2$Date)>=2016, ])
a <- cbind(rhino.features.neat.2[year(rhino.features.neat.2$Date)>=2016, ], predicted.sequence)
head(a)
range(a$predicted.sequence)
summary(cp.fit.sequence)
rm(cp.fit.sequence, a)
rm(predicted.sequence)
poisson.test(100)
poisson.test(3)
head(cp.rhino.median)
head(rhino.features)
head(cp.rhino.sequence)
head(cp.rhino.median)
head(cp.rhino.ordered)
head(rhino.assays)
write.csv(cp.rhino.ordered, file='rhinoMedianCp.csv', row.names = FALSE, col.names = TRUE)
head(rhino.features)
rhino.features.neat.3 <- rhino.features[,c('Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
head(rhino.features.neat.3)
library(RODBC)
library(lubridate)
library(ggplot2)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
install.packages('C50', dependencies = TRUE)
library(C50)
head(rhino.features.neat.3)
head(iris)
length(iris$Sepal.Length)
trainIndex <- createDataPartition(rhino.features.neat.3, p=0.3, list=FALSE, times=1)
trainIndex <- createDataPartition(rhino.features.neat.3$Cp1, p=0.3, list=FALSE, times=1)
set.seed(3456)
trainIndex <- createDataPartition(rhino.features.neat.3$Cp1, p=0.3, list=FALSE, times=1)
head(trainIndex)
rhino.train <- rhino.features.neat.3[trainIndex, ]
rhino.test <- rhino.features.neat.3[-trainIndex, ]
head(rhino.train)
kmeans(rhino.train, 12)
kmeans.rhino.3 <- kmeans(rhino.train, 12)
predict(kmeans.rhino.3, rhino.test)
predict(kmeans.rhino.3, newdata = rhino.test)
predict(kmeans.rhino.3, newdata = rhino.test, method='kmeans')
summary(kmeans.rhino.3)
kmeans.rhino.3$cluster
a <- cbind(rhino.features.neat.3, kmeans.rhino.3$cluster)
a <- cbind(rhino.train, kmeans.rhino.3$cluster)
head(a)
a <- cbind(rhino.train, Cluster = kmeans.rhino.3$cluster)
head(a)
head(rhino.reatures.neat.2)
head(rhino.features.neat.2)
head(rhino.features.neat)
head(cp.rhino.ordered)
head(rhino.features)
head(cp.rhino.sequence)
head(cp.rhino.sequence)
head(rhino.featurse)
head(rhino.features)
grep('^HRV4, HRV1, HRV2, HRV3', cp.rhino.sequence$Sequence)
grep('^HRV4', cp.rhino.sequence$Sequence)
cp.rhino.sequence[grep('^HRV4', cp.rhino.sequence$Sequence), ]
unique(cp.rhino.sequence[grep('^HRV4', cp.rhino.sequence$Sequence), 'SequenceIndex'])
unique(cp.rhino.sequence[grep('^HRV4', cp.rhino.sequence$Sequence), c('Sequence','SequenceIndex')])
unique(cp.rhino.sequence[grep('^HRV4.', cp.rhino.sequence$Sequence), c('Sequence','SequenceIndex')])
unique(cp.rhino.sequence[grep('^HRV4$', cp.rhino.sequence$Sequence), c('Sequence','SequenceIndex')])
unique(cp.rhino.sequence[grep('^HRV4$|^HRV4, HRV1, HRV2, HRV3, HRV4$|^HRV4, HRV1, HRV2$|^HRV4, HRV1$', cp.rhino.sequence$Sequence), c('Sequence','SequenceIndex')])
unique(cp.rhino.sequence[grep('^HRV4$|^HRV4, HRV1, HRV2, HRV3$|^HRV4, HRV1, HRV2$|^HRV4, HRV1$', cp.rhino.sequence$Sequence), c('Sequence','SequenceIndex')])
evd68.ids <- unique(cp.rhino.sequence[grep('^HRV4$|^HRV4, HRV1, HRV2, HRV3$|^HRV4, HRV1, HRV2$|^HRV4, HRV1$', cp.rhino.sequence$Sequence), 'SequenceIndex'])
head(rhino.features)
rhino.features[rhino.features$SequenceIndex %in% evd68.ids, ]
head(rhino.features[rhino.features$SequenceIndex %in% evd68.ids, ])
b <- rhino.features[rhino.features$SequenceIndex %in% evd68.ids, ]
head(b)
with(data.frame(b, SequencePositives = 1), aggregate(cbind(Run, SequencePositives)~Date, FUN=sum))
head(with(data.frame(b, SequencePositives = 1), aggregate(cbind(Run, SequencePositives)~Date, FUN=sum)))
d <- with(data.frame(b, SequencePositives = 1), aggregate(cbind(Run, SequencePositives)~Date, FUN=sum))
d$Rate <- with(d, SequencePositives/Run)
ggplot(d, aes(x=Date, y=Rate)) + geom_bar(stat='identity')
ggplot(subset(d, year(Date) > 2013), aes(x=Date, y=Rate)) + geom_bar(stat='identity')
head(rhino.features.neat)
rhino.features.neat[,c('Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
a <- rhino.features.neat[,c('Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
write.csv(a, 'rhinoMedianCpPivoted.csv')
head(rhino.features.neat.2)
head(rhino.features.neat.2[,c(1:3,6,8,10,12,14,16)])
head(rhino.features.neat.2[,c(1:3,6,8,10,12,14,16, 17, 18, 19, 20)])
data.frame(rhino.features.neat.2[,c(1:3,6,8,10,12,14,16, 17, 18, 19, 20)], SequencePositives = 1)
csv.data.export <- data.frame(rhino.features.neat.2[,c(1:3,6,8,10,12,14,16, 17, 18, 19, 20)], SequencePositives = 1)
head(csv.data.export)
grep('Run.x', colnames(csv.data.export))
colnames(csv.data.export)[grep('Run.x', colnames(csv.data.export))]
colnames(csv.data.export)[grep('Run.x', colnames(csv.data.export))] <- 'Runs'
write.csv(csv.data.export, 'rhinoMedianCpFeatures.csv')
head(d)
head(a)
rhino.features.neat.3 <- rhino.features[,c('Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
set.seed(3456)
trainIndex <- createDataPartition(rhino.features.neat.3$Cp1, p=0.3, list=FALSE, times=1)
rhino.train <- rhino.features.neat.3[trainIndex, ]
rhino.test <- rhino.features.neat.3[-trainIndex, ]
kmeans.rhino.3 <- kmeans(rhino.train, 12)
a <- cbind(rhino.train, Cluster = kmeans.rhino.3$cluster)
evd68.ids <- unique(cp.rhino.sequence[grep('^HRV4$|^HRV4, HRV1, HRV2, HRV3$|^HRV4, HRV1, HRV2$|^HRV4, HRV1$', cp.rhino.sequence$Sequence), 'SequenceIndex'])
b <- rhino.features[rhino.features$SequenceIndex %in% evd68.ids, ]
d <- with(data.frame(b, SequencePositives = 1), aggregate(cbind(Run, SequencePositives)~Date, FUN=sum))
d$Rate <- with(d, SequencePositives/Run)
library(RODBC)
library(lubridate)
library(ggplot2)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
rhino.features.neat.3 <- rhino.features[,c('Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
set.seed(3456)
trainIndex <- createDataPartition(rhino.features.neat.3$Cp1, p=0.3, list=FALSE, times=1)
rhino.train <- rhino.features.neat.3[trainIndex, ]
rhino.test <- rhino.features.neat.3[-trainIndex, ]
kmeans.rhino.3 <- kmeans(rhino.train, 12)
a <- cbind(rhino.train, Cluster = kmeans.rhino.3$cluster)
evd68.ids <- unique(cp.rhino.sequence[grep('^HRV4$|^HRV4, HRV1, HRV2, HRV3$|^HRV4, HRV1, HRV2$|^HRV4, HRV1$', cp.rhino.sequence$Sequence), 'SequenceIndex'])
b <- rhino.features[rhino.features$SequenceIndex %in% evd68.ids, ]
d <- with(data.frame(b, SequencePositives = 1), aggregate(cbind(Run, SequencePositives)~Date, FUN=sum))
d$Rate <- with(d, SequencePositives/Run)
head(a)
head(rhino.train)
trainIndex
length(trainIndex)
head(a)
head(rhino.features)
rhino.features[trainIndex, ]
head(rhino.features[trainIndex, ])
head(rhino.features[trainIndex, 'Date'])
rhino.features[trainIndex, 'Date']
a <- cbind(a, Date = rhino.features[trainIndex, 'Date'])
head(a)
with(data.frame(a, Record = 1), aggregate(Record~Date+Cluster, FUN=sum))
cluster.count.by.date <- with(data.frame(a, Record = 1), aggregate(Record~Date+Cluster, FUN=sum))
head(a)
head(cluster.count.by.date)
obs.count.by.date <- with(data.frame(a, Total = 1), aggregate(Total~Date, FUN=sum))
merge(obs.count.by.date, cluster.count.by.date, by=c('Date'))
f <- merge(obs.count.by.date, cluster.count.by.date, by=c('Date'))
head(f)
ggplot(f, aes(x=Date, y=Record/Total, color=Cluster)) + geom_point()
ggplot(subset(f, Cluster = 3), aes(x=Date, y=Record/Total, color=Cluster)) + geom_point()
ggplot(subset(f, Cluster = 3), aes(x=Date, y=Record/Total, color=as.factor(Cluster))) + geom_point()
ggplot(subset(f, Cluster == 3), aes(x=Date, y=Record/Total, color=as.factor(Cluster))) + geom_point()
ggplot(subset(f, Cluster == 1), aes(x=Date, y=Record/Total, color=as.factor(Cluster))) + geom_point()
ggplot(f, aes(x=Date, y=Record/Total)) + geom_point() + facet_wrap(~Cluster)
ggplot(f, aes(x=Date, y=Record/Total, group=Cluster)) + geom_line() + facet_wrap(~Cluster)
ggplot(subset(f, year(Date) > 2013), aes(x=Date, y=Record/Total, group=Cluster)) + geom_line() + facet_wrap(~Cluster)
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
head(cp.rhino.median)
head(cp.rhino.ordered)
View(cp.rhino.ordered)
head(rhino.features)
rhino.ml.features <- rhino.features[,c('Date','CustomerSiteId','Cp1','Cp2','Cp3','Cp4','Cp5','Cp6')]
ggplot(rhino.features, aes(x=Date, y=aggregate(Run~Date, FUN=mean))) + geom_bar(stat='identity')
ggplot(rhino.features, aes(x=Date, y=aggregate(Run~Date, FUN=mean)$Run)) + geom_bar(stat='identity')
ggplot(rhino.features, aes(x=Date, y=Run)) + geom_bar(stat='identity')
ggplot(rhino.features, aes(x=Date, y=RhinoPositives)) + geom_bar(stat='identity')
head(cp.rhino)
cp.df.HRV <- cp.rhino
HRV.spread <- aggregate(Cp~RunDataId+AssayName, data = cp.df.HRV, FUN = median)
head(HRV.spread)
HRV.spread <- spread(HRV.spread, AssayName, Cp)
install.packages(c('tidyr','dplyr'), dependencies = TRUE)
library(tidyr)
library(dplyr)
HRV.spread <- spread(HRV.spread, AssayName, Cp)
head(HRV.spread)
HRV.spread[,c(2:7)][is.na(HRV.spread[,c(2:7)])] <- 32
modelData <- HRV.spread
mydata <- modelData[,-1]
head(modelData)
head(mydata)
mydata <- modelData[,-1]
apply(mydata,2,var)
sum(apply(mydata,2,var))
(nrow(mydata)-1)
(nrow(mydata)-1)*sum(apply(mydata,2,var))
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
set.seed(8)
kModel <- kmeans(modelData[,-1],12 ,nstart = 10, iter.max = 100)
clusterData <- cbind(modelData, kModel$cluster)
names(clusterData)[length(clusterData)] <- "Cluster"
comboData <- inner_join(cp.df.HRV[,c("RunDataId","Date")], clusterData, by = "RunDataId")
names(comboData)[length(names(comboData))] <- "Cluster"
comboData <- comboData[!duplicated(interaction(comboData$RunDataId, comboData$Cluster)),]
head(cp.df.HRV)
head(clusterData)
comboData$Month <-  as.POSIXlt(as.Date(comboData$Date, "%Y-%m-%d"))
comboData$Month <- strftime(comboData$Month, format = "%Y-%W")
spreadTable <-  as.data.frame(table(comboData$Month, comboData$Cluster))
spreadTable
head(spreadTable)
head(comboData)
names(spreadTable) <- c("Date", "Cluster", "Freq")
spreadTable <- spread(spreadTable,Cluster, Freq)
head(spreadTable)
for(i in 1:nrow(spreadTable)){
sumRow = sum(spreadTable[i,c(2:length(spreadTable))])
spreadTable[i,c(2:length(spreadTable))] <- spreadTable[i,c(2:length(spreadTable))] / sumRow
}
gathered <- gather(spreadTable, Cluster, Freq, 2:length(spreadTable))
gathered$Date <- unlist(lapply(gathered$Date, as.character))
ggplot(gathered,aes(x = Date, y = Freq, colour = Cluster , group = Cluster)) + geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Rate of Clusters", x = "Date (Year-Week Number)", y = "Rate")
g <- ggplot(gathered,aes(x = Date, y = Freq, colour = Cluster , group = Cluster)) + geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Rate of Clusters", x = "Date (Year-Week Number)", y = "Rate")
plotly::plotly_build(g)
head(rhino.ml.features)
ggplot(rhino.features, aes(x=Date, y=Run, fill=as.factor(CustomerSiteId))) + geom_bar(stat='identity')
dev.off()
ggplot(rhino.features, aes(x=Date, y=Run, fill=as.factor(CustomerSiteId))) + geom_bar(stat='identity')
setwd('~/FilmArrayTrend/EnteroD68/')
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
# create an Epi date calendar that will be used by all the data sets
startYear <- 2013
calendar.df <- createCalendarLikeMicrosoft(startYear, 'Week')
calendar.df <- transformToEpiWeeks(calendar.df)
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
# set up some constants
imgDir <- 'Figures/'
dateBreaks <- unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])[order(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek']))][seq(1, length(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])), 8)]
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/SQL/EnteroD68/sitesRunningRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
sites.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/rpRunsBySite.sql',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
cp.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/SQL/EnteroD68/rhinoDataBySite.sql', what=character(), quote="")
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse=" ")
cp.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
cp.df <- rbind(cp.df, cp.site.df)
}
setwd('~/FilmArrayTrend/EnteroD68/')
# load the neccessary libraries
library(RODBC)
library(lubridate)
library(ggplot2)
library(devtools)
require(dateManip)
library(cluster)
library(caret)
library(dbscan)
library(C50)
library(tidyr)
library(dplyr)
# create an Epi date calendar that will be used by all the data sets
startYear <- 2013
calendar.df <- createCalendarLikeMicrosoft(startYear, 'Week')
calendar.df <- transformToEpiWeeks(calendar.df)
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
# set up some constants
imgDir <- 'Figures/'
dateBreaks <- unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])[order(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek']))][seq(1, length(unique(calendar.df[calendar.df$Year >= startYear, 'YearWeek'])), 8)]
# set some query variables, like the customer site... also, get the number of RP runs by site
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/SQL/EnteroD68/sitesRunningRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
sites.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/SQL/EnteroD68/rpRunsBySite.sql',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
# start a loop to gather Cp data for all sites running RP
cp.df <- c()
choose.sites <- as.character(sites.df[,'CustomerSiteId'])
for(j in 1:length(choose.sites)) {
FADWcxn <- odbcConnect('FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/SQL/EnteroD68/rhinoDataBySite.sql', what=character(), quote="")
query <- paste(gsub('SITE_INDEX', choose.sites[j], queryVector), collapse=" ")
cp.site.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
cp.df <- rbind(cp.df, cp.site.df)
}
rm(cp.site.df)
head(cp.df)
cp.median <- aggregate(Cp~RunDataId+CustomerSiteId+Date+AssayName, FUN=median, data=cp.df)
head(cp.median)
set.seed(10)
messy <- data.frame(
id = 1:4,
trt = sample(rep(c('control', 'treatment'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
head(messy)
head(cp.median)
head(cp.median[with(cp.median, order(RunDataId)), ])
write.csv(cp.median, file='medianCp_Raw.csv', row.names=FALSE)
messy
gather(key, time, -id, -trt)
messy %>% gather(key, time, -id, -trt)
messy %>% gather(key, time, -id, -trt)
head(cp.median)
spread(data = cp.median, key = AssayName, value = Cp, -RunDataId, -CustomerSiteId, -Date)
spread(data = cp.median, key = AssayName, value = Cp)
a <- spread(data = cp.median, key = AssayName, value = Cp)
head(cp.median)
head(a)
a[a$RunDataId==5, ]
filter(cp.median, RunDataId==5)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
rm(a)
head(cp.spread)
cp.spread[is.na(cp.spread[,c(3:8)]), ]
head(cp.spread)
head(cp.spread[,c(3:8)])
cp.spread[,c(3:8)][is.na(cp.spread[,c(3:8)])]
sparse.handler <- 40
cp.spread[,c(3:8)][is.na(cp.spread[,c(3:8)])] <- sparse.handler
head(cp.spread)
head(calendar.df)
a <- merge(cp.spread, calendar.df[,c('Date','YearWeek')], by='Date')
rm(a)
a <- merge(cp.spread, calendar.df[calendar.df$YearWeek >= '2013-26',c('Date','YearWeek')], by='Date')
head(a)
min(a$Date)
cp.clean <- merge(cp.spread, calendar.df[calendar.df$YearWeek >= '2013-26',c('Date','YearWeek')], by='Date')
rm(a)
head(cp.clean)
filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26')
head(filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26'))
cp.clean <- merge(cp.spread, filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26'), by='Date')
head(cp.clean)
cp.spread <- spread(data = cp.median, key = AssayName, value = Cp)
sparse.handler <- 40
head(cp.spread)
cp.spread[,c(4:9)][is.na(cp.spread[,c(4:9)])] <- sparse.handler
cp.clean <- merge(cp.spread, filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26'), by='Date')
head(cp.spread)
head(cp.clean)
hist(cp.clean$HRV1)
hist(cp.clean$HRV2)
hist(cp.clean$HRV3)
hist(cp.clean$HRV4)
hist(cp.clean$Entero1)
hist(cp.clean$Entero2)
nearZeroVar(cp.clean[,c(4:9)])
nzv <- nearZeroVar(cp.clean[,c(4:9)], saveMetrics = TRUE)
head(nzv)
filter(nzv, nzv = TRUE)
filter(nzv, nzv == TRUE)
names(filter(nzv, nzv == TRUE))
row.names(nzv)
row.names(nzv[nzv$nzv==TRUE,])
remove.vars <- row.names(nzv[nzv$nzv==TRUE,])
cp.clean[,!(colnames(cp.clean) %in% remove.vars)]
head(cp.clean[,!(colnames(cp.clean) %in% remove.vars)])
cp.clean <- cp.clean[,!(colnames(cp.clean) %in% remove.vars)]
head(cp.clean)
cor(cp.clean[,c(4:7)])
findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.75)
findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)
cor(cp.clean[,c(4:7)])[,-findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)]
cor(cp.clean[,c(4:7)])[,-findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)]
keep.vars <- cor(cp.clean[,c(4:7)])[,-findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)]
cp.clean <- cp.clean[,colnames(cp.clean) %in% c('RunDataId','Date','YearWeek','CusomterSiteId',keep.vars)]
head(cp.clean)
keep.vars
cp.clean <- merge(cp.spread, filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26'), by='Date')
nzv <- nearZeroVar(cp.clean[,c(4:9)], saveMetrics = TRUE)
remove.vars <- row.names(nzv[nzv$nzv==TRUE,])
cp.clean <- cp.clean[,!(colnames(cp.clean) %in% remove.vars)]
keep.vars
as.character(keep.vars)
keep.vars[1:4, ]
as.character(keep.vars[1:4, ])
as.character(keep.vars[, 1:4])
row.names(keep.vars)
keep.vars <- cor(cp.clean[,c(4:7)])[,-findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)]
cp.clean <- cp.clean[,colnames(cp.clean) %in% c('RunDataId','Date','YearWeek','CusomterSiteId',row.names(keep.vars))]
head(cp.clean)
rhino.features <- cp.clean[,row.names(keep.vars)]
head(rhino.features)
feature.base <- cp.clean[,c('RunDataId','Date','YearWeek','CusomterSiteId')]
head(cp.clean)
cp.clean <- merge(cp.spread, filter(calendar.df[,c('Date','YearWeek')], YearWeek >= '2013-26'), by='Date')
# create some clusters using kNN from the caret package, utilizing 60% of the data for training and the rest for testing
#   first, check to see if any of the features have near-zero variance (i.e. variables with very few unique values, which can skew results when data are split for train/test)
nzv <- nearZeroVar(cp.clean[,c(4:9)], saveMetrics = TRUE)
remove.vars <- row.names(nzv[nzv$nzv==TRUE,])
cp.clean <- cp.clean[,!(colnames(cp.clean) %in% remove.vars)]
#   second, check to see if any of the variables have very strong correlation (cut off of 0.8)
keep.vars <- cor(cp.clean[,c(4:7)])[,-findCorrelation(cor(cp.clean[,c(4:7)]), cutoff=0.8)]
cp.clean <- cp.clean[,colnames(cp.clean) %in% c('RunDataId','Date','YearWeek','CustomerSiteId',row.names(keep.vars))]
feature.base <- cp.clean[,c('RunDataId','Date','YearWeek','CusomterSiteId')]
rhino.features <- cp.clean[,row.names(keep.vars)]
feature.base <- cp.clean[,c('RunDataId','Date','YearWeek','CustomerSiteId')]
head(cp.clean)
head(feature.base)
head(rhino.features)
trainIndex <- createDataPartition(cp.clean$RunDataId, p=0.6, list=FALSE, times=1)
cp.train <- cp.clean[trainIndex, ]
cp.test <- cp.clean[-trainIndex, ]
head(cp.clean)
head(cp.train)
feature.base[trainIndex, ]
features.train <- rhino.features[trainIndex, ]
head(cp.train)
head(base.t)
head(base.train)
base.train <- feature.base[trainIndex, ]
features.train <- rhino.features[trainIndex, ]
head(base.train)
head(features.train)
rm(feature.base)
rm(rhino.features)
set.seed(3456)
trainIndex <- createDataPartition(cp.clean$RunDataId, p=0.6, list=FALSE, times=1)
cp.train <- cp.clean[trainIndex, ]
cp.test <- cp.clean[-trainIndex, ]
base.train <- cp.clean[trainIndex, c('RunDataId','Date','YearWeek','CustomerSiteId')]
features.train <- cp.clean[-trainIndex, row.names(keep.vars)]
a <- preProcess(features.train, method = c('center','scale'))
head(a)
rm(a)
mdrr
preProcValues <- preProcess(features.train, method = 'pca')
features.train.trans <- predict(preProcValues, features.train)
set.seed(3456)
trainIndex <- createDataPartition(cp.clean$RunDataId, p=0.6, list=FALSE, times=1)
cp.train <- cp.clean[trainIndex, ]
cp.test <- cp.clean[-trainIndex, ]
base.train <- cp.clean[trainIndex, c('RunDataId','Date','YearWeek','CustomerSiteId')]
features.train <- cp.clean[trainIndex, row.names(keep.vars)]
base.test <- cp.clean[-trainIndex, c('RunDataId','Date','YearWeek','CustomerSiteId')]
features.test <- cp.clean[-trainIndex, row.names(keep.vars)]
preProcValues <- preProcess(features.train, method = 'pca')
features.train.trans <- predict(preProcValues, features.train)
features.test.trans <- predict(preProcValues, features.test)
head(features.train.trans)
head(features.test.trans)
