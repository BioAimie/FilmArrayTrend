#   overlay.negatives <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
#
#   # Draw it
#   grid.newpage()
#   png('Figures/NegativePercentDetectionWithOverlayTrend.png', height=800, width=1400)
#   grid.draw(overlay.negatives)
#   dev.off()
# }
}
if(TRUE) {
# create a dual detection chart that will show all organisms broken out in order of highest -> lowest precent detection over all the data
# with an overlay of the percent dual detection of that organism
run.positive.count <- with(data.frame(merge(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year')], bugs.df, by='RunDataId'), Record=1), aggregate(Record~RunDataId, FUN=sum))
dual.detection.runs <- data.frame(bugs.df[bugs.df$RunDataId %in% run.positive.count[run.positive.count$Record>1, 'RunDataId'], ], Record = 1)
dual.detection.runs <- merge(dual.detection.runs, runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId')], by='RunDataId')
total.runs <- with(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId','Record')], sum(Record))
dual.detection.agg <- with(dual.detection.runs, aggregate(Record~BugPositive, FUN=sum))
dual.detection.agg$PercentOfDuals <- with(dual.detection.agg, Record/total.runs)
dual.detection.agg <- merge(dual.detection.agg, shortnames.df, by.x='BugPositive', by.y='Organism')
prev.pareto.all.duals <- merge(prev.pareto.all.nat.ind, dual.detection.agg, by='ShortName', all.x=TRUE)
prev.pareto.all.duals[is.na(prev.pareto.all.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.duals$ShortName <- factor(prev.pareto.all.duals$ShortName, levels=prev.pareto.all.duals[with(prev.pareto.all.duals, order(Prevalence, decreasing = TRUE)),'ShortName'])
length(unique(run.positive.count[run.positive.count$Record > 1, 'RunDataId']))/total.runs
# make a nifty dual-axis chart
p1 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Co-Detection of Organisms in Trend Population', y='Percent Detection', x='')
p2 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=5*PercentOfDuals, color='Percent of Dual Detections')) + geom_point(size=4) + scale_color_manual(values='black', guide=FALSE) + scale_y_continuous(limits=c(0,5*max(prev.pareto.all.duals$PercentOfDuals)), breaks=c(0, 0.05, 0.1, 0.15,0.2,0.25), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank()) + labs(y='Co-Detection Occurrence Rate')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
paretoDuals <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/PercentDetectionParetoWithDualDetections.png', height=800, width=1400)
grid.draw(paretoDuals)
dev.off()
}
paretoCoDets <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/PercentDetectionParetoWithCoDetections.png', height=800, width=1400)
grid.draw(paretoCoDet)
dev.off()
grid.newpage()
png('Figures/PercentDetectionParetoWithCoDetections.png', height=800, width=1400)
grid.draw(paretoCoDets)
dev.off()
prev.predict <- with(prev.pareto.all, aggregate(Prevalence~YearWeek+Code, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- letters[1:(length(colnames(prev.predict))-1)]
prev.predict <- merge(prev.predict, ili.burn.nat, by='YearWeek')
prev.predict <- prev.predict[!(is.na(prev.predict$Rate)), ]
library(rpart)
library(party)
rpart(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
fit.vars <- c('a','b','c','d','e','f','g','h','i','o','p','q','r','s','t','u','v')
rpart(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
ili.model.cart <- rpart(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
head(prev.predict)
ili.model.cart <- rpart(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
burn.model.cart <- rpart(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
printcp(ili.model.cart)
printcp(burn.model.cart)
burn.model.cart <- rpart(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova', control=rpart.control(minsplit=30, cp=0.001))
printcp(burn.model.cart) # actual used in tree = i, o, s, u (HRV/Entero, Flu B, PIV 3, RSV)
burn.model.cart <- rpart(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), data=prev.predict, method='anova')
printcp(burn.model.cart) # actual used in tree = i, o, s, u (HRV/Entero, Flu B, PIV 3, RSV)
plotcp(ili.model.cart)
plotcp(burn.model.cart)
rsq.rpart(ili.model.cart)
rsq.rpart(burn.model.cart)
rsq.rpart(ili.model.cart)
rsq.rpart(burn.model.cart)
burn.model.cart
printcp(burn.model.cart)
print(ili.model.cart)
summary(ili.model.cart)
plot(ili.model.cart)
test(ili.model.cart)
text(ili.model.cart)
plot(ili.model.cart, uniform=TRUE, main='Classification Tree for ILI')
text(ili.model.cart, use.n=TRUE, all=TRUE, cex=1)
library(party)
ili.cart.party <- as.party(ili.model.cart)
install.packages('partykit', dependencies = TRUE)
library(partykit)
ili.cart.party <- as.party(ili.model.cart)
plot(ili.cart.party)
burn.cart.party <- as.party(burn.model.cart)
plot(burn.cart.party)
set.seed(4042)
ili.model.rf <- randomForest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
ili.model.rf.df <- data.frame(importance(ili.model.rf))
ili.model.rf.df$Code <- rownames(ili.model.rf.df)
ili.model.rf.df <- merge(ili.model.rf.df, decoder.agg, by='Code')
ili.model.rf[with(ili.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
ili.model.rf <- randomForest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
data.frame(importance(ili.model.rf))
ili.model.rf.df <- data.frame(importance(ili.model.rf))
rownames(ili.model.rf.df)
ili.model.rf.df$Code <- rownames(ili.model.rf.df)
merge(ili.model.rf.df, decoder.agg, by='Code')
ili.model.rf.df <- merge(ili.model.rf.df, decoder.agg, by='Code')
ili.model.rf.df[with(ili.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
set.seed(4042)
burn.model.rf <- randomForest(NormalizedBurn~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
burn.model.rf.df <- data.frame(importance(burn.model.rf))
burn.model.rf.df$Code <- rownames(burn.model.rf.df)
burn.model.rf.df <- merge(burn.model.rf.df, decoder.agg, by='Code')
burn.model.rf.df[with(burn.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
# REGRESSION MODELING -------------------------------------------------------------------------------------------------------
fit.ili.all <- lm(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
fit.burn.all <- lm(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
# read in 8-combo model possibilities
combos.eight <- read.csv('../DataSources/compactCombos8.csv', header=TRUE, sep=',')
combos.nine <- read.csv('../DataSources/compactCombos9.csv', header=TRUE, sep=',')
combos.ten <- read.csv('../DataSources/compactCombos10.csv', header=TRUE, sep=',')
ili.model.eval.eight <- do.call(rbind, lapply(1:length(combos.eight[,'Combo']), function(x) data.frame(Model = combos.eight[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.eight[ili.model.eval.eight$anova.all == max(ili.model.eval.eight$anova.all), ]
# p-value: 1.94e-3 | B. Pertussis, CoV 229E, HRV/Entero, Flu B, PIV 1, PIV 4, RSV, Flu A (all)
ili.model.eval.nine <- do.call(rbind, lapply(1:length(combos.nine[,'Combo']), function(x) data.frame(Model = combos.nine[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.nine[ili.model.eval.nine$anova.all == max(ili.model.eval.nine$anova.all), ]
# p-value: 1.19e-2 | B. pertussis, HRV/Entero, Flu B, PIV 1, PIV 2, PIV 3, PIV 4, RSV, Flu A (all)
ili.model.eval.ten <- do.call(rbind, lapply(1:length(combos.ten[,'Combo']), function(x) data.frame(Model = combos.ten[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), ]
# p-value: 7.09e-1 | B. pertussis, CoV 229E, HRV/Entero, Flu B, PIV 1, PIV 2, PIV 3, PIV 4, RSV, Flu A (all)...
# B. pertussing & CoV 229E have negative coeffs,
# t value of RSV and Flu A are highest (testing whether the corresponding regression coefficient is different from 0 e.g. the liklihood that the variable is not unimportant in fitting the dependant variable)
# Std. Error is lowest for HRV/Entero, RSV, PIV 3, Flu A (the standard deviation of the sampling distribution of the coefficient estimate under standard regression assumptions... or measure of how close the coefficient is to its "real" value)
# # Model Burn with prevalence of diseases in FilmArray test population
# burn.model.eval.six <- do.call(rbind, lapply(1:length(combos.six[,'Combo']), function(x) data.frame(Model = combos.six[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
# burn.model.eval.six[burn.model.eval.six$anova.all == max(burn.model.eval.six$anova.all), ]
# # p-value: 1.26e-3 | Flu A (all), RSV, HRV/Entero, hMPV, C. pneumoniae, PIV 1
# burn.model.eval.seven <- do.call(rbind, lapply(1:length(combos.seven[,'Combo']), function(x) data.frame(Model = combos.seven[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
# burn.model.eval.seven[burn.model.eval.seven$anova.all == max(burn.model.eval.seven$anova.all), ] # u, v, i, c, q, o, a (RSV, FluA HRV/Entero, C. pneumoniae, PIV 1, FluB, Adeno)
# # p-value: 2.48e-3 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, Adeno, C. pneumoniae
burn.model.eval.eight <- do.call(rbind, lapply(1:length(combos.eight[,'Combo']), function(x) data.frame(Model = combos.eight[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.eight[burn.model.eval.eight$anova.all == max(burn.model.eval.eight$anova.all), ] # v, u, i, o, e, f, c, q (Flu A, RSV, HRV/Entero, Flu B, Corona HKU1, CoV NL63, C. pneumoniae, PIV 1)
# p-value: 1.08e-2 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, CoV HKU1, CoV NL63, C. pneumoniae
burn.model.eval.nine <- do.call(rbind, lapply(1:length(combos.nine[,'Combo']), function(x) data.frame(Model = combos.nine[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:910] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.nine[burn.model.eval.nine$anova.all == max(burn.model.eval.nine$anova.all), ] # v, u, i, o, c, e, f, q, t  (Flu A, RSV, HRV/Entero, Flu B, C. pneumoniae, Corona HKU1, Corona NL63, PIV 1, PIV 4)
# p-value: 2.82e-2 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, CoV HKU1, CoV NL63, hMPV, C. pneumoniae
burn.model.eval.ten <- do.call(rbind, lapply(1:length(combos.ten[,'Combo']), function(x) data.frame(Model = combos.ten[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.ten[burn.model.eval.ten$anova.all == max(burn.model.eval.ten$anova.all), ] # v, u, i, o, e, f, q, c, a, s (Flu A, RSV, HRV/Entero, Flu B, Corona HKU1, Corona NL63, PIV 1, C. pneumoniae, Adeno, PIV 3)
ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), ]
ili.model.eval.nine[ili.model.eval.nine$anova.all == max(ili.model.eval.nine$anova.all), ]
ili.model.eval.eight[ili.model.eval.eight$anova.all == max(ili.model.eval.eight$anova.all), ]
ili.model.eval.nine[ili.model.eval.nine$anova.all == max(ili.model.eval.nine$anova.all), ]
decoder
summary(lm(Rate~e+i+t+d+o+q+v+b+u, data=prev.predict))
length(prev.predict$Rate)
summary(lm(Rate~e+i+t+d+o+q+v+b+u, data=prev.predict))
burn.model.eval.ten[burn.model.eval.ten$anova.all == max(burn.model.eval.ten$anova.all), ] # v, u, i, o, e, f, q, c, a, s (Flu A, RSV, HRV/Entero, Flu B, Corona HKU1, Corona NL63, PIV 1, C. pneumoniae, Adeno, PIV 3)
set.seed(4042)
ili.model.rf <- randomForest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
ili.model.rf.df <- data.frame(importance(ili.model.rf))
ili.model.rf.df$Code <- rownames(ili.model.rf.df)
ili.model.rf.df <- merge(ili.model.rf.df, decoder.agg, by='Code')
ili.model.rf.df[with(ili.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
printcp(ili.model.cart) # actual used in tree construction = g, i, u, v (Corona OC43, HRV/Entero, RSV, and Flu A)
ili.model.cart$cptable[which.min(ili.model.cart$cptable[,'xerror']),'CP']
ili.model.cart$cptable
prune(ili.model.cart, ili.model.cart$cptable[which.min(ili.model.cart$cptable[,'xerror']),'CP'])
ili.prune.cart <- prune(ili.model.cart, ili.model.cart$cptable[which.min(ili.model.cart$cptable[,'xerror']),'CP'])
burn.prune.cart <- prune(burn.model.cart, burn.model.cart$cptable[which.min(burn.model.cart$cptable[,'xerror']),'CP'])
ili.prune.party <- as.party(ili.prune.cart)
burn.prune.party as.party(burn.prune.cart)
burn.prune.party <- as.party(burn.prune.cart)
plot(ili.cart.party)
plot(ili.prune.party)
plot(burn.cart.party)
plot(burn.prune.party)
head(prev.predict)
fit.vars
decoder[decoder$Code %in% fit.vars, 'Bug']
as.character(decoder[decoder$Code %in% fit.vars, 'Bug'])
decoder
decoder.agg
as.character(decoder.agg[decoder.agg$Code %in% fit.vars, 'Bug'])
replace.codes <- as.character(decoder.agg[decoder.agg$Code %in% fit.vars, 'Bug'])
colnames(prev.predict)
colnames(prev.predict)[2:26]
fit.vars
colnames(prev.predict)
head(prev.predict[, colnames(prev.predict %in% c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn'))])
head(prev.predict[colnames(prev.predict %in% c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')), ])
c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')
prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')]
head(prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')])
prev.predict.trim <- prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')]
colnames(prev.predict.trim) <- c('YearWeek', replace.codes, 'Rate', 'NormalizedBurn')
prev.predict.trim
head(prev.predict.trim)
head(replace.codes)
head(decoder.agg)
head(short.names)
head(shortnames.df)
merge(decoder.agg, shortnames.df, by.x='Byg', by.y='Organism', all.x=TRUE)
merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.abv <- merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.abv[is.na(decoder.abv$ShortName), ]
decoder.abv[is.na(decoder.abv$ShortName), 'ShortName'] <- decoder.abv[is.na(decoder.abv$ShortName), 'Bug']
decoder.abv
class(decoder.abv$ShortName)
class(decoder.abv$Bug)
decoder.abv <- merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.avb$Bug <- as.character(decoder.avb$Bug)
decoder.avb$ShortName <- as.character(decoder.avb$ShortName)
decoder.abv$Bug <- as.character(decoder.abv$Bug)
decoder.abv$ShortName <- as.character(decoder.abv$ShortName)
decoder.abv[is.na(decoder.abv$ShortName), 'ShortName'] <- decoder.abv[is.na(decoder.abv$ShortName), 'Bug']
decoder.abv
decoder.abv <- merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.abv$Bug <- as.character(decoder.abv$Bug)
decoder.abv$ShortName <- as.character(decoder.abv$ShortName)
decoder.abv[is.na(decoder.abv$ShortName), 'ShortName'] <- c('FluA','CoV','PIV','Bacteria')
decoder.abv
decoder.abv
replace.codes <- as.character(decoder.abv[decoder.abv$Code %in% fit.vars, 'ShortName'])
replace.codes
prev.predict.trim <- prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')]
colnames(prev.predict.trim) <- c('YearWeek', replace.codes, 'Rate', 'NormalizedBurn')
head(prev.predict.trim)
ili.model.cart.named <- rpart(as.formula(paste('Rate', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
burn.model.cart.named <- rpart(as.formula(paste('NormalizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
decoder.abc
decoder.abv
grep(' ', decoder.abv$ShortName)
gsub(' ', '', decoder.abv$ShortName)
decoder.abv <- merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.abv$Bug <- as.character(decoder.abv$Bug)
decoder.abv$ShortName <- as.character(decoder.abv$ShortName)
gsub(' ', '', decoder.abv$ShortName)
decoder.abv$ShortName <- gsub(' ', '', decoder.abv$ShortName)
decoder.abv[is.na(decoder.abv$ShortName), 'ShortName'] <- c('FluA','CoV','PIV','Bacteria')
decoder.abv
replace.codes <- as.character(decoder.abv[decoder.abv$Code %in% fit.vars, 'ShortName'])
prev.predict.trim <- prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')]
colnames(prev.predict.trim) <- c('YearWeek', replace.codes, 'Rate', 'NormalizedBurn')
ili.model.cart.named <- rpart(as.formula(paste('Rate', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
burn.model.cart.named <- rpart(as.formula(paste('NormalizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
replace.codes
head(prev.predict.trim)
lm(Rate~HRV/Entero, data=prev.predict.trim)
lm(Rate~HRVEntero, data=prev.predict.trim)
lm(Rate~B.pertussis, data=prev.predict.trim)
gsub(' ', '', decoder.abv$ShortName)
gsub('/', '_', gsub(' ', '', decoder.abv$ShortName))
decoder.abv <- merge(decoder.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
decoder.abv$Bug <- as.character(decoder.abv$Bug)
decoder.abv$ShortName <- as.character(decoder.abv$ShortName)
decoder.abv$ShortName <- gsub('/', '_', gsub(' ', '', decoder.abv$ShortName))
decoder.abv[is.na(decoder.abv$ShortName), 'ShortName'] <- c('FluA','CoV','PIV','Bacteria')
replace.codes <- as.character(decoder.abv[decoder.abv$Code %in% fit.vars, 'ShortName'])
prev.predict.trim <- prev.predict[,c('YearWeek', fit.vars, 'Rate', 'NormalizedBurn')]
colnames(prev.predict.trim) <- c('YearWeek', replace.codes, 'Rate', 'NormalizedBurn')
ili.model.cart.named <- rpart(as.formula(paste('Rate', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
burn.model.cart.named <- rpart(as.formula(paste('NormalizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim, method='anova')
ili.cart.party.named <- as.party(ili.model.cart.named)
burn.cart.party.named <- as.party(burn.model.cart.named)
plot(ili.cart.party.named)
plot(burn.cart.party.named)
predict(ili.model.cart, prev.predict)
predict(ili.model.cart, prev.predict)
summary(ili.model.cart)
predict(ili.model.cart, prev.predict$Rate)
predict(ili.model.cart, prev.predict)
ili.rate.cart <- predict(ili.model.cart, prev.predict)
ili.rate.cart <- predict(ili.model.cart, prev.predict)
burn.rate.cart <- predict(burn.model.cart, prev.predict)
corr(ili.rate.cart, prev.predict$Rate)
cor(ili.rate.cart, prev.predict$Rate)
cor(burn.rate.cart, prev.predict$NormalizedBurn)
hist(prev.predict$Rate)
hist(ili.rate.cart)
hist(ili.rate.cart, binwidth=0.01)
hist(ili.rate.cart, breaks = seq(0, 0.05, 0.01))
hist(prev.predict$Rate, print = FALSE)
hist(prev.predict$Rate, plot = FALSE)
hist(prev.predict$Rate, plot = FALSE)$breaks
hist(prev.predict$Rate)
hist(ili.rate.cart, breaks = hist(prev.predict$Rate, plot = FALSE)$breaks)
mean(prev.predict$Rate)
mean(ili.rate.cart)
ili.rate.cart
chisq.test(prev.predict$Rate, ili.rate.cart)
head(prev.predict)
data.frame(prev.predict, iliCART = ili.rate.cart)
prev.modeled <- data.frame(prev.predict, iliCART = ili.rate.cart)
head(prev.modeled)
ggplot(prev.modeled, aes(x=YearWeek, y=Rate, group='Reported ILI', color='Reported ILI')) + geom_line() + geom_line(aes(x=YearWeek, y=iliCART, group='Predicted ILI (CART)', color='Predicted ILI (CART)'), data=prev.modeled)
plot(x=prev.modeled$Rate, y=prev.modeled$iliCART)
set.seed(4042)
ili.model.rf <- randomForest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
ili.model.rf.df <- data.frame(importance(ili.model.rf))
ili.model.rf.df$Code <- rownames(ili.model.rf.df)
ili.model.rf.df <- merge(ili.model.rf.df, decoder.agg, by='Code')
ili.model.rf.df[with(ili.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
set.seed(4042)
burn.model.rf <- randomForest(NormalizedBurn~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
burn.model.rf.df <- data.frame(importance(burn.model.rf))
burn.model.rf.df$Code <- rownames(burn.model.rf.df)
burn.model.rf.df <- merge(burn.model.rf.df, decoder.agg, by='Code')
burn.model.rf.df[with(burn.model.rf.df, order(X.IncMSE, decreasing = TRUE)), ]
ili.model.rf.df[with(ili.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
burn.model.rf.df[with(burn.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
ili.model.rf.df[with(ili.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
burn.model.rf.df[with(burn.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
predict(ili.model.rf, prev.predict)
ili.rate.rf <- predict(ili.model.rf, prev.predict)
burn.rate.rf <- predict(burn.model.rf, prev.predict)
prev.modeled <- data.frame(prev.modeled, burnCART = burn.rate.cart)
prev.modeled <- data.frame(prev.modeled, iliRF = ili.rate.rf)
prev.modeled <- data.frame(prev.modeled, burnRF = burn.rate.rf)
head(prev.modeled)
cor(prev.modeled$Rate, ili.rate.rf)
cor(prev.modeled$NormalizedBurn, burn.rate.rf)
as.party(ili.rate.rf)
cforest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, control=cforest_control(mtry=3))
head(prev.predict)
set.seed(4042)
cforest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, control=cforest_control(mtry=3))
cforest(as.formula('Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v'), data=prev.predict, control=cforest_control(mtry=3))
cforest(as.formula('Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v'), data=prev.predict)
ili.model.cforest <- cforest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, control=cforest_control(mtry=3))
ili.model.cforest <- cforest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict)
burn.model.cforest <- cforest(NormalizedBurn~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict)
plot(ili.model.cforest)
ili.model.cforest <- ctree(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict)
plot(ili.model.cforest)
head(prev.predict.trim)
burn.model.cforest <- ctree(as.formula(paste('NormlaizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim)
burn.model.cforest <- ctree(as.formula(paste('NormalizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim)
plot(ili.model.cforest)
plot(burn.model.cforest)
ili.model.cforest <- ctree(as.formula(paste('Rate', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim)
burn.model.cforest <- ctree(as.formula(paste('NormalizedBurn', paste(replace.codes, collapse='+'), sep='~')), data=prev.predict.trim)
plot(ili.model.cforest)
plot(burn.model.cforest)
predict(ili.model.cforest, prev.predict.trim)
cor(prev.predict.trim$Rate, predict(ili.model.cforest, prev.predict.trim))
cor(prev.modeled$Rate, ili.rate.rf)
cor(prev.predict.trim$NormalizedBurn, predict(burn.model.cforest, prev.predict.trim))
start.yearweek <- '2013-26'
# use data from all time and show a pareto of prevalence (collapsing fluA, coronas, pivs, and bacterias)
positives.count.seasonal.trim <- merge(positives.count.all[as.character(positives.count.all$YearWeek) >= start.yearweek, ], unique(runs.reg.date[,c('YearWeek','Year','Week')]), by='YearWeek', all.x=TRUE)
positives.count.seasonal.trim$SeasonWeek <- with(positives.count.seasonal.trim, ifelse(Week <= 26, Week + 26, Week - 26))
positives.count.seasonal.trim$SeasonYear <- with(positives.count.seasonal.trim, ifelse(Week <= 26, paste(Year-1,Year,sep='-'), paste(Year,Year+1, sep='-')))
positives.count.seasonal.trim <- positives.count.seasonal.trim[positives.count.seasonal.trim$SeasonYear >= '2013-2014', ]
positives.count.seasonal.trim$YearWeek <- with(positives.count.seasonal.trim, ifelse(SeasonWeek < 10, paste(substring(SeasonYear, 6, 10), SeasonWeek, sep='-0'), paste(substring(SeasonYear, 6, 10), SeasonWeek, sep='-')))
# need to sum up flu As, CoVs, PIVs, and Bacterias by customer site Id... then join these onto the positives.count.trim data frame
positives.count.seasonal.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.agg <- rbind(positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','Code','Positives','SeasonYear','Runs')], positives.count.seasonal.fluas, positives.count.seasonal.covs, positives.count.seasonal.pivs, positives.count.seasonal.bacteria)
positives.count.seasonal.agg <- merge(positives.count.seasonal.agg, decoder.agg, by='Code')
positives.count.seasonal.agg <- merge(positives.count.seasonal.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
positives.count.seasonal.agg$ShortName <- as.character(positives.count.seasonal.agg$ShortName)
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='v', 'ShortName'] <- 'Flu A (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='w', 'ShortName'] <- 'CoV (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='x', 'ShortName'] <- 'PIV (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
# Make various paretos...
prev.pareto.seasonal.all <- positives.count.seasonal.agg
prev.pareto.seasonal.all$Prevalence <- with(prev.pareto.seasonal.all, Positives/Runs)
# start with all data from the 8 sites starting in 2014-present showing all organisms and then grouping by family.
prev.pareto.seasonal.all.nat <- with(prev.pareto.seasonal.all, aggregate(Prevalence~ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.nat.ind <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.fam <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
label.order.seasonal.all <- prev.pareto.seasonal.all.nat[with(prev.pareto.seasonal.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.seasonal.all
label.order.seasonal.all
label.order.seasonal.all <- label.order.seasonal.all[c(1,2,3,7,14,17,18,4,5,11,16,19,20,6,10,12,21,24,25,8,9,15,22,23,13)]
prev.pareto.seasonal.all.nat$Name <- factor(prev.pareto.seasonal.all.nat$ShortName, levels = label.order.seasonal.all)
label.order.season.ind <- prev.pareto.seasonal.all.nat.ind[with(prev.pareto.seasonal.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.ind$Name <- factor(prev.pareto.seasonal.all.nat.ind$ShortName, levels = label.order.season.ind)
label.order.seasonal.fam <- prev.pareto.seasonal.all.nat.fam[with(prev.pareto.seasonal.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.fam$Name <- factor(prev.pareto.seasonal.all.nat.fam$ShortName, levels = label.order.seasonal.fam)
ggplot(prev.pareto.seasonal.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
head(prev.pareto.seasonal.all.nat)
prev.pareto.seasonal.all.pop <- prev.pareto.seasonal.all
prev.pareto.seasonal.all.pop$Key <- with(prev.pareto.seasonal.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
prev.pareto.seasonal.all.nat.pop <- with(prev.pareto.seasonal.all.pop, aggregate(Prevalence~ShortName+Code+Key, FUN=mean))
prev.pareto.seasonal.all.nat.pop$Name <- factor(prev.pareto.seasonal.all.nat.pop$ShortName, levels=label.order.seasonal.all)
prev.pareto.seasonal.all.nat.pop.ind <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.pop.fam <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.seasonal.all.nat.pop.ind$Name <- factor(prev.pareto.seasonal.all.nat.pop.ind$ShortName, levels=label.order.season.ind)
prev.pareto.seasonal.all.nat.pop.fam$Name <- factor(prev.pareto.seasonal.all.nat.pop.fam$ShortName, levels=label.order.seasonal.fam)
p.PercentDetectionParetoByPopulationSeasonal <- ggplot(prev.pareto.seasonal.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by  Clinical Lab Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulationSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by  Clinical Lab Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulationSeasonal_Family <- ggplot(prev.pareto.seasonal.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by  Clinical Lab Population Type', x='', y='Percent Detection')
# subset by year (2014, 2015, 2016)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all, aggregate(Prevalence~SeasonYear+ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.year$Name <- factor(prev.pareto.seasonal.all.year$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.year.ind <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.year.fam <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.seasonal.all.year.ind$Name <- factor(prev.pareto.seasonal.all.year.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.year.fam$Name <- factor(prev.pareto.seasonal.all.year.fam$ShortName, levels = label.order.seasonal.fam)
p.PercentDetectionParetoAnnualSeasonal <- ggplot(prev.pareto.seasonal.all.year, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.year.ind, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Family <- ggplot(prev.pareto.seasonal.all.year.fam, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
ggplot(prev.pareto.seasonal.all.year, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
head(prev.pareto.seasonal.all.year)
ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal <- ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Individual <- ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Family <- ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
prev.table.seasonal.all <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(ShortName = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'ShortName'], Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence'])))
prev.table.seasonal.all.pop <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence'])))
# do the work for the dual detection chart
run.positive.seasonal.count <- with(data.frame(merge(runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year')], bugs.df, by='RunDataId'), Record=1), aggregate(Record~RunDataId, FUN=sum))
dual.detection.seasonal.runs <- data.frame(bugs.df[bugs.df$RunDataId %in% run.positive.seasonal.count[run.positive.seasonal.count$Record>1, 'RunDataId'], ], Record = 1)
dual.detection.seasonal.runs <- merge(dual.detection.seasonal.runs, runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId')], by='RunDataId')
total.seasonal.runs <- with(runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId','Record')], sum(Record))
dual.detection.seasonal.agg <- with(dual.detection.seasonal.runs, aggregate(Record~BugPositive, FUN=sum))
dual.detection.seasonal.agg$PercentOfDuals <- with(dual.detection.seasonal.agg, Record/total.seasonal.runs)
dual.detection.seasonal.agg <- merge(dual.detection.seasonal.agg, shortnames.df, by.x='BugPositive', by.y='Organism')
prev.pareto.all.seasonal.duals <- merge(prev.pareto.seasonal.all.nat.ind, dual.detection.seasonal.agg, by='ShortName', all.x=TRUE)
prev.pareto.all.seasonal.duals[is.na(prev.pareto.all.seasonal.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.seasonal.duals$ShortName <- factor(prev.pareto.all.seasonal.duals$ShortName, levels=prev.pareto.all.seasonal.duals[with(prev.pareto.all.seasonal.duals, order(Prevalence, decreasing = TRUE)),'ShortName'])
length(unique(run.positive.seasonal.count[run.positive.seasonal.count$Record > 1, 'RunDataId']))/total.seasonal.runs
p1 <- ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Co-Detection of Organisms in Trend Population', y='Percent Detection', x='')
p2 <- ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=5*PercentOfDuals, color='Percent of Dual Detections')) + geom_point(size=4) + scale_color_manual(values='black', guide=FALSE) + scale_y_continuous(limits=c(0,5*max(prev.pareto.all.seasonal.duals$PercentOfDuals)), breaks=c(0, 0.05, 0.1, 0.15,0.2,0.25), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank()) + labs(y='Co-Detection Occurrence Rate')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
paretoSeasonalDuals <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(paretoSeasonalDuals)
grid.newpage()
png('Figures/PercentDetectionParetoSeasonalWithDualDetections.png', height=800, width=1400)
grid.draw(paretoSeasonalDuals)
dev.off()
setwd('Figures/')
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
print(imgName)
png(file=imgName, width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
