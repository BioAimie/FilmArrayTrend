# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.rsv <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/RSVPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.rsv)
dev.off()
}
# - PIVs--------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% pivs), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Parainfluenza in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% pivs), aes(x=YearWeek, y=3*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.pivs <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/PIVsPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.pivs)
dev.off()
}
# - CoVs--------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% corona), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Coronavirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% corona), aes(x=YearWeek, y=3*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.covs <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/CoVsPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.covs)
dev.off()
}
# - Rhino-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Rhino/Enterovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino), aes(x=YearWeek, y=12*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=12*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,12*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.12, 0.24, 0.36, 0.48, 0.6), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.rhino <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/RhinoPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.rhino)
dev.off()
}
# - Adeno-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% adeno), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Adenovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% adeno), aes(x=YearWeek, y=3*Rate, group=1))+ geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.adeno <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/AdenoPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.adeno)
dev.off()
}
# - HMPV_-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% hmp), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Metapneumovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% hmp), aes(x=YearWeek, y=3*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.hmp <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/HMPvPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.hmp)
dev.off()
}
# - Bacteria-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% bacterias), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.025, 0.05, 0.075, 0.1, 0.125)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Bacteria in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% bacterias), aes(x=YearWeek, y=2.5*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=2.5*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,2.5*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.025, 0.05, 0.075, 0.1, 0.125), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.bacteria <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/BacteriaPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.bacteria)
dev.off()
}
# # - Negative-------------------------------------------------------------------------------------------------------
# # negatives.nat <- data.frame(Bug='Negatives', YearWeek = with(prevalence.nat.individual.wrap, aggregate(Prevalence~YearWeek, FUN=sum))$YearWeek, Prevalence = 1-with(prevalence.nat.individual.wrap, aggregate(Prevalence~YearWeek, FUN=sum))$Prevalence, Rate=with(prevalence.nat.individual.wrap, aggregate(Rate~YearWeek, FUN=mean))$Rate, ShortName='Negative')
# if(FALSE) {
#
#   p1 <- ggplot(negatives.nat, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values='grey', name='') + scale_x_discrete(breaks = as.character(unique(negatives.nat$YearWeek))[order(as.character(unique(negatives.nat$YearWeek)))][seq(1, length(as.character(unique(negatives.nat$YearWeek))), 8)]) + scale_y_continuous(label=percent, breaks=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Metapneumovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
#   p2 <- ggplot(negatives.nat, aes(x=YearWeek, y=10*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=10*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = as.character(unique(negatives.nat$YearWeek))[order(as.character(unique(negatives.nat$YearWeek)))][seq(1, length(as.character(unique(negatives.nat$YearWeek))), 8)]) + scale_y_continuous(limits=c(0,10*max(negatives.nat$Rate)), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
#
#   # Get the ggplot grobs
#   g1 <- ggplotGrob(p1)
#   g2 <- ggplotGrob(p2)
#
#   # Get the location of the plot panel in g1.
#   # These are used later when transformed elements of g2 are put back into g1
#   pp <- c(subset(g1$layout, name == "panel", se = t:r))
#
#   # Overlap panel for second plot on that of the first plot
#   g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
#
#   # Get the y axis title from g2
#   index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
#   ylab <- g2$grobs[[index]]                # Extract that grob
#   ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
#
#   # Put the transformed label on the right side of g1
#   g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
#   g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
#
#   # Get the y axis from g2 (axis line, tick marks, and tick mark labels)
#   index <- which(g2$layout$name == "axis-l")  # Which grob
#   yaxis <- g2$grobs[[index]]                  # Extract the grob
#
#   # yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
#   # The relevant grobs are contained in axis$children:
#   #   axis$children[[1]] contains the axis line;
#   #   axis$children[[2]] contains the tick marks and tick mark labels.
#
#   # First, move the axis line to the left
#   yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
#
#   # Second, swap tick marks and tick mark labels
#   ticks <- yaxis$children[[2]]
#   ticks$widths <- rev(ticks$widths)
#   ticks$grobs <- rev(ticks$grobs)
#
#   # Third, move the tick marks
#   ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
#
#   # Fourth, swap margins and fix justifications for the tick mark labels
#   ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
#
#   # Fifth, put ticks back into yaxis
#   yaxis$children[[2]] <- ticks
#
#   # Put the transformed yaxis on the right side of g1
#   g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
#   overlay.negatives <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
#
#   # Draw it
#   grid.newpage()
#   png('InitialPublication/Figures/NegativePercentDetectionWithOverlayTrend.png', height=800, width=1400)
#   grid.draw(overlay.negatives)
#   dev.off()
# }
}
# CO-DETECTIONS
if(TRUE) {
# create a dual detection chart that will show all organisms broken out in order of highest -> lowest precent detection over all the data
# with an overlay of the percent dual detection of that organism
run.positive.count <- with(data.frame(merge(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year')], bugs.df, by='RunDataId'), Record=1), aggregate(Record~RunDataId, FUN=sum))
dual.detection.runs <- data.frame(bugs.df[bugs.df$RunDataId %in% run.positive.count[run.positive.count$Record>1, 'RunDataId'], ], Record = 1)
dual.detection.runs <- merge(dual.detection.runs, runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId')], by='RunDataId')
total.runs <- with(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId','Record')], sum(Record))
dual.detection.agg <- with(dual.detection.runs, aggregate(Record~BugPositive, FUN=sum))
dual.detection.agg$PercentOfDuals <- with(dual.detection.agg, Record/total.runs)
dual.detection.agg <- merge(dual.detection.agg, shortnames.df, by.x='BugPositive', by.y='Organism')
prev.pareto.all.duals <- merge(prev.pareto.all.nat.ind, dual.detection.agg, by='ShortName', all.x=TRUE)
prev.pareto.all.duals[is.na(prev.pareto.all.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.duals$ShortName <- factor(prev.pareto.all.duals$ShortName, levels=prev.pareto.all.duals[with(prev.pareto.all.duals, order(Prevalence, decreasing = TRUE)),'ShortName'])
length(unique(run.positive.count[run.positive.count$Record > 1, 'RunDataId']))/total.runs
# make a nifty dual-axis chart
p1 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Co-Detection of Organisms in Trend Population', y='Percent Detection', x='')
p2 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=5*PercentOfDuals, color='Percent of Dual Detections')) + geom_point(size=4) + scale_color_manual(values='black', guide=FALSE) + scale_y_continuous(limits=c(0,5*max(prev.pareto.all.duals$PercentOfDuals)), breaks=c(0, 0.05, 0.1, 0.15,0.2,0.25), labels=c('0%','1%','2%','3%','4%','5%')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank()) + labs(y='Co-Detection Occurrence Rate')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
paretoDuals <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('InitialPublication/Figures/PercentDetectionParetoWithDualDetections.png', height=800, width=1400)
grid.draw(paretoDuals)
dev.off()
}
# REGRESSION ANALYSIS - ILI AND BURN vs. PERCENT DETECTION OF ORGANISMS
if(TRUE) {
prev.predict <- with(prev.pareto.all, aggregate(Prevalence~YearWeek+Code, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- letters[1:(length(colnames(prev.predict))-1)]
prev.predict <- merge(prev.predict, ili.burn.nat, by='YearWeek')
prev.predict <- prev.predict[!(is.na(prev.predict$Rate)), ]
# # MACHINE LEARNING ALGORITHMS ----------------------------------------------------------------------------------------------
# # try with Random Forest... do not utilize resampling because we do not care about overfitting the data...
# set.seed(4042)
# tc <- trainControl(method='repeatedcv', number=2, repeats=1)
# ili.model.rf <- train(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, method='rf', trControl=tc, preProc=c('center','scale'))
# ili.predict.rf <- data.frame(prev.predict, Prediction = predict(ili.model.rf))
# print(ili.model.rf)
# ggplot(ili.predict.rf, aes(x=YearWeek, y=Rate, group='Actual ILI', color='Actual ILI')) + geom_line() + geom_point() + geom_line(aes(x=YearWeek, y=Prediction, group='Predicted ILI', color='Predicted ILI'), data=ili.predict.rf) + geom_point(aes(x=YearWeek, y=Prediction, group='Predicted ILI', color='Predicted ILI'), data=ili.predict.rf) + scale_color_manual(values=c('black','red'))
# # use randomForest package instead...
# # %IncMSE (if predictor is important in RF model, then assigining other values for that predictor randomly but 'realistically' should have a negative influence on prediction, i.e. using the same model to predict from data that is the same except for the given variable should give a worse prediction)
# # IncNodePurity (at each split, calculate how much the split reduces node impurity, or the difference between RSS- residual sum of squares or sum of squared errors) before and after the split... this is summed over all splits for that variable, over all trees)
# set.seed(4042)
# ili.model.rf.2 <- randomForest(Rate~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
# ili.model.rf.2.df <- data.frame(importance(ili.model.rf.2))
# ili.model.rf.2.df$Code <- rownames(ili.model.rf.2.df)
# ili.model.rf.2.df <- merge(ili.model.rf.2.df, decoder.agg, by='Code')
# ili.model.rf.2.df[with(ili.model.rf.2.df, order(X.IncMSE, decreasing = TRUE)), ]
# REGRESSION MODELING -------------------------------------------------------------------------------------------------------
fit.vars <- c('a','b','c','d','e','f','g','h','i','o','p','q','r','s','t','u','v')
fit.ili.all <- lm(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
fit.burn.all <- lm(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
# read in 8-combo model possibilities
combos.eight <- read.csv('DataSources/compactCombos8.csv', header=TRUE, sep=',')
combos.nine <- read.csv('DataSources/compactCombos9.csv', header=TRUE, sep=',')
combos.ten <- read.csv('DataSources/compactCombos10.csv', header=TRUE, sep=',')
# # Model ILI with prevalence of diseases in FilmArray test population (p-value = 5.00e-2 is established stop)
# ili.model.eval.six <- do.call(rbind, lapply(1:length(combos.six[,'Combo']), function(x) data.frame(Model = combos.six[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.six[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
# ili.model.eval.six[ili.model.eval.six$anova.all == max(ili.model.eval.six$anova.all), ]
# # p-value: 5.42e-5 | Flu A (all), RSV, HRV/Entero, Flu B, CoV OC43, PIV 1
# ili.model.eval.seven <- do.call(rbind, lapply(1:length(combos.seven[,'Combo']), function(x) data.frame(Model = combos.seven[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.seven[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
# ili.model.eval.seven[ili.model.eval.seven$anova.all == max(ili.model.eval.seven$anova.all), ]
# # p-value: 3.37e-4 | Flu A (all), RSV, HRV/Entero, Flu B, CoV OC43, PIV 1, B. pertussis
ili.model.eval.eight <- do.call(rbind, lapply(1:length(combos.eight[,'Combo']), function(x) data.frame(Model = combos.eight[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.eight[ili.model.eval.eight$anova.all == max(ili.model.eval.eight$anova.all), ]
# p-value: 1.94e-3 | B. Pertussis, CoV 229E, HRV/Entero, Flu B, PIV 1, PIV 4, RSV, Flu A (all)
ili.model.eval.nine <- do.call(rbind, lapply(1:length(combos.nine[,'Combo']), function(x) data.frame(Model = combos.nine[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.nine[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.nine[ili.model.eval.nine$anova.all == max(ili.model.eval.nine$anova.all), ]
# p-value: 1.19e-2 | B. pertussis, HRV/Entero, Flu B, PIV 1, PIV 2, PIV 3, PIV 4, RSV, Flu A (all)
ili.model.eval.ten <- do.call(rbind, lapply(1:length(combos.ten[,'Combo']), function(x) data.frame(Model = combos.ten[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), ]
# p-value: 7.09e-1 | B. pertussis, CoV 229E, HRV/Entero, Flu B, PIV 1, PIV 2, PIV 3, PIV 4, RSV, Flu A (all)...
# B. pertussing & CoV 229E have negative coeffs,
# t value of RSV and Flu A are highest (testing whether the corresponding regression coefficient is different from 0 e.g. the liklihood that the variable is not unimportant in fitting the dependant variable)
# Std. Error is lowest for HRV/Entero, RSV, PIV 3, Flu A (the standard deviation of the sampling distribution of the coefficient estimate under standard regression assumptions... or measure of how close the coefficient is to its "real" value)
# # Model Burn with prevalence of diseases in FilmArray test population
# burn.model.eval.six <- do.call(rbind, lapply(1:length(combos.six[,'Combo']), function(x) data.frame(Model = combos.six[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict))$coeff[2:7,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.six[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
# burn.model.eval.six[burn.model.eval.six$anova.all == max(burn.model.eval.six$anova.all), ]
# # p-value: 1.26e-3 | Flu A (all), RSV, HRV/Entero, hMPV, C. pneumoniae, PIV 1
# burn.model.eval.seven <- do.call(rbind, lapply(1:length(combos.seven[,'Combo']), function(x) data.frame(Model = combos.seven[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict))$coeff[2:8,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.seven[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
# burn.model.eval.seven[burn.model.eval.seven$anova.all == max(burn.model.eval.seven$anova.all), ] # u, v, i, c, q, o, a (RSV, FluA HRV/Entero, C. pneumoniae, PIV 1, FluB, Adeno)
# # p-value: 2.48e-3 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, Adeno, C. pneumoniae
burn.model.eval.eight <- do.call(rbind, lapply(1:length(combos.eight[,'Combo']), function(x) data.frame(Model = combos.eight[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.eight[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.eight[burn.model.eval.eight$anova.all == max(burn.model.eval.eight$anova.all), ] # v, u, i, o, e, f, c, q (Flu A, RSV, HRV/Entero, Flu B, Corona HKU1, CoV NL63, C. pneumoniae, PIV 1)
# p-value: 1.08e-2 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, CoV HKU1, CoV NL63, C. pneumoniae
burn.model.eval.nine <- do.call(rbind, lapply(1:length(combos.nine[,'Combo']), function(x) data.frame(Model = combos.nine[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:910] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict))$coeff[2:10,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.nine[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.nine[burn.model.eval.nine$anova.all == max(burn.model.eval.nine$anova.all), ] # v, u, i, o, c, e, f, q, t  (Flu A, RSV, HRV/Entero, Flu B, C. pneumoniae, Corona HKU1, Corona NL63, PIV 1, PIV 4)
# p-value: 2.82e-2 | Flu A (all), RSV, HRV/Entero, Flu B, PIV 1, CoV HKU1, CoV NL63, hMPV, C. pneumoniae
burn.model.eval.ten <- do.call(rbind, lapply(1:length(combos.ten[,'Combo']), function(x) data.frame(Model = combos.ten[x,'Combo'], adjR2 = summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict)), prev.predict$NormalizedBurn), alpha.0 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('NormalizedBurn', as.character(combos.ten[x,]), sep='~')), prev.predict), fit.burn.all)[,'Pr(>F)'][2])))
burn.model.eval.ten[burn.model.eval.ten$anova.all == max(burn.model.eval.ten$anova.all), ] # v, u, i, o, e, f, q, c, a, s (Flu A, RSV, HRV/Entero, Flu B, Corona HKU1, Corona NL63, PIV 1, C. pneumoniae, Adeno, PIV 3)
# p-value: 7.36e-2 | Flu A (all), RSV, HRV/Entero, B. pertussis, C. pneumoniae, Adeno, M. pneumoniae, PIV 2, CoV NL63, hMPV
# summary(lm(as.formula(paste('Rate', as.character(ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), 'Model']), sep='~')), data=prev.predict))
# summary(lm(as.formula(paste('NormalizedBurn', as.character(burn.model.eval.ten[burn.model.eval.ten$anova.all == max(burn.model.eval.ten$anova.all), 'Model']), sep='~')), data=prev.predict))
#
# a <- summary(lm(as.formula(paste('Rate', as.character(ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), 'Model']), sep='~')), data=prev.predict))$coeff
# a <- a[row.names(a) != '(Intercept)', ]
# a <- merge(data.frame(a, Code = row.names(a)), decoder.agg, by='Code')
# a <- a[order(a[,'Pr...t..']), ]
#
# b <- summary(lm(as.formula(paste('NormalizedBurn', as.character(burn.model.eval.ten[burn.model.eval.ten$anova.all == max(burn.model.eval.ten$anova.all), 'Model']), sep='~')), data=prev.predict))$coeff
# b <- b[row.names(b) != '(Intercept)', ]
# b <- merge(data.frame(b, Code = row.names(b)), decoder.agg, by='Code')
# b <- b[order(b[,'Pr...t..']), ]
#
# a <- a[,c('Bug','Estimate','Std..Error','t.value','Pr...t..')]
# b <- b[,c('Bug','Estimate','Std..Error','t.value','Pr...t..')]
}
combos.eight <- read.csv('../DataSources/compactCombos8.csv', header=TRUE, sep=',')
combos.nine <- read.csv('../DataSources/compactCombos9.csv', header=TRUE, sep=',')
combos.ten <- read.csv('../DataSources/compactCombos10.csv', header=TRUE, sep=',')
ili.model.eval.ten <- do.call(rbind, lapply(1:length(combos.ten[,'Combo']), function(x) data.frame(Model = combos.ten[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict))$coeff[2:11,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.ten[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.ten[ili.model.eval.ten$anova.all == max(ili.model.eval.ten$anova.all), ]
decoder
