# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.covs <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/CoVsPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.covs)
dev.off()
}
# - Rhino-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Rhino/Enterovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino), aes(x=YearWeek, y=12*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=12*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,12*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.12, 0.24, 0.36, 0.48, 0.6), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.rhino <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/RhinoPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.rhino)
dev.off()
}
# - Adeno-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% adeno), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Adenovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% adeno), aes(x=YearWeek, y=3*Rate, group=1))+ geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.adeno <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/AdenoPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.adeno)
dev.off()
}
# - HMPV_-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% hmp), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Metapneumovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% hmp), aes(x=YearWeek, y=3*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=3*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,3*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.03, 0.06, 0.09, 0.12, 0.15), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.hmp <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/HMPvPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.hmp)
dev.off()
}
# - Bacteria-------------------------------------------------------------------------------------------------------
if(TRUE) {
p1 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% bacterias), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(label=percent, breaks=c(0, 0.025, 0.05, 0.075, 0.1, 0.125)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Bacteria in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
p2 <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% bacterias), aes(x=YearWeek, y=2.5*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=2.5*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0,2.5*max(prevalence.nat.individual.wrap$Rate)), breaks=c(0, 0.025, 0.05, 0.075, 0.1, 0.125), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
overlay.bacteria <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/BacteriaPercentDetectionWithOverlayTrend.png', height=800, width=1400)
grid.draw(overlay.bacteria)
dev.off()
}
# # - Negative-------------------------------------------------------------------------------------------------------
# # negatives.nat <- data.frame(Bug='Negatives', YearWeek = with(prevalence.nat.individual.wrap, aggregate(Prevalence~YearWeek, FUN=sum))$YearWeek, Prevalence = 1-with(prevalence.nat.individual.wrap, aggregate(Prevalence~YearWeek, FUN=sum))$Prevalence, Rate=with(prevalence.nat.individual.wrap, aggregate(Rate~YearWeek, FUN=mean))$Rate, ShortName='Negative')
# if(FALSE) {
#
#   p1 <- ggplot(negatives.nat, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values='grey', name='') + scale_x_discrete(breaks = as.character(unique(negatives.nat$YearWeek))[order(as.character(unique(negatives.nat$YearWeek)))][seq(1, length(as.character(unique(negatives.nat$YearWeek))), 8)]) + scale_y_continuous(label=percent, breaks=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(title='Percent Detection of Human Metapneumovirus in Trend Population with ILI Overlay', y='Percent Detection of Organism', x='Date')
#   p2 <- ggplot(negatives.nat, aes(x=YearWeek, y=10*Rate, group=1)) + geom_line(color='black', lwd=2) + geom_line(aes(x=YearWeek, y=10*NormalizedBurn/100, group=2), subset(ili.burn.nat, as.character(ili.burn.nat$YearWeek) >='2014-01'), color='red', lwd=2) + scale_x_discrete(breaks = as.character(unique(negatives.nat$YearWeek))[order(as.character(unique(negatives.nat$YearWeek)))][seq(1, length(as.character(unique(negatives.nat$YearWeek))), 8)]) + scale_y_continuous(limits=c(0,10*max(negatives.nat$Rate)), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (black), FilmArray Test Utilization (red)')
#
#   # Get the ggplot grobs
#   g1 <- ggplotGrob(p1)
#   g2 <- ggplotGrob(p2)
#
#   # Get the location of the plot panel in g1.
#   # These are used later when transformed elements of g2 are put back into g1
#   pp <- c(subset(g1$layout, name == "panel", se = t:r))
#
#   # Overlap panel for second plot on that of the first plot
#   g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
#
#   # Get the y axis title from g2
#   index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
#   ylab <- g2$grobs[[index]]                # Extract that grob
#   ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
#
#   # Put the transformed label on the right side of g1
#   g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
#   g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
#
#   # Get the y axis from g2 (axis line, tick marks, and tick mark labels)
#   index <- which(g2$layout$name == "axis-l")  # Which grob
#   yaxis <- g2$grobs[[index]]                  # Extract the grob
#
#   # yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
#   # The relevant grobs are contained in axis$children:
#   #   axis$children[[1]] contains the axis line;
#   #   axis$children[[2]] contains the tick marks and tick mark labels.
#
#   # First, move the axis line to the left
#   yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
#
#   # Second, swap tick marks and tick mark labels
#   ticks <- yaxis$children[[2]]
#   ticks$widths <- rev(ticks$widths)
#   ticks$grobs <- rev(ticks$grobs)
#
#   # Third, move the tick marks
#   ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
#
#   # Fourth, swap margins and fix justifications for the tick mark labels
#   ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
#
#   # Fifth, put ticks back into yaxis
#   yaxis$children[[2]] <- ticks
#
#   # Put the transformed yaxis on the right side of g1
#   g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
#   overlay.negatives <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
#
#   # Draw it
#   grid.newpage()
#   png('Figures/NegativePercentDetectionWithOverlayTrend.png', height=800, width=1400)
#   grid.draw(overlay.negatives)
#   dev.off()
# }
}
# DUAL DETECTIONS
if(TRUE) {
# create a dual detection chart that will show all organisms broken out in order of highest -> lowest precent detection over all the data
# with an overlay of the percent dual detection of that organism
run.positive.count <- with(data.frame(merge(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year')], bugs.df, by='RunDataId'), Record=1), aggregate(Record~RunDataId, FUN=sum))
dual.detection.runs <- data.frame(bugs.df[bugs.df$RunDataId %in% run.positive.count[run.positive.count$Record>1, 'RunDataId'], ], Record = 1)
dual.detection.runs <- merge(dual.detection.runs, runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId')], by='RunDataId')
total.runs <- with(runs.reg.date[runs.reg.date$Year >= start.year & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId','Record')], sum(Record))
dual.detection.agg <- with(dual.detection.runs, aggregate(Record~BugPositive, FUN=sum))
dual.detection.agg$PercentOfDuals <- with(dual.detection.agg, Record/total.runs)
dual.detection.agg <- merge(dual.detection.agg, shortnames.df, by.x='BugPositive', by.y='Organism')
prev.pareto.all.duals <- merge(prev.pareto.all.nat.ind, dual.detection.agg, by='ShortName', all.x=TRUE)
prev.pareto.all.duals[is.na(prev.pareto.all.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.duals$ShortName <- factor(prev.pareto.all.duals$ShortName, levels=prev.pareto.all.duals[with(prev.pareto.all.duals, order(Prevalence, decreasing = TRUE)),'ShortName'])
length(unique(run.positive.count[run.positive.count$Record > 1, 'RunDataId']))/total.runs
# make a nifty dual-axis chart
p1 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Dual Detection of Organisms in Trend Population', y='Percent Detection', x='')
p2 <- ggplot(prev.pareto.all.duals, aes(x=Name, y=5*PercentOfDuals, color='Percent of Dual Detections')) + geom_point(size=4) + scale_color_manual(values='black', guide=FALSE) + scale_y_continuous(limits=c(0,5*max(prev.pareto.all.duals$PercentOfDuals)), breaks=c(0, 0.05, 0.1, 0.15,0.2,0.25), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank()) + labs(y='Dual Detection Occurrence Rate')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
paretoDuals <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
png('Figures/PercentDetectionParetoWithDualDetections.png', height=800, width=1400)
grid.draw(paretoDuals)
dev.off()
}
start.yearweek <- '2013-26'
# use data from all time and show a pareto of prevalence (collapsing fluA, coronas, pivs, and bacterias)
positives.count.seasonal.trim <- merge(positives.count.all[as.character(positives.count.all$YearWeek) >= start.yearweek, ], unique(runs.reg.date[,c('YearWeek','Year','Week')]), by='YearWeek', all.x=TRUE)
positives.count.seasonal.trim$SeasonWeek <- with(positives.count.seasonal.trim, ifelse(Week <= 26, Week + 26, Week - 26))
positives.count.seasonal.trim$SeasonYear <- with(positives.count.seasonal.trim, ifelse(Week <= 26, paste(Year-1,Year,sep='-'), paste(Year,Year+1, sep='-')))
positives.count.seasonal.trim <- positives.count.seasonal.trim[positives.count.seasonal.trim$SeasonYear >= '2013-2014', ]
positives.count.seasonal.trim$YearWeek <- with(positives.count.seasonal.trim, ifelse(SeasonWeek < 10, paste(substring(SeasonYear, 6, 10), SeasonWeek, sep='-0'), paste(substring(SeasonYear, 6, 10), SeasonWeek, sep='-')))
# need to sum up flu As, CoVs, PIVs, and Bacterias by customer site Id... then join these onto the positives.count.trim data frame
positives.count.seasonal.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.seasonal.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x] & positives.count.seasonal.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.seasonal.trim$YearWeek == unique(positives.count.seasonal.trim[positives.count.seasonal.trim$CustomerSiteId==unique(positives.count.seasonal.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','SeasonYear','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.seasonal.agg <- rbind(positives.count.seasonal.trim[,c('YearWeek','CustomerSiteId','Code','Positives','SeasonYear','Runs')], positives.count.seasonal.fluas, positives.count.seasonal.covs, positives.count.seasonal.pivs, positives.count.seasonal.bacteria)
positives.count.seasonal.agg <- merge(positives.count.seasonal.agg, decoder.agg, by='Code')
positives.count.seasonal.agg <- merge(positives.count.seasonal.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
positives.count.seasonal.agg$ShortName <- as.character(positives.count.seasonal.agg$ShortName)
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='v', 'ShortName'] <- 'Flu A (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='w', 'ShortName'] <- 'CoV (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='x', 'ShortName'] <- 'PIV (all)'
positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
# Make various paretos...
prev.pareto.seasonal.all <- positives.count.seasonal.agg
prev.pareto.seasonal.all$Prevalence <- with(prev.pareto.seasonal.all, Positives/Runs)
# start with all data from the 8 sites starting in 2014-present showing all organisms and then grouping by family.
prev.pareto.seasonal.all.nat <- with(prev.pareto.seasonal.all, aggregate(Prevalence~ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.nat.ind <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.fam <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
label.order.seasonal.all <- prev.pareto.seasonal.all.nat[with(prev.pareto.seasonal.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.seasonal.all <- label.order.seasonal.all[c(1,2,3,8,14,17,19,4,5,9,11,21,24,25,6,12,15,18,20,7,10,16,22,23,13)]
prev.pareto.seasonal.all.nat$Name <- factor(prev.pareto.seasonal.all.nat$ShortName, levels = label.order.seasonal.all)
label.order.season.ind <- prev.pareto.seasonal.all.nat.ind[with(prev.pareto.seasonal.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.ind$Name <- factor(prev.pareto.seasonal.all.nat.ind$ShortName, levels = label.order.season.ind)
label.order.seasonal.fam <- prev.pareto.seasonal.all.nat.fam[with(prev.pareto.seasonal.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.fam$Name <- factor(prev.pareto.seasonal.all.nat.fam$ShortName, levels = label.order.seasonal.fam)
p.PercentDetectionParetoSeasonal <- ggplot(prev.pareto.seasonal.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionParetoSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
p.PercentDetectionParetoSeasonal_Family <- ggplot(prev.pareto.seasonal.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims', x='', y='Percent Detection')
# subset the data into children's hospitals and mixed population hospitals
prev.pareto.seasonal.all.pop <- prev.pareto.seasonal.all
prev.pareto.seasonal.all.pop$Key <- with(prev.pareto.seasonal.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
prev.pareto.seasonal.all.nat.pop <- with(prev.pareto.seasonal.all.pop, aggregate(Prevalence~ShortName+Code+Key, FUN=mean))
prev.pareto.seasonal.all.nat.pop$Name <- factor(prev.pareto.seasonal.all.nat.pop$ShortName, levels=label.order.seasonal.all)
prev.pareto.seasonal.all.nat.pop.ind <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.pop.fam <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.seasonal.all.nat.pop.ind$Name <- factor(prev.pareto.seasonal.all.nat.pop.ind$ShortName, levels=label.order.season.ind)
prev.pareto.seasonal.all.nat.pop.fam$Name <- factor(prev.pareto.seasonal.all.nat.pop.fam$ShortName, levels=label.order.seasonal.fam)
p.PercentDetectionParetoByPopulationSeasonal <- ggplot(prev.pareto.seasonal.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulationSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
p.PercentDetectionParetoByPopulationSeasonal_Family <- ggplot(prev.pareto.seasonal.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Hospital Population Type', x='', y='Percent Detection')
# subset by year (2014, 2015, 2016)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all, aggregate(Prevalence~SeasonYear+ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.year$Name <- factor(prev.pareto.seasonal.all.year$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.year.ind <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.year.fam <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.seasonal.all.year.ind$Name <- factor(prev.pareto.seasonal.all.year.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.year.fam$Name <- factor(prev.pareto.seasonal.all.year.fam$ShortName, levels = label.order.seasonal.fam)
p.PercentDetectionParetoAnnualSeasonal <- ggplot(prev.pareto.seasonal.all.year, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.year.ind, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionParetoAnnualSeasonal_Family <- ggplot(prev.pareto.seasonal.all.year.fam, aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(label=percent) + labs(title='National Percent Detection of Organsims by Year', x='', y='Percent Detection')
p.PercentDetectionPareto_Individual
p.PercentDetectionParetoSeasonal_Individual
head(prev.pareto.seasonal.all.year)
unique(prev.parto.seasonal.all.year$SeasonYear)
unique(prev.pareto.seasonal.all.year$SeasonYear)
unique(prev.pareto.seasonal.all.year$SeasonYear)
head(prev.pareto.seasonal.all.year)
lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence']))
lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(ShortName = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'ShortName'], Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence']))
do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(ShortName = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'ShortName'], Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence'])))
prev.table.seasonal.all <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(ShortName = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'ShortName'], Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence'])))
heaD(prev.table.seasonal.all)
head(prev.table.seasonal.all)
View(prev.table.seasonal.all)
head(prev.pareto.seasonal.all.pop)
head(prev.pareto.seasonal.all.nat.pop)
head(prev.pareto.seasonal.all.year)
lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'Prevalence']))
lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence']))
unique(prev.pareto.seasonal.all.nat.pop$Key)[1]
prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[1], 'ShortName']
prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[1], 'ShortName']
lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence']))
do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence'])))
prev.table.seasonal.all.pop <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence'])))
View(prev.table.seasonal.all.pop)
setwd('./Figures/')
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
print(imgName)
png(file=imgName, width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
setwd('..')
ls
head(runs.reg.date)
start.yearweek
run.positive.seasonal.count <- with(data.frame(merge(runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year')], bugs.df, by='RunDataId'), Record=1), aggregate(Record~RunDataId, FUN=sum))
dual.detection.seasonal.runs <- data.frame(bugs.df[bugs.df$RunDataId %in% run.positive.seasonal.count[run.positive.seasonal.count$Record>1, 'RunDataId'], ], Record = 1)
dual.detection.seasonal.runs <- merge(dual.detection.seasonal.runs, runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId')], by='RunDataId')
total.seasonal.runs <- with(runs.reg.date[runs.reg.date$YearWeek >= start.yearweek & runs.reg.date$CustomerSiteId %in% sites, c('RunDataId','Year','CustomerSiteId','Record')], sum(Record))
dual.detection.seasonal.agg <- with(dual.detection.seasonal.runs, aggregate(Record~BugPositive, FUN=sum))
dual.detection.seasonal.agg$PercentOfDuals <- with(dual.detection.seasonal.agg, Record/total.seasonal.runs)
dual.detection.seasonal.agg <- merge(dual.detection.seasonal.agg, shortnames.df, by.x='BugPositive', by.y='Organism')
prev.pareto.all.seasonal.duals <- merge(prev.pareto.seasonal.all.nat.ind, dual.detection.seasonal.agg, by='ShortName', all.x=TRUE)
prev.pareto.all.seasonal.duals[is.na(prev.pareto.seasonal.all.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.seasonal.duals[is.na(prev.pareto.all.seasonal.duals$PercentOfDuals),'PercentOfDuals'] <- 0
prev.pareto.all.seasonal.duals$ShortName <- factor(prev.pareto.all.seasonal.duals$ShortName, levels=prev.pareto.all.seasonal.duals[with(prev.pareto.all.seasonal.duals, order(Prevalence, decreasing = TRUE)),'ShortName'])
length(unique(run.positive.seasonal.count[run.positive.seasonal.count$Record > 1, 'RunDataId']))/total.seasonal.runs
ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Dual Detection of Organisms in Trend Population', y='Percent Detection', x='')
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(randomForest)
install_github('BioAimie/dateManip')
library(dateManip)
# load custom functions
source('../../NewFunctions/normalizeBurnRate.R')
# source('../../NewFunctions/rollPositivesBySite.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Dual Detection of Organisms in Trend Population', y='Percent Detection', x='')
p1 <- ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=Prevalence)) + geom_bar(stat='identity') + scale_fill_manual(values='grey', guide=FALSE) + scale_y_continuous(label=percent) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(title='Percent Detection and Dual Detection of Organisms in Trend Population', y='Percent Detection', x='')
p2 <- ggplot(prev.pareto.all.seasonal.duals, aes(x=Name, y=5*PercentOfDuals, color='Percent of Dual Detections')) + geom_point(size=4) + scale_color_manual(values='black', guide=FALSE) + scale_y_continuous(limits=c(0,5*max(prev.pareto.all.seasonal.duals$PercentOfDuals)), breaks=c(0, 0.05, 0.1, 0.15,0.2,0.25), labels=c('0%','1%','2%','3%','4%','5%')) + theme(text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank()) + labs(y='Dual Detection Occurrence Rate')
# Get the ggplot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
paretoSeasonalDuals <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(paretoSeasonalDuals)
grid.newpage()
png('Figures/PercentDetectionParetoSeasonalWithDualDetections.png', height=800, width=1400)
grid.draw(paretoSeasonalDuals)
dev.off()
