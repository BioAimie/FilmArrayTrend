as.character(unique(prev.predict$Code))
head(prev.pareto.all)
prev.pareto.all[prev.pareto.seasonal.all$YearWeek=='2017-04', ]
prev.pareto.seasonal.all[prev.pareto.seasonal.all$YearWeek=='2017-04', ]
prev.pareto.seasonal.all[prev.pareto.seasonal.all$YearWeek=='2017-04' & prev.pareto.seasonal.all$CustomerSiteId==2, ]
prev.predict <- prev.pareto.seasonal.all
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
head(prev.predict)
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- letters[1:(length(colnames(prev.predict))-1)]
head(prev.predict)
decoder.agg
adeno
bugs
decoder
head(prev.predict)
head(prev.pareto.seasonal.all)
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- prev.pareto.seasonal.all
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
head(prev.predict)
unique(prev.predict$Code)
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- as.character(unique(prev.predict$Code)) # letters[1:(length(colnames(prev.predict))-1)]
prev.predict
head(prev.predict)
colnames(prev.predict)[grep('X', colnames(prev.predict))]
as.character(unique(prev.predict$Code))
as.character(unique(prev.pareto.seasonal.all$Code))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- as.character(unique(prev.pareto.seasonal.all$Code))
head(prev.predict)
min(prev.predict$YearWeek)
min(as.character(prev.predict$YearWeek))
min(prev.pareto.seasonal.all$YearWeek)
min(positives.count.seasonal.agg$YearWeek)
heaD(positives.count.all)
head(positives.count.all)
min(positives.count.seasonal.trim$Year)
min(positives.count.seasonal.trim$YearWeek)
head(prev.pareto.seasonal.all)
start.yearweek
start.year <- 2013
# use data from all time and show a pareto of prevalence (collapsing fluA, coronas, pivs, and bacterias)
positives.count.trim <- positives.count.all[as.character(positives.count.all$YearWeek) >= '2013-01', ]
# need to sum up flu As, CoVs, PIVs, and Bacterias by customer site Id... then join these onto the positives.count.trim data frame
positives.count.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.agg <- rbind(positives.count.trim[,c('YearWeek','CustomerSiteId','Code','Positives','Runs')], positives.count.fluas, positives.count.covs, positives.count.pivs, positives.count.bacteria)
decoder.agg <- rbind(decoder, data.frame(Bug='Influenza A (all)', Code='v'), data.frame(Bug='Coronavirus (all)', Code='w'), data.frame(Bug='Parainfluenza (all)', Code='x'), data.frame(Bug='Bacteria (all)', Code='y'))
positives.count.agg <- merge(positives.count.agg, decoder.agg, by='Code')
positives.count.agg <- merge(positives.count.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
positives.count.agg$ShortName <- as.character(positives.count.agg$ShortName)
positives.count.agg[as.character(positives.count.agg$Code)=='v', 'ShortName'] <- 'Flu A (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='w', 'ShortName'] <- 'CoV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='x', 'ShortName'] <- 'PIV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
# Make various paretos...
prev.pareto.all <- merge(positives.count.agg, unique(runs.reg.date[,c('YearWeek','Year')]), by='YearWeek')
prev.pareto.all <- subset(prev.pareto.all, Year >= start.year)
# start with all data from the 8 sites starting in 2014-present showing all organisms and then grouping by family
prev.pareto.all.nat <- with(prev.pareto.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.all.nat$Prevalence <- with(prev.pareto.all.nat, Positives/Runs)
prev.pareto.all.nat <- with(prev.pareto.all.nat, aggregate(Prevalence~ShortName+Code, FUN=mean))
prev.pareto.all.nat.ind <- prev.pareto.all.nat[!(prev.pareto.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.all.nat.fam <- prev.pareto.all.nat[!(prev.pareto.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
label.order.all <- prev.pareto.all.nat[with(prev.pareto.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.all <- label.order.all[c(1,2,3,8,17,18,19,4,10,13,16,20,5,9,11,21,24,6,7,12,14,15,22,23)]
prev.pareto.all.nat$Name <- factor(prev.pareto.all.nat$ShortName, levels = label.order.all)
label.order.ind <- prev.pareto.all.nat.ind[with(prev.pareto.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.ind$Name <- factor(prev.pareto.all.nat.ind$ShortName, levels = label.order.ind)
label.order.fam <- prev.pareto.all.nat.fam[with(prev.pareto.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.all.nat.fam$Name <- factor(prev.pareto.all.nat.fam$ShortName, levels = label.order.fam)
p.PercentDetectionPareto <- ggplot(prev.pareto.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionPareto_Individual <- ggplot(prev.pareto.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionPareto_Family <- ggplot(prev.pareto.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
# subset the data into children's hospitals and mixed population hospitals
sites.mixed <- unique(runs.reg.date[!(runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name)[grep('Children', unique(runs.reg.date$Name))])),'CustomerSiteId'])
sites.child <- unique(runs.reg.date[runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name))[grep('Children', unique(runs.reg.date$Name))],'CustomerSiteId'])
prev.pareto.all.pop <- prev.pareto.all
prev.pareto.all.pop$Key <- with(prev.pareto.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
prev.pareto.all.nat.pop <- with(prev.pareto.all.pop, aggregate(cbind(Runs, Positives)~ShortName+Code+Key+CustomerSiteId, FUN=sum))
prev.pareto.all.nat.pop$Prevalence <- with(prev.pareto.all.nat.pop, Positives/Runs)
prev.pareto.all.nat.pop <- with(prev.pareto.all.nat.pop, aggregate(Prevalence~ShortName+Code+Key, FUN=mean))
prev.pareto.all.nat.pop$Name <- factor(prev.pareto.all.nat.pop$ShortName, levels=label.order.all)
prev.pareto.all.nat.pop.ind <- prev.pareto.all.nat.pop[!(prev.pareto.all.nat.pop$Code %in% c('v','w','x','y')), ]
prev.pareto.all.nat.pop.fam <- prev.pareto.all.nat.pop[!(prev.pareto.all.nat.pop$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.all.nat.pop.ind$Name <- factor(prev.pareto.all.nat.pop.ind$ShortName, levels=label.order.ind)
prev.pareto.all.nat.pop.fam$Name <- factor(prev.pareto.all.nat.pop.fam$ShortName, levels=label.order.fam)
p.PercentDetectionParetoByPopulation <- ggplot(prev.pareto.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionParetoByPopulation_Individual <- ggplot(prev.pareto.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionParetoByPopulation_Family <- ggplot(prev.pareto.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.pop, 'Key'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
# subset by year (2014, 2015, 2016)
prev.pareto.all.year <- with(prev.pareto.all, aggregate(Prevalence~Year+ShortName+Code, FUN=mean))
prev.pareto.all.year$Name <- factor(prev.pareto.all.year$ShortName, levels = label.order.all)
prev.pareto.all.year.ind <- prev.pareto.all.year[!(prev.pareto.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.all.year.fam <- prev.pareto.all.year[!(prev.pareto.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s','t')), ]
prev.pareto.all.year.ind$Name <- factor(prev.pareto.all.year.ind$ShortName, levels = label.order.ind)
prev.pareto.all.year.fam$Name <- factor(prev.pareto.all.year.fam$ShortName, levels = label.order.fam)
p.PercentDetectionParetoAnnual <- ggplot(prev.pareto.all.year, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionParetoAnnual_Individual <- ggplot(prev.pareto.all.year.ind, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
p.PercentDetectionParetoAnnual_Family <- ggplot(prev.pareto.all.year.fam, aes(x=Name, y=Prevalence, fill=as.factor(Year))) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.all.year, 'Year'), name='') + scale_y_continuous(label=percent) + labs(title='', x='', y='Detection (%)')
head(prev.pareto.all)
head(prev.pareto.all)
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
unique(prev.pareto.all$CustomerSiteId)
length(unique(prev.pareto.all$CustomerSiteId))
length(unique(prev.pareto.all$CustomerSiteId))*length(unique(prev.pareto.all$YearWeek))*length(unique(prev.pareto.all$Code))
View(prev.predict)
positives.count.trim <- positives.count.all[as.character(positives.count.all$YearWeek) >= '2013-01', ]
positives.count.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
positives.count.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
head(positives.count.trim)
positives.count.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')], by=c('YearWeek','CustomerSiteId'))
View(positives.count.fluas)
View(positives.count.seasonal.fluas)
positives.count.fluas <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'v', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% fluAs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), unique(prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')]), by=c('YearWeek','CustomerSiteId'))
positives.count.covs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'w', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% corona,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), unique(prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')]), by=c('YearWeek','CustomerSiteId'))
positives.count.pivs <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'x', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% pivs,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), unique(prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')]), by=c('YearWeek','CustomerSiteId'))
positives.count.bacteria <- merge(do.call(rbind, lapply(1:length(unique(positives.count.trim$CustomerSiteId)), function(x) do.call(rbind, lapply(1:length(unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])), function(y) data.frame(YearWeek = unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], CustomerSiteId = unique(positives.count.trim$CustomerSiteId)[x], Code = 'y', Positives = sum(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x] & positives.count.trim$Code %in% as.character(decoder[decoder$Bug %in% bacterias,'Code']) & positives.count.trim$YearWeek == unique(positives.count.trim[positives.count.trim$CustomerSiteId==unique(positives.count.trim$CustomerSiteId)[x],'YearWeek'])[y], 'Positives'])))))), unique(prevalence.reg.agg[,c('YearWeek','CustomerSiteId','Runs')]), by=c('YearWeek','CustomerSiteId'))
positives.count.agg <- rbind(positives.count.trim[,c('YearWeek','CustomerSiteId','Code','Positives','Runs')], positives.count.fluas, positives.count.covs, positives.count.pivs, positives.count.bacteria)
decoder.agg <- rbind(decoder, data.frame(Bug='Influenza A (all)', Code='v'), data.frame(Bug='Coronavirus (all)', Code='w'), data.frame(Bug='Parainfluenza (all)', Code='x'), data.frame(Bug='Bacteria (all)', Code='y'))
positives.count.agg <- merge(positives.count.agg, decoder.agg, by='Code')
positives.count.agg <- merge(positives.count.agg, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
positives.count.agg$ShortName <- as.character(positives.count.agg$ShortName)
positives.count.agg[as.character(positives.count.agg$Code)=='v', 'ShortName'] <- 'Flu A (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='w', 'ShortName'] <- 'CoV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='x', 'ShortName'] <- 'PIV (all)'
positives.count.agg[as.character(positives.count.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
prev.pareto.all <- merge(positives.count.agg, unique(runs.reg.date[,c('YearWeek','Year')]), by='YearWeek')
prev.pareto.all <- subset(prev.pareto.all, Year >= start.year)
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- as.character(unique(prev.pareto.seasonal.all$Code)) # letters[1:(length(colnames(prev.predict))-1)]
heaD(prev.predict)
head(prev.predict)
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
View(prev.predict)
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
View(prev.predict)
min(prev.predict$Runs)
head(prev.predict)
prev.pareto.seasonal.all <- positives.count.seasonal.agg
prev.pareto.seasonal.all.nat <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.nat$Prevalence <- with(prev.pareto.seasonal.all.nat, Positives/Runs)
head(prev.pareto.seasonal.all)
min(prev.pareto.seasonal.all$Runs)
min(prev.pareto.seasonal.all.nat$Runs)
head(prev.pareto.seasonal.all)
head(prev.predict)
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
head(prev.predict)
prev.predict[prev.predict$Runs < 30, ]
prev.predict[prev.predict$Runs < 30, 'Prevalence']
hist(prev.predict[prev.predict$Runs < 30, 'Prevalence'])
prev.predict[prev.predict$Runs < 30, 'Prevalence'] <- NA
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean, na.action = 'omit'))
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict[is.na(prev.predict$Prevalence), ]
prev.predict <- prev.pareto.all[prev.pareto.all$YearWeek >= '2013-26', ]
prev.predict$Prevalence <- with(prev.predict, Positives/Runs)
prev.predict[prev.predict$Runs < 30, 'Prevalence'] <- NA
prev.predict <- with(prev.predict, aggregate(Prevalence~YearWeek+Code+ShortName, FUN=mean))
prev.predict <- prev.predict[with(prev.predict, order(Code, YearWeek)), ]
prev.predict <- data.frame(YearWeek = unique(prev.predict$YearWeek), do.call(cbind, lapply(1:length(unique(prev.predict$Code)), function(x) prev.predict[prev.predict$Code==unique(prev.predict$Code)[x],'Prevalence'])))
colnames(prev.predict)[grep('X', colnames(prev.predict))] <- as.character(unique(prev.pareto.seasonal.all$Code)) # letters[1:(length(colnames(prev.predict))-1)]
head(prev.predict)
tail(prev.predict)
head(ili.burn.nat)
tail(ili.burn.nat)
prev.predict <- merge(prev.predict, ili.burn.nat, by='YearWeek')
prev.predict <- prev.predict[!(is.na(prev.predict$Rate)), ]
tail(prev.predict)
head(prev.predict)
fit.vars
head(prev.predict)
decoder.agg
fit.vars <- c('a','b','c','d','e','f','g','h','i','n','o','p','q','r','s','t','v')
combos.eight
summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))
summary(lm(as.formula(paste('Rate', as.character(combos.eight[1,]), sep='~')), prev.predict))
summary(lm(as.formula(paste('Rate', as.character(combos.eight[1,]), sep='~')), prev.predict))
dcoder.agg
decoder.agg
combos.nine <- generateCombos(fit.vars, 9)
combos.ten <- generateCombos(fit.vars, 10)
combos.eleven <- generateCombos(fit.vars, 11)
ili.model.eval.eight <- do.call(rbind, lapply(1:length(combos.eight[,'Combo']), function(x) data.frame(Model = combos.eight[x,'Combo'], adjR2 = summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$adj.r.squared, corr = cor(fitted(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict)), prev.predict$Rate), alpha.0 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] < 0.0001), alpha.001 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.001), alpha.01 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.01), alpha.05 = sum(summary(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict))$coeff[2:9,4] <= 0.05), alpha1 = 8, anova.all = anova(lm(as.formula(paste('Rate', as.character(combos.eight[x,]), sep='~')), prev.predict), fit.ili.all)[,'Pr(>F)'][2])))
ili.model.eval.eight[ili.model.eval.eight$anova.all == max(ili.model.eval.eight$anova.all), ]
fit.ili.all <- lm(as.formula(paste('Rate', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
fit.burn.all <- lm(as.formula(paste('NormalizedBurn', paste(fit.vars, collapse='+'), sep='~')), prev.predict)
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
require(dateManip)
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=FluPercentDetection, group='FilmArrary Detection', color='FilmArray Detection')) + geom_line(size=2) + geom_line(aes(x=YearWeek, y=FluPrevalence, group='CDC Flu Prevalence', color='CDC Flu Prevalence'), cdc.bfdx.flu.nat, lwd=1.5)  + geom_line(aes(x=YearWeek, y=10*Rate, group='CDC ILI Rate', color='CDC ILI Rate'), cdc.bfdx.flu.nat, lwd=1.5) + scale_color_manual(values=c('black','blue','red','darkgreen'), name='') + scale_y_continuous(breaks=c(0,.07,0.14,0.21,0.28,0.35), limits=c(0,0.35), labels=c(0, 7, 14, 21, 28, 35)) + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='FilmArray Detection (%), Flu Prevalence (%)', x='Date')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=FluPercentDetection, group='FilmArrary Detection', color='FilmArray Detection')) + geom_line(size=2) + geom_line(aes(x=YearWeek, y=FluPrevalence, group='CDC Flu Prevalence', color='CDC Flu Prevalence'), cdc.bfdx.flu.nat, lwd=1.5)  + geom_line(aes(x=YearWeek, y=8*Rate, group='CDC ILI Rate', color='CDC ILI Rate'), cdc.bfdx.flu.nat, lwd=1.5) + scale_color_manual(values=c('black','blue','red','darkgreen'), name='') + scale_y_continuous(breaks=c(0,.07,0.14,0.21,0.28,0.35), limits=c(0,0.35), labels=c(0, 7, 14, 21, 28, 35)) + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='FilmArray Detection (%), Flu Prevalence (%)', x='Date')
head(cdc.bfdx.flu.nat)
max(cdc.bfdx.flu.nat$FluPrevalence)
max(cdc.bfdx.flu.nat$FluPrevalence)*8
max(cdc.bfdx.flu.nat$Rate)*8
max(cdc.bfdx.flu.nat$Rate)*10
max(cdc.bfdx.flu.nat$Rate)*8
max(cdc.bfdx.flu.nat$Rate)
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(labels='percent') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label='percent') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent, limits=c(0, 0.30)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent, limits=c(0,0.034)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent, limits=c(0,0.036), breaks=c(0, 0.004, 0.008, 0.012, 0.016, 0.020, 0.024, 0.028, 0.032, 0.036)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent, limits=c(0,0.04), breaks=c(0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(label=percent, limits=c(0,0.32), breaks=c(0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=8*Rate, group=1)) + geom_line() + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(limits=c(0,0.32), breaks=c(0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32), labels=c('0.0','0.5','1.0','1.5','2.0','2.5','3.0','3.5','4.0')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
p1 <- ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek, y=FluPercentDetection, group='FilmArrary Detection', color='FilmArray Detection')) + geom_line(size=2) + geom_line(aes(x=YearWeek, y=FluPrevalence, group='CDC Flu Prevalence', color='CDC Flu Prevalence'), cdc.bfdx.flu.nat, lwd=1.5)  + geom_line(aes(x=YearWeek, y=8*Rate, group='CDC ILI Rate', color='CDC ILI Rate'), cdc.bfdx.flu.nat, lwd=1.5) + scale_color_manual(values=c('black','blue','red','darkgreen'), name='') + scale_y_continuous(breaks=c(0,.07,0.14,0.21,0.28,0.35), limits=c(0,0.35), labels=c(0, 7, 14, 21, 28, 35)) + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='FilmArray Detection (%), Flu Prevalence (%)', x='Date')
p2 <- ggplot(cdc.bfdx.flu.nat, aes(x=YearWeek)) + scale_x_discrete(breaks = dateBreaksAlt2, labels = dateLabelsAlt2) + scale_y_continuous(limits=c(0,0.32), breaks=c(0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32), labels=c('0.0','0.5','1.0','1.5','2.0','2.5','3.0','3.5','4.0')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='ILI (%)')
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the location of the plot panel in g1.
# These are used later when transformed elements of g2 are put back into g1
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Get the y axis title from g2
index <- which(g2$layout$name == "ylab-l") # Which grob contains the y axis title?
ylab <- g2$grobs[[index]]                # Extract that grob
ylab <- hinvert_title_grob(ylab)         # Swap margins and fix justifications
# Put the transformed label on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, ylab, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "ylab-r")
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# First, move the axis line to the left
yaxis$children[[1]]$x <- unit.c(unit(0, "npc"), unit(0, "npc"))
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + unit(3, "pt")
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
fluTriple <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Draw it
grid.newpage()
grid.draw(fluTriple)
grid.newpage()
png('Figures/InfluenzaPrevalencePercentDetectionBurnAndILI.png', height=800, width=1400)
grid.draw(fluTriple)
dev.off()
head(prevalence.reg.wrap)
head(prevalence.nat.individual.wrap)
head(runs.df)
as.character(unique(runs.df$Name))
unique(runs.df[runs.df$Name=='North Shore LIJ Health System', 'CustomerSiteId'])
unique(runs.df[runs.df$Name=='North Shore LIJ Health System ', 'CustomerSiteId'])
head(prevalence.reg.agg )
head(prevalence.reg.agg)
head(prevalence.reg.wrap)
with(subset(prevalence.reg.wrap, CustomerSiteId %in% ))
unique(runs.df[runs.df$Name=='North Shore LIJ Health System ', 'CustomerSiteId'])
with(subset(prevalence.reg.wrap, CustomerSiteId %in% unique(runs.df[runs.df$Name=='North Shore LIJ Health System ', 'CustomerSiteId'])), aggregate(Prevalence~YearWeek+ShortName, FUN=mean))
avg.prev.northwell <- with(subset(prevalence.reg.wrap, CustomerSiteId %in% unique(runs.df[runs.df$Name=='North Shore LIJ Health System ', 'CustomerSiteId'])), aggregate(Prevalence~YearWeek+ShortName, FUN=mean))
head(avg.prev.northwell)
ggplot(avg.prev.northwell[with(avg.prev.northwell, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
library(ggplot2)
ggplot(avg.prev.northwell[with(avg.prev.northwell, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
ggplot(avg.prev.northwell[with(avg.prev.northwell, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8,1)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
ggplot(avg.prev.northwell[with(avg.prev.northwell, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
p.PercentDetectionTrend_Northwell <- ggplot(avg.prev.northwell[with(avg.prev.northwell, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,1), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
plots <- 'p.PercentDetectionTrend_Northwell'
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
plots <- ls()[grep('^p\\.',ls())]
head(prevalence.nat.individual.wrap)
head(prevalence.reg.agg)
head(positives.count.all)
positives.count.all[positives.count.all$YearWeek=='2013-01']
positives.count.all[positives.count.all$YearWeek=='2013-01', ]
positives.count.all[positives.count.all$YearWeek=='2013-01', ]
head(calendar.df)
with(calendar.df, aggregate(Days~YearWeek, FUN=sum))
merge(positives.count.all, with(calendar.df, aggregate(Days~YearWeek, FUN=sum)), by='YearWeek')
with(calendar.df, aggregate(Days~YearWeek, FUN=sum))
head(runs.reg.norm)
head(positives.count.all)
head(positives.count.all[positives.count.all$CustomerSiteId==26, ])
a <- merge(positives.count.all, unique(runs.reg.norm[,c('YearWeek','CustomerSiteId','RollDays')]), by=c('YearWeek','CustomerSiteId'))
head(a)
tail(a)
rm(a)
head(positives.count.all)
unique(positives.count.all$Bug)
unique(positives.count.all$Code)
head(positives.count.all)
unique(positives.count.all$Bug)
grep('Influneza A', unique(as.character(positives.count.all$Bug)))
grep('Influenza A', unique(as.character(positives.count.all$Bug)))
grep('Influenza A', positives.count.all$Bug)
positives.count.all[grep('Influenza A', positives.count.all$Bug), ]
head(positives.count.all)
grep('Influenza A', positives.count.all$Bug)
!(grep('Influenza A', positives.count.all$Bug))
grep('Influenza A', positives.count.all$Bug)
grep('Influenza A', unique(as.character(positives.count.all$Bug)))
as.character(unique(positives.count.all$Bug))[grep('Influenza A', unique(as.character(positives.count.all$Bug)))]
a <- positives.count.all[!(as.character(positives.count.all$Bug) %in% as.character(unique(positives.count.all$Bug))[grep('Influenza A', unique(as.character(positives.count.all$Bug)))]), ]
head(a)
unique(a$Bug)
cor.count.noFluA <- positives.count.all[!(as.character(positives.count.all$Bug) %in% as.character(unique(positives.count.all$Bug))[grep('Influenza A', unique(as.character(positives.count.all$Bug)))]), ]
head(cor.count.noFluA, 30)
length(unique(cor.count.noFluA$YearWeek))*length(unique(cor.count.noFluA$CustomerSiteId))*length(unique(cor.count.noFluA$Bug))
cor.count.fluA <- positives.count.all[grep('Influenza A', positives.count.all$Bug), ]
head(cor.count.fluA)
with(cor.count.fluA, aggregate(Positives~YearWeek+CustomerSiteId+Runs+Region+Name))
with(cor.count.fluA, aggregate(Positives~YearWeek+CustomerSiteId+Runs+Region+Name, FUN=sum))
a <- with(cor.count.fluA, aggregate(Positives~YearWeek+CustomerSiteId+Runs+Region+Name, FUN=sum))
head(a)
head(cor.count.fluA[cor.count.fluA$CustomerSiteId==25, ])
head(cor.count.fluA[cor.count.fluA$CustomerSiteId==25 & cor.count.fluA$YearWeek=='2016-06', ])
head(cor.count.fluA)
cor.count.fluA <- with(cor.count.fluA, aggregate(Positives~YearWeek+CustomerSiteId+Runs+Region+Name, FUN=sum))
data.frame(cor.count.fluA, Code = v, Bug = 'FluA')
cor.count.fluA <- data.frame(cor.count.fluA, Code = 'v', Bug = 'FluA')[,c('YearWeek','CustomerSiteId','Runs','Region','Name','Bug','Code','Positives')]
head(cor.count.fluA)
head(cor.count.noFluA)
cor.count <- rbind(cor.count.noFluA, cor.count.fluA)
head(shortnames.df)
a <- merge(cor.count, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
head(a)
a[is.na(a$ShortName), ]
cor.count <- merge(cor.count, shortnames.df, by.x='Bug', by.y='Organism', all.x=TRUE)
cor.count[is.na(cor.count$ShortName), 'ShortName'] <- 'FluA'
a[is.na(a$ShortName), ]rm(a)
rm(a)
cor.count$ShortName <- as.character(cor.count$ShortName)
cor.count[is.na(cor.count$ShortName), 'ShortName'] <- 'FluA'
head(cor.count)
tail(cor.count)
head(cor.count)
head(combos)
head(var.cor)
head(cor.count.agg)
cor.count.agg <- with(cor.count, aggregate(cbind(Positives, Runs)~YearWeek+ShortName, FUN=sum))
head(cor.count.agg)
head(cor.prev)
cor.vars
combos[[1]]
i <- 2
combos <- generateCombos(cor.vars, i, FALSE)
head(combos)
j <- 1
temp <- cor.count.agg[cor.count.agg$ShortName %in% combos[[j]], ]
head(temp)
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=sum))$Runs)
head(temp.summed)
temp[temp$YearWeek=='2013-01', ]
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=mean))$Runs)
head(temp.summed)
hea(temp.summed)
head(temp.summed)
temp.var.cor <- data.frame(Name = paste(combos[[j]], collapse=', '), CorTUR = cor(temp.summed$SummedPositives, temp.summed$SummedRuns), R2TUR = summary(lm(SummedRuns~SummedPositives, data=temp.summed))$adj.r.squared)
head(temp.var.cor)
head(single.var.cor)
head(cor.count.agg)
do.call(1:length(unique(cor.count.agg$ShortName)), function(x) data.frame(ShortName = unique(cor.count.agg$ShortName)[x], CorTUR = cor(cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Positives'], cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Runs']), R2TUR = summary(lm(Runs~Positives, data = cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], ]))$adj.r.squared))
do.call(rbind, lapply(1:length(unique(cor.count.agg$ShortName)), function(x) data.frame(ShortName = unique(cor.count.agg$ShortName)[x], CorTUR = cor(cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Positives'], cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Runs']), R2TUR = summary(lm(Runs~Positives, data = cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], ]))$adj.r.squared)))
single.var.cor.count <- do.call(rbind, lapply(1:length(unique(cor.count.agg$ShortName)), function(x) data.frame(ShortName = unique(cor.count.agg$ShortName)[x], CorTUR = cor(cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Positives'], cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], 'Runs']), R2TUR = summary(lm(Runs~Positives, data = cor.count.agg[cor.count.agg$ShortName==unique(cor.count.agg$ShortName)[x], ]))$adj.r.squared)))
head(single.var.cor.count)
as.character(single.var.cor.count[single.var.cor.count$CorTUR==max(single.var.cor.count$CorTUR), 'Name'])
max(single.var.cor.count$CorTUR)
single.var.cor.count[single.var.cor.count$CorTUR==max(single.var.cor.count$CorTUR), ]
multiple.var.cor.count <- data.frame(VariableCount = 1,
BestCorCombo = as.character(single.var.cor.count[single.var.cor.count$CorTUR==max(single.var.cor.count$CorTUR), 'ShortName']),
BestR2Combo = as.character(single.var.cor.count[single.var.cor.count$R2TUR==max(single.var.cor.count$R2TUR), 'ShortName'])
)
multiple.var.cor.count
head(var.cor)
head(temp.var.cor)
var.cor <- rbind(var.cor, temp.var.cor)
var.cor <- c()
var.cor <- rbind(var.cor, temp.var.cor)
head(var.cor)
temp <- cor.count.agg[cor.count.agg$ShortName %in% combos[[j]], ]
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=mean))$Runs)
temp.var.cor <- data.frame(ShortName = paste(combos[[j]], collapse=', '), CorTUR = cor(temp.summed$SummedPositives, temp.summed$SummedRuns), R2TUR = summary(lm(SummedRuns~SummedPositives, data=temp.summed))$adj.r.squared)
var.cor <- rbind(var.cor, temp.var.cor)
var.cor <- c()
for(j in 1:length(combos)) {
temp <- cor.count.agg[cor.count.agg$ShortName %in% combos[[j]], ]
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=mean))$Runs)
temp.var.cor <- data.frame(ShortName = paste(combos[[j]], collapse=', '), CorTUR = cor(temp.summed$SummedPositives, temp.summed$SummedRuns), R2TUR = summary(lm(SummedRuns~SummedPositives, data=temp.summed))$adj.r.squared)
var.cor <- rbind(var.cor, temp.var.cor)
}
head(var.cor)
head(single.var.cor.count)
multiple.var.cor.count <- data.frame(VariableCount = 1,
BestCorCombo = as.character(single.var.cor.count[single.var.cor.count$CorTUR==max(single.var.cor.count$CorTUR), 'ShortName']),
BestCor = max(single.var.cor.count$CorTUR),
BestR2Combo = as.character(single.var.cor.count[single.var.cor.count$R2TUR==max(single.var.cor.count$R2TUR), 'ShortName']),
BestR2 = max(single.var.cor.count$R2TUR)
)
multiple.var.cor.count
multiple.var.cor.count <- rbind(multiple.var.cor.count, data.frame(VariableCount = i,
BestCorCombo = as.character(var.cor[var.cor$CorTUR==max(var.cor$CorTUR), 'ShortName']),
BestCor = max(var.cor$CorTUR),
BestR2Combo = as.character(var.cor[var.cor$R2TUR==max(var.cor$R2TUR), 'ShortName']),
BestCombo = max(var.cor$R2TUR)
))
for(i in 2:length(cor.vars)) {
combos <- generateCombos(cor.vars, i, FALSE)
var.cor <- c()
for(j in 1:length(combos)) {
temp <- cor.count.agg[cor.count.agg$ShortName %in% combos[[j]], ]
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=mean))$Runs)
temp.var.cor <- data.frame(ShortName = paste(combos[[j]], collapse=', '), CorTUR = cor(temp.summed$SummedPositives, temp.summed$SummedRuns), R2TUR = summary(lm(SummedRuns~SummedPositives, data=temp.summed))$adj.r.squared)
var.cor <- rbind(var.cor, temp.var.cor)
}
multiple.var.cor.count <- rbind(multiple.var.cor.count, data.frame(VariableCount = i,
BestCorCombo = as.character(var.cor[var.cor$CorTUR==max(var.cor$CorTUR), 'ShortName']),
BestCor = max(var.cor$CorTUR),
BestR2Combo = as.character(var.cor[var.cor$R2TUR==max(var.cor$R2TUR), 'ShortName']),
BestCombo = max(var.cor$R2TUR)
))
}
var.cor
j
head(var.cor)
head(multiple.var.cor.count)
multiple.var.cor.count <- rbind(multiple.var.cor.count, data.frame(VariableCount = i,
BestCorCombo = as.character(var.cor[var.cor$CorTUR==max(var.cor$CorTUR), 'ShortName']),
BestCor = max(var.cor$CorTUR),
BestR2Combo = as.character(var.cor[var.cor$R2TUR==max(var.cor$R2TUR), 'ShortName']),
BestR2 = max(var.cor$R2TUR)
))
multiple.var.cor.count <- data.frame(VariableCount = 1,
BestCorCombo = as.character(single.var.cor.count[single.var.cor.count$CorTUR==max(single.var.cor.count$CorTUR), 'ShortName']),
BestCor = max(single.var.cor.count$CorTUR),
BestR2Combo = as.character(single.var.cor.count[single.var.cor.count$R2TUR==max(single.var.cor.count$R2TUR), 'ShortName']),
BestR2 = max(single.var.cor.count$R2TUR)
)
for(i in 2:length(cor.vars)) {
combos <- generateCombos(cor.vars, i, FALSE)
var.cor <- c()
for(j in 1:length(combos)) {
temp <- cor.count.agg[cor.count.agg$ShortName %in% combos[[j]], ]
temp.summed <- data.frame(YearWeek = unique(temp$YearWeek), SummedPositives = with(temp, aggregate(Positives~YearWeek, FUN=sum))$Positives, SummedRuns = with(temp, aggregate(Runs~YearWeek, FUN=mean))$Runs)
temp.var.cor <- data.frame(ShortName = paste(combos[[j]], collapse=', '), CorTUR = cor(temp.summed$SummedPositives, temp.summed$SummedRuns), R2TUR = summary(lm(SummedRuns~SummedPositives, data=temp.summed))$adj.r.squared)
var.cor <- rbind(var.cor, temp.var.cor)
}
multiple.var.cor.count <- rbind(multiple.var.cor.count, data.frame(VariableCount = i,
BestCorCombo = as.character(var.cor[var.cor$CorTUR==max(var.cor$CorTUR), 'ShortName']),
BestCor = max(var.cor$CorTUR),
BestR2Combo = as.character(var.cor[var.cor$R2TUR==max(var.cor$R2TUR), 'ShortName']),
BestR2 = max(var.cor$R2TUR)
))
}
head(multiple.var.cor.count)
multiple.var.cor.count[multiple.var.cor.count$BestCor==max(multiple.var.cor.count$BestCor), c('VariableCount','BestCorComboILI','BestCorILI')]
multiple.var.cor.count[multiple.var.cor.count$BestR2==max(multiple.var.cor.count$BestR2), c('VariableCount','BestR2ComboILI','BestR2ILI')]
multiple.var.cor.count[multiple.var.cor.count$BestCor==max(multiple.var.cor.count$BestCor), c('VariableCount','BestCorCombo','BestCor')]
multiple.var.cor.count[multiple.var.cor.count$BestR2==max(multiple.var.cor.count$BestR2), c('VariableCount','BestR2Combo','BestR2')]
multiple.var.cor.count[multiple.var.cor.count$BestCor==max(multiple.var.cor.count$BestCor), c('VariableCount','BestCorCombo','BestCor')]
multiple.var.cor.count[multiple.var.cor.count$BestR2==max(multiple.var.cor.count$BestR2), c('VariableCount','BestR2Combo','BestR2')]
multiple.var.cor.count
multiple.var.cor.count
