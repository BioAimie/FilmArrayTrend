positives.count.seasonal.agg[as.character(positives.count.seasonal.agg$Code)=='y', 'ShortName'] <- 'Bacteria (all)'
prev.pareto.seasonal.all <- positives.count.seasonal.agg
head(prev.pareto.seasonal.all)
View(prev.pareto.seasonal.all)
prev.pareto.seasonal.all.nat <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.nat$Prevalence <- with(prev.pareto.seasonal.all.nat, Positives/Runs)
prev.pareto.seasonal.all.nat <- with(prev.pareto.seasonal.all.nat, aggregate(Prevalence~ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.nat.ind <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.fam <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s')), ]
prec.pareto.seasonal.all.fa
prev.pareto.seasonal.all.fam
prev.pareto.seasonal.all.nat.fam
prev.pareto.seasonal.all.nat.ind <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.fam <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','n','p','q','r','s')), ]
prev.pareto.seasonal.all.nat
prev.pareto.seasonal.all.nat.ind
prev.pareto.seasonal.all.nat.fam
decoder
prev.pareto.seasonal.all.nat.fam <- prev.pareto.seasonal.all.nat[!(prev.pareto.seasonal.all.nat$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.seasonal.all.nat[with(prev.pareto.seasonal.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.seasonal.all <- prev.pareto.seasonal.all.nat[with(prev.pareto.seasonal.all.nat, order(Prevalence, decreasing = TRUE)), 'ShortName']
label.order.seasonal.all <- label.order.seasonal.all[c(1,2,3,8,16,18,19,4,9,11,21,24,5,10,14,17,20,6,7,12,13,15,22,23)]
prev.pareto.seasonal.all.nat$Name <- factor(prev.pareto.seasonal.all.nat$ShortName, levels = label.order.seasonal.all)
label.order.season.ind <- prev.pareto.seasonal.all.nat.ind[with(prev.pareto.seasonal.all.nat.ind, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.ind$Name <- factor(prev.pareto.seasonal.all.nat.ind$ShortName, levels = label.order.season.ind)
label.order.seasonal.fam <- prev.pareto.seasonal.all.nat.fam[with(prev.pareto.seasonal.all.nat.fam, order(Prevalence, decreasing = TRUE)), 'ShortName']
prev.pareto.seasonal.all.nat.fam$Name <- factor(prev.pareto.seasonal.all.nat.fam$ShortName, levels = label.order.seasonal.fam)
ggplot(prev.pareto.seasonal.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal <- ggplot(prev.pareto.seasonal.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_Family <- ggplot(prev.pareto.seasonal.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
sites.mixed <- unique(runs.reg.date[!(runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name)[grep('Children', unique(runs.reg.date$Name))])),'CustomerSiteId'])
sites.child <- unique(runs.reg.date[runs.reg.date$Name %in% as.character(unique(runs.reg.date$Name))[grep('Children', unique(runs.reg.date$Name))],'CustomerSiteId'])
prev.pareto.seasonal.all.pop <- prev.pareto.seasonal.all
prev.pareto.seasonal.all.pop$Key <- with(prev.pareto.seasonal.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
head(prev.pareto.seasonal.all.pop)
prev.pareto.seasonal.all.pop <- with(prev.pareto.seasonal.all.pop, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.pop$Prevalence <- with(prev.pareto.seasonal.all.pop, Positives/Runs)
prev.pareto.seasonal.all.pop <- prev.pareto.seasonal.all
prev.pareto.seasonal.all.pop$Key <- with(prev.pareto.seasonal.all.pop, ifelse(CustomerSiteId %in% sites.mixed, 'Mixed', 'Pediatric'))
prev.pareto.seasonal.all.pop <- with(prev.pareto.seasonal.all.pop, aggregate(cbind(Runs, Positives)~ShortName+Code+Key+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.pop$Prevalence <- with(prev.pareto.seasonal.all.pop, Positives/Runs)
prev.pareto.seasonal.all.nat.pop <- with(prev.pareto.seasonal.all.pop, aggregate(Prevalence~ShortName+Code+Key, FUN=mean))
prev.pareto.seasonal.all.nat.pop$Name <- factor(prev.pareto.seasonal.all.nat.pop$ShortName, levels=label.order.seasonal.all)
prev.pareto.seasonal.all.nat.pop.ind <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.nat.pop.fam <- prev.pareto.seasonal.all.nat.pop[!(prev.pareto.seasonal.all.nat.pop$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.seasonal.all.nat.pop.ind$Name <- factor(prev.pareto.seasonal.all.nat.pop.ind$ShortName, levels=label.order.season.ind)
prev.pareto.seasonal.all.nat.pop.fam$Name <- factor(prev.pareto.seasonal.all.nat.pop.fam$ShortName, levels=label.order.seasonal.fam)
ggplot(prev.pareto.seasonal.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection')
p.PercentDetectionParetoByPopulationSeasonal <- ggplot(prev.pareto.seasonal.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection')
p.PercentDetectionParetoByPopulationSeasonal_Individual <- ggplot(prev.pareto.seasonal.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoByPopulationSeasonal_Family <- ggplot(prev.pareto.seasonal.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection (%)')
head(prev.pareto.seasonal.all)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~SeasonYear+ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all.year, aggregate(Prevalence~SeasonYear+ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.year$Name <- factor(prev.pareto.seasonal.all.year$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.year.ind <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.year$Prevalence <- with(prev.pareto.seasonal.all.year, Positives/Runs)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all.year, aggregate(Prevalence~SeasonYear+ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.year$Name <- factor(prev.pareto.seasonal.all.year$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.year.fam <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.seasonal.all.year.ind$Name <- factor(prev.pareto.seasonal.all.year.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.year.fam$Name <- factor(prev.pareto.seasonal.all.year.fam$ShortName, levels = label.order.seasonal.fam)
ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal <- ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal_Individual <- ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal_Family <- ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
prev.table.seasonal.all <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.year$SeasonYear)), function(x) data.frame(ShortName = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'ShortName'], Prevalence = prev.pareto.seasonal.all.year[prev.pareto.seasonal.all.year$SeasonYear==unique(prev.pareto.seasonal.all.year$SeasonYear)[x],'Prevalence'])))
prev.table.seasonal.all.pop <- do.call(cbind, lapply(1:length(unique(prev.pareto.seasonal.all.nat.pop$Key)), function(x) data.frame(Key = unique(prev.pareto.seasonal.all.nat.pop$Key)[x], ShortName = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x], 'ShortName'], Prevalence = prev.pareto.seasonal.all.nat.pop[prev.pareto.seasonal.all.nat.pop$Key == unique(prev.pareto.seasonal.all.nat.pop$Key)[x],'Prevalence'])))
head(prev.pareto.seasonal.all.nat)
with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.side.by.side <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
heaD(prev.pareto.side.by.side)
head(prev.pareto.side.by.side)
head(sitesByCensusRegions.etc)
prev.pareto.side.by.side <- merge(merge(prev.pareto.side.by.side, sitesByCensusRegions.etc[,c('CustomerSiteId','CensusRegionNational')], by='CustomerSiteId'), population.dist.2016, by='CensusRegionNational')
head(prev.pareto.side.by.side)
prev.pareto.side.by.side <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~ShortName+Code+CustomerSiteId, FUN=sum))
head(prev.pareto.side.by.side)
prev.pareto.side.by.side <- merge(prev.pareto.side.by.side, sitesByCensusRegions.etc[,c('CustomerSiteId','CensusRegionNational')], by='CustomerSiteId')
head(prev.pareto.side.by.side)
prev.pareto.side.by.side <- with(prev.pareto.side.by.side, aggregate(cbind(Runs, Positives)~CensusRegionNational+ShortName+Code, FUN=sum))
prev.pareto.side.by.side$Prevalence <- with( prev.pareto.side.by.side, Positives/Runs)
head(prev.pareto.side.by.side)
prev.pareto.side.by.side <- merge(prev.pareto.side.by.side, population.dist.2016, by='CensusRegionNational')
head(prev.pareto.side.by.side)
prev.pareto.side.by.side$WeightedPrevalence <- with(prev.pareto.side.by.side, Prevalence*PopulationPercent)
head(prev.pareto.side.by.side)
prev.pareto.side.by.side <- with(prev.pareto.side.by.side, aggregate(WeightedPrevalence~ShortName+Code, FUN=sum))
head(prev.pareto.side.by.side)
head(prev.pareto.seasonal.all.nat)
colnames(prev.pareto.side.by.side) <- c('ShortName','Code','Prevalence')
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
require(dateManip)
head(prevalence.reg.census.wrap)
prevalence.reg.census.agg <- with(prevalence.reg.census.wrap, aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))
prevalence.reg.census.agg$Prevalence <- with(prevalence.reg.census.agg, Positives/Runs)
prevalence.nat.census.individual <- merge(prevalence.reg.census.agg, population.dist.2016, by='CensusRegionNational')
head(prevalence.nat.census.individual)
head(prevalence.reg.census.agg)
prevalence.reg.census.agg <- with(prevalence.reg.census.agg, aggregate(Prevalence~YearWeek+CensusRegionNational+ShortName, FUN=mean))
head(prevalence.reg.census.agg)
prevalence.nat.census.individual <- merge(prevalence.reg.census.agg, population.dist.2016, by='CensusRegionNational')
prevalence.nat.census.individual$WeightedPrevalence <- with(prevalence.nat.census.individual, Prevalence*PopulationPercent)
prevalence.nat.census.individual <- with(prevalence.nat.census.individual, aggregate(WeightedPrevalence~YearWeek+ShortName, FUN=sum))
ggplot(prevalence.nat.census.individual[with(prevalence.nat.census.individual, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
p.PercentDetectionTrend
p.PercentDetectionTrend_Weighted <- ggplot(prevalence.nat.census.individual[with(prevalence.nat.census.individual, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
head(prevalence.census.families)
prevalence.census.families <- rbind(prevalence.census.fluA, prevalence.census.corona, prevalence.census.pivs, prevalence.census.bacteria, prevalence.census.other)
head(prevalence.reg.census.agg)
head(prevalence.reg.census.agg)
head(prevalence.reg.census.wrap)
head(prevalence.reg.census.wrap)
prevalence.reg.census.agg.fam <- with(prevalence.reg.census.wrap, aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))
with(prevalence.reg.census.agg.fam[grep('Flu A|FluA', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational, FUN=sum))
prevalence.census.fluA <- with(prevalence.reg.census.agg.fam[grep('Flu A|FluA', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
head(prevalence.census.fluA)
prevalence.census.fluA$ShortName <- 'Influenza A'
prevalence.reg.census.agg.fam <- with(prevalence.reg.census.wrap, aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))
prevalence.census.fluA <- with(prevalence.reg.census.agg.fam[grep('Flu A|FluA', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.fluA$ShortName <- 'Influenza A'
prevalence.census.corona <- with(prevalence.reg.census.agg.fam[grep('CoV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.corona$ShortName <- 'Coronavirus'
prevalence.census.pivs <- with(prevalence.reg.census.agg.fam[grep('PIV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.pivs$ShortName <- 'Parainfluenza'
prevalence.census.bacteria <- with(prevalence.reg.census.agg.fam[grep('B. per|C. pne|M. pne', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.bacteria$ShortName <- 'Bacteria'
prevalence.census.other <- with(prevalence.reg.census.agg.fam[grep('Adeno|FluB|hMPV|HRV/EV|RSV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))[,c('YearWeek','CensusRegionNational','CustomerSiteId','Runs','Positives','ShortName')]
prevalence.census.families <- rbind(prevalence.census.fluA, prevalence.census.corona, prevalence.census.pivs, prevalence.census.bacteria, prevalence.census.other)
head(prevalence.census.families)
prevalence.census.families$Prevalence <- with(prevalence.census.families, Positives/Runs)
prevalence.census.families <- with(prevalence.census.families, aggregate(Prevalence~YearWeek+CensusRegionNational+ShortName, FUN=mean))
prevalence.census.families <- merge(prevalence.census.families, population.dist.2016, by='CensusRegionNational')
prevalence.census.families$WeightedPrevalence <- with(prevalence.census.families, Prevalence*PopulationPercent)
prevalence.census.nat.families <- with(prevalence.census.families, aggregate(WeightedPrevalence~YearWeek+ShortName, FUN=sum))
prevalence.census.nat.families[grep('FluB', prevalence.census.nat.families$ShortName), 'ShortName'] <- 'Influenza B'
ggplot(prevalence.census.nat.families[with(prevalence.census.nat.families, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), breaks=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='', y='Detection (%)', x='Date')
p.PercentDetectionTrend_Grouped_Weighted <- ggplot(prevalence.census.nat.families[with(prevalence.census.nat.families, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), breaks=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='', y='Detection (%)', x='Date')
head(prev.pareto.seasonal.all.nat)
head(prevalence.reg.agg)
head(prevalence.reg.census.agg)
head(prev.pareto.seasonal.all)
head(prev.pareto.seasonal.all)
head(prev.pareto.seasonal.all.nat)
unique(prev.pareto.seasonal.all.nat$ShortName)
factor(prev.pareto.seasonal.all.nat$ShortName, levels = label.order.seasonal.all)
head(prev.pareto.seasonal.all)
unique(prev.pareto.seasonal.all)
unique(prev.pareto.seasonal.all$ShortName)
head(prev.pareto.seasonal.all)
prev.pareto.seasonal.all.census <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~CustomerSiteId+Code+ShortName))
prev.pareto.seasonal.all.census <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~CustomerSiteId+Code+ShortName, FUN=sum))
prev.pareto.seasonal.all.census$Prevalence <- with(prev.pareto.seasonal.all.census, Positives/Runs)
head(prev.pareto.seasonal.all.census)
head(sitesByCensusRegions.etc)
prev.pareto.seasonal.all.census <- merge(prev.pareto.seasonal.all.census, sitesByCensusRegions.etc[,c('CustomerSiteId','CensusRegionNational')], by='CustomerSiteId')
head(prev.pareto.seasonal.all.census)
prev.pareto.seasonal.all.census <- with(prev.pareto.seasonal.all.census, aggregate(Prevalence~CensusRegionNational+Code+ShortName, FUN=mean))
head(prev.pareto.seasonal.all.census)
head(population.dist.2016)
merge(prev.pareto.seasonal.all.census, population.dist.2016, by='CensusRegionNational')
prev.pareto.seasonal.all.census <- merge(prev.pareto.seasonal.all.census, population.dist.2016, by='CensusRegionNational')
head(prev.pareto.seasonal.all.census)
prev.pareto.seasonal.all.census$WeightedPrevalence <- with(prev.pareto.seasonal.all.census, Prevalence*PopulationPercent)
head(prev.pareto.seasonal.all.census)
prev.pareto.seasonal.all.census <- with(prev.pareto.seasonal.all.census, aggregate(WeightedPrevalence~Code+ShortName, FUN=sum))
head(prev.pareto.seasonal.all.census)
prev.pareto.seasonal.all.census[with(prev.pareto.seasonal.all, order(WeightedPrevalence, decreasing = TRUE)), ]
prev.pareto.seasonal.all.census[with(prev.pareto.seasonal.all.census, order(WeightedPrevalence, decreasing = TRUE)), ]
prev.pareto.seasonal.all.census[with(prev.pareto.seasonal.all.census, order(WeightedPrevalence, decreasing = TRUE)), ]
head(prev.pareto.seasonal.all.nat)
prev.pareto.seasonal.all.nat[with(prev.pareto.seasonal.all.nat, order(Prevalence, decreasing = TRUE)), ]
head(prev.pareto.seasonal.all.census)
head(prev.pareto.seasonal.all.nat)
lavels(prev.pareto.seasonal.all.nat$Name)
levels(prev.pareto.seasonal.all.nat$Name)
prev.pareto.seasonal.all.census.ind <- prev.pareto.seasonal.all.census[!(prev.pareto.seasonal.all.census$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.census.fam <- prev.pareto.seasonal.all.census[!(prev.pareto.seasonal.all.census$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
label.order.sesonal.all
label.order.seasonal.all
factor(prev.pareto.seasonal.all.census$ShortName, levels = label.order.seasonal.all)
head(prev.pareto.seasonal.all.census)
label.order.seasonal.all
prev.pareto.seasonal.all.census$ShortName
factor(prev.pareto.seasonal.all.census$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.census$Name <- factor(prev.pareto.seasonal.all.census$ShortName, levels = label.order.seasonal.all)
head(prev.pareto.seasonal.all.nat)
head(prev.pareto.seasonal.all.census)
prev.pareto.seasonal.all.census <- with(prev.pareto.seasonal.all.census, aggregate(WeightedPrevalence~Code+ShortName, FUN=sum))
head(prev.pareto.seasonal.all.census)
colnames(prev.pareto.seasonal.all.census)[3] <- 'Prevalence'
prev.pareto.seasonal.all.census.ind <- prev.pareto.seasonal.all.census[!(prev.pareto.seasonal.all.census$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.census.fam <- prev.pareto.seasonal.all.census[!(prev.pareto.seasonal.all.census$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.seasonal.all.census$Name <- factor(prev.pareto.seasonal.all.census$ShortName, levels = label.order.seasonal.all)
rbind(data.frame(prev.pareto.seasonal.all.nat, Key = 'No Weighting'), data.frame(prev.pareto.seasonal.all.census, Key = 'Weighted by Population'))
prev.pareto.seasonal.all.sbys <- rbind(data.frame(prev.pareto.seasonal.all.nat, Key = 'No Weighting'), data.frame(prev.pareto.seasonal.all.census, Key = 'Weighted by Population'))
ggplot(prev.pareto.seasonal.all.sbys, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.sbys, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys, 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.sbys, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_SideBySide <- ggplot(prev.pareto.seasonal.all.sbys, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
prev.pareto.seasonal.all.census.ind$Name <- factor(prev.pareto.seasonal.all.census.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.census.ind$Name <- factor(prev.pareto.seasonal.all.census.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.census.fam$Name <- factor(prev.pareto.seasonal.all.census.fam$ShortName, levels = label.order.seasonal.fam)
head(prev.pareto.seasonal.all.census.ind)
head(prev.pareto.seasonal.all.census.fam)
prev.pareto.seasonal.all.sbys.ind <- rbind(data.frame(prev.pareto.seasonal.all.nat.ind, Key = 'No Weighting'), data.frame(prev.pareto.seasonal.all.census.ind, Key = 'Population Weighted'))
prev.pareto.seasonal.all.sbys.fam <- rbind(data.frame(prev.pareto.seasonal.all.nat.fam, Key = 'No Weighting'), data.frame(prev.pareto.seasonal.all.census.fam, Key = 'Population Weighted'))
ggplot(prev.pareto.seasonal.all.sbys.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys.ind, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.sbys.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys.fam, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_SideBySide <- ggplot(prev.pareto.seasonal.all.sbys, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_Individual_SideBySide <- ggplot(prev.pareto.seasonal.all.sbys.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys.ind, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoSeasonal_Family_SideBySide <- ggplot(prev.pareto.seasonal.all.sbys.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.sbys.fam, 'Key'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
plots
rm(p.a.cdc)
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
print(plots[i])
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
dev.off()
ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
head(prev.pareto.seasonal.all.year)
head(prev.pareto.seasonal.all.year.ind)
head(prev.pareto.seasonal.all.year.fam)
heaD(prev.pareto.seasonal.all.year)
head(prev.pareto.seasonal.all.year)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all, aggregate(cbind(Runs, Positives)~SeasonYear+ShortName+Code+CustomerSiteId, FUN=sum))
prev.pareto.seasonal.all.year$Prevalence <- with(prev.pareto.seasonal.all.year, Positives/Runs)
prev.pareto.seasonal.all.year <- with(prev.pareto.seasonal.all.year, aggregate(Prevalence~SeasonYear+ShortName+Code, FUN=mean))
prev.pareto.seasonal.all.year$Name <- factor(prev.pareto.seasonal.all.year$ShortName, levels = label.order.seasonal.all)
prev.pareto.seasonal.all.year.ind <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('v','w','x','y')), ]
prev.pareto.seasonal.all.year.fam <- prev.pareto.seasonal.all.year[!(prev.pareto.seasonal.all.year$Code %in% c('b','c','d','e','f','g','j','k','l','m','o','p','q','r','s')), ]
prev.pareto.seasonal.all.year.ind$Name <- factor(prev.pareto.seasonal.all.year.ind$ShortName, levels = label.order.season.ind)
prev.pareto.seasonal.all.year.fam$Name <- factor(prev.pareto.seasonal.all.year.fam$ShortName, levels = label.order.seasonal.fam)
ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal <- ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal_Individual <- ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p.PercentDetectionParetoAnnualSeasonal_Family <- ggplot(subset(prev.pareto.seasonal.all.year.fam, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
workDir <-'~/FilmArrayTrend/InitialPublication/'
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
require(dateManip)
# load custom functions
source('../Rfunctions/normalizeBurnRate.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
head(runs.reg.date)
if(TRUE) {
workDir <-'~/FilmArrayTrend/InitialPublication/'
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
require(dateManip)
# load custom functions
source('../Rfunctions/normalizeBurnRate.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
# dual axes for ILI overlay plots
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# read in the data from FilmArray Data Warehouse DB (ODBC object in Windows "FA_DW" with Lindsay's credentials)
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/AllSitesRespiratoryTrendableRuns.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/PositiveBugsRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
bugs.df <- sqlQuery(FADWcxn,query)
bugs.df <- bugs.df[bugs.df$BugPositive != 'Bocavirus',]
queryVector <- scan('../DataSources/ShortNames.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
shortnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/NationalDataILI.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
cdc.nat.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
# read in data from PMS PROD server
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- scan('../DataSources/AllSitesRegionKey.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
regions.df <- sqlQuery(PMScxn,query)
odbcClose(PMScxn)
# read in data from Excel files
cdc.reg.df <- read.csv('../DataSources/RegionalILI.csv', header=TRUE, sep=',')
# make an epi calendar
calendar.df <- transformToEpiWeeks(createCalendarLikeMicrosoft(2012, 'Week'))
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df <- calendar.df[calendar.df$YearWeek > '2012-51', ]
calendar.df$Days <- 1
# now rerun the code that is in the Publication_Update main.R file to see what the data looks like now
runs.reg <- merge(runs.df, data.frame(Province = regions.df$StateAbv, Region = regions.df$CensusRegionLocal), by='Province')
runs.reg$Record <- 1
runs.reg.date <- merge(runs.reg[,c('RunDataId','Instrument','Date','Name','CustomerSiteId','Region','Record')], calendar.df[,c('Date','Year','Week','YearWeek')], by='Date')
# create a data frame that will show site name and id with its region and census region
sitesByCensusRegions.etc <- unique(merge(unique(runs.reg.date[,c('CustomerSiteId','Name','Region')]), regions.df, by.x='Region', by.y='CensusRegionLocal')[,c('CustomerSiteId','Name','Region','CensusRegionNational')])
# clean up the data frame that holds the cdc regional data
cdc.reg.df <- data.frame(Year = cdc.reg.df$YEAR, Week = cdc.reg.df$WEEK, Region = cdc.reg.df$REGION, ILITotal = cdc.reg.df$ILITOTAL, TotalPatients = cdc.reg.df$TOTAL.PATIENTS)
cdc.reg.df$YearWeek <- with(cdc.reg.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
# roll the total patient count and the total ILI count such that it is a centered 3-week rolling sum
cdc.reg.count.df <- do.call(rbind, lapply(1:length(unique(cdc.reg.df$Region)), function(x)  data.frame(YearWeek =  cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'][2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'])-1)], Region = unique(cdc.reg.df$Region)[x], TotalPatients = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'TotalPatients'])), ILITotal = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'ILITotal'])))))
}
# ------------------------------------------ MAKE FIGURES -----------------------------------------------------------------------------
# TIME SERIES OF PREVALENCE
if(TRUE) {
# find out which sites should be used calling the normalizeBurnRate function (which looks for gaps in the site data) and then using the output
# to determine when the start date is of 'good' data contribution for each site
var <- 'CustomerSiteId'
sites <- unique(runs.reg.date$CustomerSiteId)
runs.reg.norm <- c()
for(i in 1:length(sites)) {
site.norm <- normalizeBurnRate(runs.reg.date, var, sites[i])
runs.reg.norm <- rbind(runs.reg.norm, site.norm)
}
site.starts <- do.call(rbind, lapply(1:length(unique(runs.reg.norm$CustomerSiteId)), function(x) data.frame(CustomerSiteId = unique(runs.reg.norm$CustomerSiteId)[x], StartDate = min(runs.reg.norm[runs.reg.norm$CustomerSiteId==unique(runs.reg.norm$CustomerSiteId)[x],'YearWeek']))))
# using only sites with enough data, find the prevalence of organisms
# sites <- site.starts[!(is.na(site.starts$StartDate)) & substring(site.starts$StartDate, 1, 4) < 2016, 'CustomerSiteId']
sites <- as.character(unique(runs.reg.norm$CustomerSiteId))
sites <- sites[order(sites)]
bugs.reg <- c()
for(i in 1:length(sites)) {
site <- sites[i]
temp <- runs.reg.date[runs.reg.date$CustomerSiteId == site, ]
bugs.site <- merge(temp, bugs.df, by='RunDataId')
bugs.reg <- rbind(bugs.reg, bugs.site)
}
# make a combined category so that do.call can be used to fill in empty dates
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
bugs.reg.trim$Record <- 1
bugs <- as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
bugs.reg.trim <- rbind(bugs.reg.trim, data.frame(YearWeek = min(bugs.reg.trim$YearWeek), merge(site.missing.bugs, unique(bugs.reg.trim[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0))
bugs.reg.trim$combocat <- do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
bugs.reg.combo <- do.call(rbind, lapply(1:length(unique(bugs.reg.trim$combocat)), function(x) cbind(merge(unique(calendar.df[,c('YearWeek','Year')]), bugs.reg.trim[bugs.reg.trim$combocat == unique(bugs.reg.trim$combocat)[x], c('YearWeek','Record')], by='YearWeek', all.x=TRUE), ComboCat = unique(bugs.reg.trim$combocat)[x])))
deCombo <- as.data.frame(sapply(1:length(colsToCat), function(x) do.call(rbind, strsplit(as.character(bugs.reg.combo$ComboCat), split=','))[,x]))
colnames(deCombo) <- colsToCat
bugs.reg.fill <- cbind(bugs.reg.combo[,c('YearWeek','Record')], deCombo)
bugs.reg.fill[is.na(bugs.reg.fill$Record),'Record'] <- 0
bugs.reg.agg <- with(bugs.reg.fill, aggregate(Record~YearWeek+Region+Name+CustomerSiteId+BugPositive, FUN=sum))
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
runs.reg.roll <- runs.reg.norm[,c('YearWeek','CustomerSiteId','RollRuns')]
colnames(runs.reg.roll) <- c('YearWeek','CustomerSiteId','Runs')
# get the 3-week centered moving sum of bug positives and runs
positives.count.all <- merge(runs.reg.roll, bugs.reg.roll, by=c('YearWeek','CustomerSiteId'))
decoder <- data.frame(Bug = bugs, Code = letters[1:length(bugs)])
prevalence.reg.agg <- merge(subset(positives.count.all, as.character(YearWeek) >= '2013-25'), cdc.reg.count.df, by=c('YearWeek','Region'), all.x=TRUE)
prevalence.reg.agg$Rate <- with(prevalence.reg.agg, ILITotal/TotalPatients)
prevalence.reg.agg$Prevalence <- with(prevalence.reg.agg, Positives/Runs)
# DO I NEED TO ADD SOMETHING TO TAKE OUT WEEKS WHERE THERE ARE LESS THAN 10 ROLLING RUNS????
prevalence.reg.agg[prevalence.reg.agg$Runs < 30, 'Prevalence'] <- NA
# DO I NEED TO ADD SOMETHING TO TAKE OUT WEEKS WHERE THERE ARE LESS THAN 10 ROLLING RUNS????
prevalence.reg.wrap <- merge(prevalence.reg.agg[,c('Bug','Code','YearWeek','CustomerSiteId','Rate','Prevalence')], shortnames.df, by.x='Bug', by.y='Organism')
prevalence.nat.individual.wrap <- with(prevalence.reg.wrap, aggregate(cbind(Rate, Prevalence)~YearWeek+Bug+Code+ShortName, FUN=mean, na.action=na.omit))
# now make the figures and break out by organisms and type
bacterias <- as.character(decoder[decoder$Code %in% c('b','c','p'), 'Bug'])
rhino <- 'Human Rhinovirus/Enterovirus'
fluAs <- as.character(decoder[grep('Influenza A', decoder$Bug),'Bug'])
fluBs <- as.character(decoder[grep('Influenza B', decoder$Bug),'Bug'])
rsv <- 'Respiratory Syncytial Virus'
flus <- as.character(decoder[grep('Influenza', decoder$Bug),'Bug'])
pivs <- as.character(decoder[grep('Parainfluenza', decoder$Bug),'Bug'])
corona <- as.character(decoder[grep('Corona', decoder$Bug),'Bug'])
adeno <- 'Adenovirus'
hmp <- 'Human Metapneumovirus'
# create beautiful time-series prevalence chart
bug.individual.Pal <- createPaletteOfVariableLength(prevalence.nat.individual.wrap, 'ShortName')
# dateBreaks <- as.character(unique(prevalence.nat.individual.wrap$YearWeek))[order(as.character(unique(prevalence.nat.individual.wrap$YearWeek)))][seq(1, length(as.character(unique(prevalence.nat.individual.wrap$YearWeek))), 8)]
dateBreaks <- c('2013-27','2013-40','2014-01', '2014-14','2014-27','2014-40','2015-01', '2015-14','2015-27','2015-40','2016-01','2016-14','2016-27','2016-40','2017-01')
dateLabels <- c('Jul-2013','-','Jan-2014','-','Jul-2014','-','Jan-2015','-','Jul-2015','-','Jan-2016','-','Jul-2016','-','Jan-2017')
p.PercentDetectionTrend <- ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
# now do the same thing, but weight by population
# https://www.census.gov/popclock/data_tables.php?component=growth
population.dist.2016 <- data.frame(CensusRegionNational = c('Northeast','Midwest','West','South'), PopulationPercent = c(0.174, 0.21, 0.237, 0.379))
prevalence.reg.census.wrap <- merge(merge(prevalence.reg.agg[,c('Bug','Code','YearWeek','CustomerSiteId','Rate','Runs','Positives')], shortnames.df, by.x='Bug', by.y='Organism'), unique(sitesByCensusRegions.etc[,c('CustomerSiteId','CensusRegionNational')]), by='CustomerSiteId')
prevalence.reg.census.agg <- with(prevalence.reg.census.wrap, aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))
prevalence.reg.census.agg$Prevalence <- with(prevalence.reg.census.agg, Positives/Runs)
prevalence.reg.census.agg <- with(prevalence.reg.census.agg, aggregate(Prevalence~YearWeek+CensusRegionNational+ShortName, FUN=mean))
prevalence.nat.census.individual <- merge(prevalence.reg.census.agg, population.dist.2016, by='CensusRegionNational')
prevalence.nat.census.individual$WeightedPrevalence <- with(prevalence.nat.census.individual, Prevalence*PopulationPercent)
prevalence.nat.census.individual <- with(prevalence.nat.census.individual, aggregate(WeightedPrevalence~YearWeek+ShortName, FUN=sum))
p.PercentDetectionTrend_Weighted <- ggplot(prevalence.nat.census.individual[with(prevalence.nat.census.individual, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
# create the same chart, but group the organims into families
positives.count.all <- positives.count.all[with(positives.count.all, order(CustomerSiteId, Code, YearWeek)), ]
sites <- sites[order(as.numeric(sites))]
prevalence.reg.count <- data.frame(do.call(rbind, lapply(1:length(sites), function(x) do.call(cbind, lapply(1:length(bugs), function(y) positives.count.all[positives.count.all$CustomerSiteId==sites[x] & positives.count.all$Code==letters[y], 'Positives'])))))
colnames(prevalence.reg.count) <- letters[1:length(prevalence.reg.count[1,])]
prevalence.reg.count <- data.frame(unique(positives.count.all[,c('YearWeek','CustomerSiteId','Region','Name','Runs')]), prevalence.reg.count)
# sum by family
prevalence.nat.fluA <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza A', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluAs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.fluB <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Influenza B', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% fluBs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.bacteria <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Bacteria', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% bacterias,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rhino <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'HRV/EV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rhino,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.adeno <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Adeno', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% adeno,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.pivs <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Parainfluenza', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% pivs,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.corona <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'Coronavirus', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% corona,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.hmp <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'hMPV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% hmp,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.rsv <- with(do.call(rbind, lapply(1:length(unique(prevalence.reg.count$CustomerSiteId)), function(x) data.frame(YearWeek = prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'], CustomerSiteId = unique(prevalence.reg.count$CustomerSiteId)[x], Key = 'RSV', Prevalence = sapply(1:length(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek']), function(y) sum(prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y], as.character(decoder[decoder$Bug %in% rsv,'Code'])])/prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x] & prevalence.reg.count$YearWeek==prevalence.reg.count[prevalence.reg.count$CustomerSiteId==unique(prevalence.reg.count$CustomerSiteId)[x],'YearWeek'][y],'Runs'])))), aggregate(Prevalence~YearWeek+Key, FUN=mean))
prevalence.nat.families <- rbind(prevalence.nat.fluA, prevalence.nat.fluB, prevalence.nat.bacteria, prevalence.nat.rhino, prevalence.nat.adeno, prevalence.nat.hmp, prevalence.nat.pivs, prevalence.nat.corona, prevalence.nat.rsv)
bug.family.Pal <- c(bug.individual.Pal[names(bug.individual.Pal) == 'Flu A'], bug.individual.Pal[names(bug.individual.Pal) == 'FluB'], bug.individual.Pal[names(bug.individual.Pal) %in% as.character(unique(prevalence.nat.families$Key))], bug.individual.Pal[names(bug.individual.Pal) == 'CoV NL63'], bug.individual.Pal[names(bug.individual.Pal) == 'PIV3'], bug.individual.Pal[names(bug.individual.Pal) == 'C. pne'])
names(bug.family.Pal) <- c('Influenza A', 'Influenza B', 'Adeno', 'hMPV', 'HRV/EV', 'RSV', 'Coronavirus', 'Parainfluenza', 'Bacteria')
prevalence.nat.families$Name <- factor(prevalence.nat.families$Key, levels=unique(prevalence.nat.families[with(prevalence.nat.families, order(as.character(Key))), 'Key']))
prevalence.nat.families <- prevalence.nat.families[as.character(prevalence.nat.families$YearWeek) >= '2013-26', ]
p.PercentDetectionTrend_Grouped <- ggplot(prevalence.nat.families[with(prevalence.nat.families, order(Name, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name, order=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), breaks=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='', y='Detection (%)', x='Date')
# now do the same thing, but weight by population
prevalence.reg.census.agg.fam <- with(prevalence.reg.census.wrap, aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))
prevalence.census.fluA <- with(prevalence.reg.census.agg.fam[grep('Flu A|FluA', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.fluA$ShortName <- 'Influenza A'
prevalence.census.corona <- with(prevalence.reg.census.agg.fam[grep('CoV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.corona$ShortName <- 'Coronavirus'
prevalence.census.pivs <- with(prevalence.reg.census.agg.fam[grep('PIV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.pivs$ShortName <- 'Parainfluenza'
prevalence.census.bacteria <- with(prevalence.reg.census.agg.fam[grep('B. per|C. pne|M. pne', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId, FUN=sum))
prevalence.census.bacteria$ShortName <- 'Bacteria'
prevalence.census.other <- with(prevalence.reg.census.agg.fam[grep('Adeno|FluB|hMPV|HRV/EV|RSV', prevalence.reg.census.agg.fam$ShortName), ], aggregate(cbind(Runs, Positives)~YearWeek+CensusRegionNational+CustomerSiteId+ShortName, FUN=sum))[,c('YearWeek','CensusRegionNational','CustomerSiteId','Runs','Positives','ShortName')]
prevalence.census.families <- rbind(prevalence.census.fluA, prevalence.census.corona, prevalence.census.pivs, prevalence.census.bacteria, prevalence.census.other)
prevalence.census.families$Prevalence <- with(prevalence.census.families, Positives/Runs)
prevalence.census.families <- with(prevalence.census.families, aggregate(Prevalence~YearWeek+CensusRegionNational+ShortName, FUN=mean))
# now merge with population fraction and weight... then make the chart
prevalence.census.families <- merge(prevalence.census.families, population.dist.2016, by='CensusRegionNational')
prevalence.census.families$WeightedPrevalence <- with(prevalence.census.families, Prevalence*PopulationPercent)
prevalence.census.nat.families <- with(prevalence.census.families, aggregate(WeightedPrevalence~YearWeek+ShortName, FUN=sum))
prevalence.census.nat.families[grep('FluB', prevalence.census.nat.families$ShortName), 'ShortName'] <- 'Influenza B'
p.PercentDetectionTrend_Grouped_Weighted <- ggplot(prevalence.census.nat.families[with(prevalence.census.nat.families, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=WeightedPrevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.family.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), breaks=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + labs(title='', y='Detection (%)', x='Date')
}
p.PercentDetectionTrend
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
