ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06')) + facet_wrap(~CensusRegionNational)
ggplot(reg.turn.prev, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, group=CensusRegionNational, order=CensusRegionNational, fill='HRV/EV Detection'), stat='identity', position='stack') + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + facet_wrap(~CensusRegionNational) + scale_fill_manual(values=c('grey'), name='')
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + facet_wrap(~CensusRegionNational) + scale_fill_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_fill_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_color_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_color_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/AllSitesRespiratoryTrendableRuns.txt', what=character(), quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/PositiveBugsRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
bugs.df <- sqlQuery(FADWcxn,query)
bugs.df <- bugs.df[bugs.df$BugPositive != 'Bocavirus',]
queryVector <- scan('../DataSources/ShortNames.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
shortnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/NationalDataILI.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
cdc.nat.df <- sqlQuery(FADWcxn,query)
query <- paste(readLines('../DataSources/SQL/DataCleaningOfQcRuns/qcRunsFromFirstLotTest.sql'), collapse='\n')
clean.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
# read in data from PMS PROD server
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- scan('../DataSources/AllSitesRegionKey.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
regions.df <- sqlQuery(PMScxn,query)
odbcClose(PMScxn)
# read in data from Excel files
cdc.reg.df <- read.csv('../DataSources/RegionalILI.csv', header=TRUE, sep=',')
# make an epi calendar
calendar.df <- transformToEpiWeeks(createCalendarLikeMicrosoft(2012, 'Week'))
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df <- calendar.df[calendar.df$YearWeek > '2012-51', ]
calendar.df$Days <- 1
# now rerun the code that is in the Publication_Update main.R file to see what the data looks like now
runs.reg <- merge(runs.df, data.frame(Province = regions.df$StateAbv, Region = regions.df$CensusRegionLocal), by='Province')
runs.reg$Record <- 1
runs.reg.date <- merge(runs.reg[,c('RunDataId','Instrument','Date','Name','CustomerSiteId','Region','Record')], calendar.df[,c('Date','Year','Week','YearWeek')], by='Date')
# create a data frame that will show site name and id with its region and census region
sitesByCensusRegions.etc <- unique(merge(unique(runs.reg.date[,c('CustomerSiteId','Name','Region')]), regions.df, by.x='Region', by.y='CensusRegionLocal')[,c('CustomerSiteId','Name','Region','CensusRegionNational')])
# clean up the data frame that holds the cdc regional data
cdc.reg.df <- data.frame(Year = cdc.reg.df$YEAR, Week = cdc.reg.df$WEEK, Region = cdc.reg.df$REGION, ILITotal = cdc.reg.df$ILITOTAL, TotalPatients = cdc.reg.df$TOTAL.PATIENTS)
cdc.reg.df$YearWeek <- with(cdc.reg.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
# roll the total patient count and the total ILI count such that it is a centered 3-week rolling sum
cdc.reg.count.df <- do.call(rbind, lapply(1:length(unique(cdc.reg.df$Region)), function(x)  data.frame(YearWeek =  cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'][2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'])-1)], Region = unique(cdc.reg.df$Region)[x], TotalPatients = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'TotalPatients'])), ILITotal = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'ILITotal'])))))
# find out which sites should be used calling the normalizeBurnRate function (which looks for gaps in the site data) and then using the output
# to determine when the start date is of 'good' data contribution for each site
var <- 'CustomerSiteId'
sites <- unique(runs.reg.date$CustomerSiteId)
runs.reg.norm <- c()
for(i in 1:length(sites)) {
site.norm <- normalizeBurnRate(runs.reg.date, var, sites[i])
runs.reg.norm <- rbind(runs.reg.norm, site.norm)
}
site.starts <- do.call(rbind, lapply(1:length(unique(runs.reg.norm$CustomerSiteId)), function(x) data.frame(CustomerSiteId = unique(runs.reg.norm$CustomerSiteId)[x], StartDate = min(runs.reg.norm[runs.reg.norm$CustomerSiteId==unique(runs.reg.norm$CustomerSiteId)[x],'YearWeek']))))
# using only sites with enough data, find the prevalence of organisms
# sites <- site.starts[!(is.na(site.starts$StartDate)) & substring(site.starts$StartDate, 1, 4) < 2016, 'CustomerSiteId']
sites <- as.character(unique(runs.reg.norm$CustomerSiteId))
sites <- sites[order(sites)]
bugs.reg <- c()
for(i in 1:length(sites)) {
site <- sites[i]
temp <- runs.reg.date[runs.reg.date$CustomerSiteId == site, ]
bugs.site <- merge(temp, bugs.df, by='RunDataId')
bugs.reg <- rbind(bugs.reg, bugs.site)
}
# make a combined category so that do.call can be used to fill in empty dates
colsToCat <- c('Region','Name','CustomerSiteId','BugPositive')
bugs.reg.trim <- bugs.reg[,c('YearWeek', colsToCat)]
bugs.reg.trim$Record <- 1
bugs <- as.character(unique(bugs.reg.trim$BugPositive))[order(as.character(unique(bugs.reg.trim$BugPositive)))]
site.missing.bugs <- do.call(rbind, lapply(1:length(sites), function(x) data.frame(CustomerSiteId = sites[x], BugPositive = ifelse(length(bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))]) > 0, bugs[!(bugs %in% unique(as.character(bugs.reg.trim[bugs.reg.trim$CustomerSiteId==sites[x], 'BugPositive'])))], NA))))
site.missing.bugs <- site.missing.bugs[!(is.na(site.missing.bugs$BugPositive)), ]
bugs.reg.trim <- rbind(bugs.reg.trim, data.frame(YearWeek = min(bugs.reg.trim$YearWeek), merge(site.missing.bugs, unique(bugs.reg.trim[,c('CustomerSiteId','Region','Name')]), by='CustomerSiteId')[,c('Region','Name','CustomerSiteId','BugPositive')], Record = 0))
bugs.reg.trim$combocat <- do.call(paste, c(bugs.reg.trim[,colsToCat], sep=','))
bugs.reg.combo <- do.call(rbind, lapply(1:length(unique(bugs.reg.trim$combocat)), function(x) cbind(merge(unique(calendar.df[,c('YearWeek','Year')]), bugs.reg.trim[bugs.reg.trim$combocat == unique(bugs.reg.trim$combocat)[x], c('YearWeek','Record')], by='YearWeek', all.x=TRUE), ComboCat = unique(bugs.reg.trim$combocat)[x])))
deCombo <- as.data.frame(sapply(1:length(colsToCat), function(x) do.call(rbind, strsplit(as.character(bugs.reg.combo$ComboCat), split=','))[,x]))
colnames(deCombo) <- colsToCat
bugs.reg.fill <- cbind(bugs.reg.combo[,c('YearWeek','Record')], deCombo)
bugs.reg.fill[is.na(bugs.reg.fill$Record),'Record'] <- 0
bugs.reg.agg <- with(bugs.reg.fill, aggregate(Record~YearWeek+Region+Name+CustomerSiteId+BugPositive, FUN=sum))
bugs.reg.roll <- do.call(rbind, lapply(1:length(sites), function(x) do.call(rbind, lapply(1:length(bugs), function(y) data.frame(YearWeek = bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'][2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1)], CustomerSiteId = sites[x], Region = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Region']), Name = unique(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x],'Name']), Bug = bugs[y], Code = letters[y], Positives = sapply(2:(length(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y], 'YearWeek'])-1), function(z) sum(bugs.reg.agg[bugs.reg.agg$CustomerSiteId==sites[x] & bugs.reg.agg$BugPositive==bugs[y],'Record'][(z-1):(z+1)])))))))
runs.reg.roll <- runs.reg.norm[,c('YearWeek','CustomerSiteId','RollRuns')]
colnames(runs.reg.roll) <- c('YearWeek','CustomerSiteId','Runs')
# get the 3-week centered moving sum of bug positives and runs
positives.count.all <- merge(runs.reg.roll, bugs.reg.roll, by=c('YearWeek','CustomerSiteId'))
decoder <- data.frame(Bug = bugs, Code = letters[1:length(bugs)])
prevalence.reg.agg <- merge(subset(positives.count.all, as.character(YearWeek) >= '2013-25'), cdc.reg.count.df, by=c('YearWeek','Region'), all.x=TRUE)
prevalence.reg.agg$Rate <- with(prevalence.reg.agg, ILITotal/TotalPatients)
prevalence.reg.agg$Prevalence <- with(prevalence.reg.agg, Positives/Runs)
# DO I NEED TO ADD SOMETHING TO TAKE OUT WEEKS WHERE THERE ARE LESS THAN 10 ROLLING RUNS????
prevalence.reg.agg[prevalence.reg.agg$Runs < 30, 'Prevalence'] <- NA
# DO I NEED TO ADD SOMETHING TO TAKE OUT WEEKS WHERE THERE ARE LESS THAN 10 ROLLING RUNS????
prevalence.reg.wrap <- merge(prevalence.reg.agg[,c('Bug','Code','YearWeek','CustomerSiteId','Rate','Prevalence')], shortnames.df, by.x='Bug', by.y='Organism')
prevalence.nat.individual.wrap <- with(prevalence.reg.wrap, aggregate(cbind(Rate, Prevalence)~YearWeek+Bug+Code+ShortName, FUN=mean, na.action=na.omit))
# for EV-D68, make a data frame that has the HRV/EV percent detection by region
prev.evd68.reg <- merge(prevalence.reg.agg[prevalence.reg.agg$Code=='i', c('YearWeek','Region','CustomerSiteId','Prevalence')], unique(regions.df[,c('CensusRegionLocal','CensusRegionNational')]), by.x='Region', by.y='CensusRegionLocal')
prev.evd68.reg.agg <- with(prev.evd68.reg, aggregate(Prevalence~YearWeek+CensusRegionNational, FUN=mean))
# now make the figures and break out by organisms and type
bacterias <- as.character(decoder[decoder$Code %in% c('b','c','p'), 'Bug'])
rhino <- 'Human Rhinovirus/Enterovirus'
fluAs <- as.character(decoder[grep('Influenza A', decoder$Bug),'Bug'])
fluBs <- as.character(decoder[grep('Influenza B', decoder$Bug),'Bug'])
rsv <- 'Respiratory Syncytial Virus'
flus <- as.character(decoder[grep('Influenza', decoder$Bug),'Bug'])
pivs <- as.character(decoder[grep('Parainfluenza', decoder$Bug),'Bug'])
corona <- as.character(decoder[grep('Corona', decoder$Bug),'Bug'])
adeno <- 'Adenovirus'
hmp <- 'Human Metapneumovirus'
# create beautiful time-series prevalence chart
bug.individual.Pal <- createPaletteOfVariableLength(prevalence.nat.individual.wrap, 'ShortName')
# dateBreaks <- as.character(unique(prevalence.nat.individual.wrap$YearWeek))[order(as.character(unique(prevalence.nat.individual.wrap$YearWeek)))][seq(1, length(as.character(unique(prevalence.nat.individual.wrap$YearWeek))), 8)]
dateBreaks <- c('2013-27','2013-40','2014-01', '2014-14','2014-27','2014-40','2015-01', '2015-14','2015-27','2015-40','2016-01','2016-14','2016-27','2016-40','2017-01')
dateLabels <- c('Jul-2013','-','Jan-2014','-','Jul-2014','-','Jan-2015','-','Jul-2015','-','Jan-2016','-','Jul-2016','-','Jan-2017')
runs.reg.norm.trim <- merge(runs.reg.norm[, c('YearWeek','Year','Week','CustomerSiteId','RollRuns','NormRollRate','NormRollRateByInst','NormalizedBurn')], unique(runs.reg[,c('CustomerSiteId','Name','Region')]), by='CustomerSiteId')
runs.reg.norm.ili <- merge(runs.reg.norm.trim, data.frame(YearWeek = cdc.reg.count.df$YearWeek, Region = cdc.reg.count.df$Region, Rate = with(cdc.reg.count.df, ILITotal/TotalPatients)), by=c('YearWeek','Region'), all.x=TRUE)
ili.burn.nat <- with(runs.reg.norm.ili, aggregate(cbind(Rate, NormalizedBurn)~YearWeek, FUN=mean))
add.back.burn <- data.frame(with(runs.reg.norm.ili[!(runs.reg.norm.ili$YearWeek %in% ili.burn.nat$YearWeek) & runs.reg.norm.ili$YearWeek > max(ili.burn.nat$YearWeek), ], aggregate(NormalizedBurn~YearWeek, FUN=mean)), Rate = NA)
ili.burn.nat <- rbind(ili.burn.nat, add.back.burn[,c('YearWeek','Rate','NormalizedBurn')])
# dateBreaksAlt <- c('2013-26','2013-39','2013-52',dateBreaks)
# dateLabelsAlt <- c('--','','',dateLabels)
# here, make some aggregate regionally
runs.reg.avg <- merge(runs.reg.norm.trim, unique(regions.df[,c('CensusRegionLocal','CensusRegionNational')]), by.x='Region', by.y='CensusRegionLocal')
runs.reg.avg <- with(runs.reg.avg, aggregate(NormalizedBurn~YearWeek+CensusRegionNational, FUN=mean))
# p.TURN.ByRegion <- ggplot(runs.reg.avg, aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational)) + geom_line(size=1.5) + facet_wrap(~CensusRegionNational) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels)
# p.TURN.ByRegion <- ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational)) + geom_line(size=1.5) + facet_wrap(~CensusRegionNational) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels)
# runs.reg.avg$Spline <- smooth.spline(seq(1, length(runs.reg.avg$YearWeek), 1), runs.reg.avg$NormalizedBurn)
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
p.TURN.ByRegion <- ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
reg.turn.prev <- merge(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], prev.evd68.reg.agg, by=c('YearWeek','CensusRegionNational'))
p.HRV.ByRegion <- ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_color_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
plots <- ls()[grep('^p\\.',ls())]
for(i in 1:length(plots)) {
imgName <- paste(substring(plots[i],3),'.png',sep='')
png(file=paste('Figures', imgName, sep='/'), width=1200, height=800, units='px')
print(eval(parse(text = plots[i])))
dev.off()
}
p.TURN.ByRegion
dev.off()
p.TURN.ByRegion
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
grid.newpage()
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
ggplot()
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
library(dplyr)
library(tidyr)
require(dateManip)
# load custom functions
source('../Rfunctions/normalizeBurnRate.R')
source('../Rfunctions/generateCombosBetter.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
# dual axes for ILI overlay plots
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
p.TURN.ByRegion <- ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
p.TURN.ByRegion
dev.off()
ggplot(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], aes(x=YearWeek, y=NormalizedBurn, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, face='bold', color='black'), axis.text.x=element_text(angle=90, hjust=1), axis.ticks.x=element_blank(), panel.background=element_rect(fill='white', color='white'), legend.position = 'bottom') + labs(x='Date', y='TURN') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_color_manual(name='', values=c('#5053C4','#BD0730','#109031','#F59A06'))
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
library(dplyr)
library(tidyr)
require(dateManip)
p.HRV.ByRegion
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_color_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
reg.turn.prev <- merge(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], prev.evd68.reg.agg, by=c('YearWeek','CensusRegionNational'))
prev.evd68.reg <- merge(prevalence.reg.agg[prevalence.reg.agg$Code=='i', c('YearWeek','Region','CustomerSiteId','Prevalence')], unique(regions.df[,c('CensusRegionLocal','CensusRegionNational')]), by.x='Region', by.y='CensusRegionLocal')
prev.evd68.reg.agg <- with(prev.evd68.reg, aggregate(Prevalence~YearWeek+CensusRegionNational, FUN=mean))
reg.turn.prev <- merge(runs.reg.avg[runs.reg.avg$YearWeek >= '2014-25', ], prev.evd68.reg.agg, by=c('YearWeek','CensusRegionNational'))
ggplot(reg.turn.prev, aes(x=YearWeek, y=Prevalence, group=CensusRegionNational, color=CensusRegionNational)) + geom_line(size=1.5) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + scale_color_manual(values=c('#5053C4','#BD0730','#109031','#F59A06'), name='')
head(reg.turn.prev)
ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0, 0.6), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6), labels=c(0, 10, 20, 30, 40, 50, 60)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(y='Detection (%)', x='Date')
ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino & YearWeek >= '2014-26'), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0, 0.6), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6), labels=c(0, 10, 20, 30, 40, 50, 60)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(y='Detection (%)', x='Date')
p.HRV.National <- ggplot(subset(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], Bug %in% rhino & YearWeek >= '2014-26'), aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks = dateBreaks, labels = dateLabels) + scale_y_continuous(limits=c(0, 0.6), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6), labels=c(0, 10, 20, 30, 40, 50, 60)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank())  + labs(y='Detection (%)', x='Date')
m
b
workDir <-'~/FilmArrayTrend/InitialPublication/'
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
library(dplyr)
library(tidyr)
require(dateManip)
# load custom functions
source('../Rfunctions/normalizeBurnRate.R')
source('../Rfunctions/generateCombosBetter.R')
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
# dual axes for ILI overlay plots
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# read in the data from FilmArray Data Warehouse DB (ODBC object in Windows "FA_DW" with Lindsay's credentials)
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- scan('../DataSources/AllSitesRespiratoryTrendableRuns.txt', what=character(), quote="")
query <- paste(queryVector,collapse=" ")
runs.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/PositiveBugsRP.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
bugs.df <- sqlQuery(FADWcxn,query)
bugs.df <- bugs.df[bugs.df$BugPositive != 'Bocavirus',]
queryVector <- scan('../DataSources/ShortNames.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
shortnames.df <- sqlQuery(FADWcxn,query)
queryVector <- scan('../DataSources/NationalDataILI.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
cdc.nat.df <- sqlQuery(FADWcxn,query)
query <- paste(readLines('../DataSources/SQL/DataCleaningOfQcRuns/qcRunsFromFirstLotTest.sql'), collapse='\n')
clean.df <- sqlQuery(FADWcxn, query)
odbcClose(FADWcxn)
# read in data from PMS PROD server
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- scan('../DataSources/AllSitesRegionKey.txt',what=character(),quote="")
query <- paste(queryVector,collapse=" ")
regions.df <- sqlQuery(PMScxn,query)
odbcClose(PMScxn)
# read in data from Excel files
cdc.reg.df <- read.csv('../DataSources/RegionalILI.csv', header=TRUE, sep=',')
# make an epi calendar
calendar.df <- transformToEpiWeeks(createCalendarLikeMicrosoft(2012, 'Week'))
calendar.df$YearWeek <- with(calendar.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
calendar.df <- calendar.df[calendar.df$YearWeek > '2012-51', ]
calendar.df$Days <- 1
# now rerun the code that is in the Publication_Update main.R file to see what the data looks like now
runs.reg <- merge(runs.df, data.frame(Province = regions.df$StateAbv, Region = regions.df$CensusRegionLocal), by='Province')
runs.reg$Record <- 1
runs.reg.date <- merge(runs.reg[,c('RunDataId','Instrument','Date','Name','CustomerSiteId','Region','Record')], calendar.df[,c('Date','Year','Week','YearWeek')], by='Date')
# create a data frame that will show site name and id with its region and census region
sitesByCensusRegions.etc <- unique(merge(unique(runs.reg.date[,c('CustomerSiteId','Name','Region')]), regions.df, by.x='Region', by.y='CensusRegionLocal')[,c('CustomerSiteId','Name','Region','CensusRegionNational')])
# clean up the data frame that holds the cdc regional data
cdc.reg.df <- data.frame(Year = cdc.reg.df$YEAR, Week = cdc.reg.df$WEEK, Region = cdc.reg.df$REGION, ILITotal = cdc.reg.df$ILITOTAL, TotalPatients = cdc.reg.df$TOTAL.PATIENTS)
cdc.reg.df$YearWeek <- with(cdc.reg.df, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))
# roll the total patient count and the total ILI count such that it is a centered 3-week rolling sum
cdc.reg.count.df <- do.call(rbind, lapply(1:length(unique(cdc.reg.df$Region)), function(x)  data.frame(YearWeek =  cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'][2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x], 'YearWeek'])-1)], Region = unique(cdc.reg.df$Region)[x], TotalPatients = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'TotalPatients'])), ILITotal = sapply(2:(length(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],'YearWeek'])-1), function(y) sum(cdc.reg.df[cdc.reg.df$Region == unique(cdc.reg.df$Region)[x],][(y-1):(y+1), 'ILITotal'])))))
# find out which sites should be used calling the normalizeBurnRate function (which looks for gaps in the site data) and then using the output
# to determine when the start date is of 'good' data contribution for each site
var <- 'CustomerSiteId'
sites <- unique(runs.reg.date$CustomerSiteId)
runs.reg.norm <- c()
for(i in 1:length(sites)) {
site.norm <- normalizeBurnRate(runs.reg.date, var, sites[i])
runs.reg.norm <- rbind(runs.reg.norm, site.norm)
}
site.starts <- do.call(rbind, lapply(1:length(unique(runs.reg.norm$CustomerSiteId)), function(x) data.frame(CustomerSiteId = unique(runs.reg.norm$CustomerSiteId)[x], StartDate = min(runs.reg.norm[runs.reg.norm$CustomerSiteId==unique(runs.reg.norm$CustomerSiteId)[x],'YearWeek']))))
# using only sites with enough data, find the prevalence of organisms
# sites <- site.starts[!(is.na(site.starts$StartDate)) & substring(site.starts$StartDate, 1, 4) < 2016, 'CustomerSiteId']
sites <- as.character(unique(runs.reg.norm$CustomerSiteId))
sites <- sites[order(sites)]
head(runs.reg.norm)
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group='Site', color='Site')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group='National', color='National'), lwd=1.5, data=with(runs.reg.norm, aggregate(NormalizedBurn~YearWeek, FUN=mean))) + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.5))
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group='Site', color='Site')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group='National', color='National'), lwd=1.5, data=with(runs.reg.norm, aggregate(NormalizedBurn~YearWeek, FUN=mean))) + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.5)) + facet_wrap(~CustomerSiteId, scale='free_y')
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group='Site', color='Site')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group='National', color='National'), lwd=1.5, data=with(runs.reg.norm, aggregate(NormalizedBurn~YearWeek, FUN=median)) + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.5)) + facet_wrap(~CustomerSiteId, scale='free_y')
ggplot(runs.reg.norm, aes(x=YearWeek, y=NormalizedBurn, group='Site', color='Site')) + geom_line(lwd=1.5) + geom_line(aes(x=YearWeek, y=NormalizedBurn, group='National', color='National'), lwd=1.5, data=with(runs.reg.norm, aggregate(NormalizedBurn~YearWeek, FUN=median))) + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.5)) + facet_wrap(~CustomerSiteId, scale='free_y')
head(positives.count.all)
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
library(dplyr)
library(tidyr)
require(dateManip)
head(runs.df)
head(bugs.df)
b <- c(-0.25, 0.68, 0.94, 1.15, 1.20, 1.26, 1.26, 1.34, 1.38, 1.43, 1.49, 1.49, 1.55, 1.56, 1.58, 1.65, 1.69, 1.70, 1.76, 1.77, 1.81, 1.91, 1.94, 1.96, 1.99, 2.06, 2.09, 2.10, 2.14, 2.15, 2.23, 2.24, 2.26, 2.35, 2.37, 2.40, 2.47, 2.54, 2.62, 2.64, 2.90, 2.92, 2.92, 2.93, 3.21, 3.26, 3.30, 3.59, 3.68, 4.30, 4.64, 5.34, 5.42, 6.01)
esd.test <- c()
n <- length(b)
# s <- sd(b)
# xbar <- mean(b)
alpha <- 0.05
for(i in 1:10) {
s <- sd(b)
xbar <- mean(b)
R <- max(abs(b-xbar))/s
p <- 1 - alpha/(2*(n-i+1))
v <- n - i
t <- qt(p = p, df = (n-1))
lambda <- (n-i)*t/(sqrt(n-i-1+t^2)*(n-i+1))
R > lambda # FIND THE MAX i FOR WHICH R > lambda
temp <- data.frame(Outliers = i, testValue = R, criticalValue = lambda)
esd.test <- rbind(esd.test, temp)
# adjust b to remove the observation
remove.index <- which(abs(b-mean(b)) == max(abs(b-mean(b))))
b <- b[!(abs(b-mean(b)) == max(abs(b-mean(b))))]
}
esd.test
b <- c(-0.25, 0.68, 0.94, 1.15, 1.20, 1.26, 1.26, 1.34, 1.38, 1.43, 1.49, 1.49, 1.55, 1.56, 1.58, 1.65, 1.69, 1.70, 1.76, 1.77, 1.81, 1.91, 1.94, 1.96, 1.99, 2.06, 2.09, 2.10, 2.14, 2.15, 2.23, 2.24, 2.26, 2.35, 2.37, 2.40, 2.47, 2.54, 2.62, 2.64, 2.90, 2.92, 2.92, 2.93, 3.21, 3.26, 3.30, 3.59, 3.68, 4.30, 4.64, 5.34, 5.42, 6.01)
esd.test <- c()
n <- length(b)
# s <- sd(b)
# xbar <- mean(b)
alpha <- 0.05
for(i in 1:10) {
s <- sd(b)
xbar <- mean(b)
R <- max(abs(b-xbar))/s
p <- 1 - alpha/(2*(n-i+1))
v <- n - i - 1
t <- qt(p = p, df = v)
lambda <- (n-i)*t/(sqrt(n-i-1+t^2)*(n-i+1))
R > lambda # FIND THE MAX i FOR WHICH R > lambda
temp <- data.frame(Outliers = i, testValue = R, criticalValue = lambda)
esd.test <- rbind(esd.test, temp)
# adjust b to remove the observation
remove.index <- which(abs(b-mean(b)) == max(abs(b-mean(b))))
b <- b[!(abs(b-mean(b)) == max(abs(b-mean(b))))]
}
esd.test
b <- c(-0.25, 0.68, 0.94, 1.15, 1.20, 1.26, 1.26, 1.34, 1.38, 1.43, 1.49, 1.49, 1.55, 1.56, 1.58, 1.65, 1.69, 1.70, 1.76, 1.77, 1.81, 1.91, 1.94, 1.96, 1.99, 2.06, 2.09, 2.10, 2.14, 2.15, 2.23, 2.24, 2.26, 2.35, 2.37, 2.40, 2.47, 2.54, 2.62, 2.64, 2.90, 2.92, 2.92, 2.93, 3.21, 3.26, 3.30, 3.59, 3.68, 4.30, 4.64, 5.34, 5.42, 6.01)
esd.test <- c()
n <- length(b)
# s <- sd(b)
# xbar <- mean(b)
alpha <- 0.05
for(i in 1:10) {
s <- sd(b)
xbar <- mean(b)
R <- max(abs(b-xbar))/s
p <- 1 - alpha/(2*(n-i+1))
v <- n - i - 1
t <- qt(p = p, df = v)
lambda <- (n-i)*t/sqrt((n-i-1+t^2)*(n-i+1))
R > lambda # FIND THE MAX i FOR WHICH R > lambda
temp <- data.frame(Outliers = i, testValue = R, criticalValue = lambda)
esd.test <- rbind(esd.test, temp)
# adjust b to remove the observation
remove.index <- which(abs(b-mean(b)) == max(abs(b-mean(b))))
b <- b[!(abs(b-mean(b)) == max(abs(b-mean(b))))]
}
esd.test
workDir <-'~/FilmArrayTrend/InitialPublication/'
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
library(RColorBrewer)
library(devtools)
library(RCurl)
library(binom)
library(caret)
library(rpart)
library(party)
library(partykit)
library(randomForest)
library(dplyr)
library(tidyr)
require(dateManip)
head(runs.reg.date)
head(bugs.df)
head(bugs.reg.roll)
ggplot(prevalence.nat.individual.wrap[with(prevalence.nat.individual.wrap, order(ShortName, decreasing=TRUE)),], aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
ggplot(a, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
a <- prevalence.nat.individual.wrap
# a$ShortName <- as.character(a$ShortName)
a$Name <- factor(a$ShortName, levels=c('RSV','PIV4','PIV3','PIV2','PIV1','hMPV','FluB','FluA H3','FluA H1-09','FluA H1','Flu A','CoV OC43','CoV NL63','CoV HKU1','CoV 229E','HRV/EV','M. pne','C. pne','B. per','Adeno'))
p.PercentDetectionTrend_ReorderedPretty <- ggplot(a, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
head(a)
ggplot(a, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, fill=Name, group=Name), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + scale_y_continuous(limits=c(0,0.8), labels=c(0, 10, 20, 30, 40, 50, 60, 70, 80), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Detection (%)', x='Date')
ggplot(prev.pareto.seasonal.all.nat, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.nat.ind, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.nat.fam, aes(x=Name, y=Prevalence, fill='Key')) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(data.frame(Key='Key'), 'Key'), guide=FALSE) + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.nat.pop, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection')
ggplot(prev.pareto.seasonal.all.nat.pop.ind, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection (%)')
ggplot(prev.pareto.seasonal.all.nat.pop.fam, aes(x=Name, y=Prevalence, fill=Key)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.pop, 'Key'), name='') + scale_y_continuous(limits=c(0,0.35), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35), labels=c('0','5','10','15','20','25','30','35')) + labs(x='', y='Detection (%)')
ggplot(subset(prev.pareto.seasonal.all.year, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
ggplot(subset(prev.pareto.seasonal.all.year.ind, SeasonYear!='2016-2017'), aes(x=Name, y=Prevalence, fill=SeasonYear)) + geom_bar(stat='identity', position='dodge') + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.35), panel.background=element_rect(color='white', fill='white')) + scale_fill_manual(values=createPaletteOfVariableLength(prev.pareto.seasonal.all.year, 'SeasonYear'), name='') + scale_y_continuous(limits=c(0,0.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3), labels=c('0','5','10','15','20','25','30')) + labs(x='', y='Detection (%)')
p1 <- ggplot(reg.turn.prev, aes(x=YearWeek)) + geom_area(aes(y=Prevalence, group=CensusRegionNational, order=CensusRegionNational, fill='HRV/EV Detection'), stat='identity', position='stack') + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_y_continuous(limits=c(0, 0.7), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), labels=c(0, 10, 20, 30, 40, 50, 60, 70)) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='Detection (%)', x='Date') + facet_wrap(~CensusRegionNational) + scale_fill_manual(values=c('grey'), name='')
p2 <- ggplot(reg.turn.prev, aes(x=YearWeek, y=NormalizedBurn, group='TURN', color='TURN')) + geom_line(lwd=2) + scale_y_continuous(limits=c(0, 5), breaks=c(0, 1, 2, 3, 4, 5), labels=c('0','1','2','3','4','5')) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1), legend.position='bottom', panel.background=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.ticks.x=element_blank()) + labs(y='TURN') + facet_wrap(~CensusRegionNational) + scale_x_discrete(breaks = dateBreaks[5:length(dateBreaks)], labels = dateBreaks[5:length(dateBreaks)]) + scale_color_manual(values=c('black','black','black','black'), name='')
## Putting plots together ##################
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, grepl("panel",name) , se = t:r))
g <- gtable_add_grob(g1, g2$grobs[grep("panel",g2$layout$name)], pp$t, pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(grepl("axis_l",g2$layout$name) |  grepl("axis-l",g2$layout$name)     )
ga <- g2$grobs[ia]
axis_idx <- as.numeric(which(sapply(ga,function(x) !is.null(x$children$axis))))
for(i in 1:length(axis_idx)){
ax <- ga[[axis_idx[i]]]$children$axis
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia[axis_idx[i]], ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t[axis_idx[i]], length(g$widths) - i, pp$b[axis_idx[i]])
}
g$grobs[[which(g$layout$name =='ylab-r')]] <- g2$grobs[[which(g2$layout$name =='ylab-l')]] # add the axis label from p2 to the right side of the plot
g$layout$l[[which(g$layout$name =='ylab-r')]] <- g$layout$l[[which(g$layout$name =='ylab-r')]] + 2
# Plot!
grid.newpage()
grid.draw(g)
grid.draw(ili.burn.nat.compare)
grid.newpage()
grid.draw(overlay.fluAs)
grid.newpage()
grid.draw(fluTriple)
ggplot(subset(prev.pareto.all.duals, PercentOfDetectionsWithACo < 0.7), aes(x=PercentOfDetectionsWithACo, fill=ShortName)) + geom_histogram(binwidth=0.1) + scale_fill_manual(values=elementary.block.pal, guide=FALSE) + annotate('text',x=c(0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.6), y=c(0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 0.5, 1.5, 2.5, 3.5, 4.5, 0.5, 1.5, 2.5, 3.5, 4.5, 0.5, 1.5, 0.5), label=block.labels, size=6) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(hjust=0.5, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='transparent', fill='white'), panel.grid=element_blank()) + labs(x='Percent of Detections with a Co-Detection (%)', y='Frequency') + scale_x_continuous(breaks=c(0,0.1,0.2,0.3,0.4,0.5,0.6), labels=c('0','10','20','30','40','50','60'))
grid.newpage()
grid.draw(iliBestCor)
ggplot(aes(x=YearWeek, y=Runs, group='TUR'), data=subset(tur.positives.nat[with(tur.positives.nat, order(ShortName, decreasing=TRUE)),], YearWeek >= '2013-26')) + geom_line(size=1.5, color='black') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.text.y=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Test Utilization', x='Date')
ggplot(subset(tur.positives.nat[with(tur.positives.nat, order(ShortName, decreasing=TRUE)),], YearWeek >= '2013-26'), aes(x=YearWeek)) + geom_area(aes(y=Positives, fill=ShortName, group=ShortName, order=ShortName), stat='identity', position='stack') + scale_fill_manual(values=bug.individual.Pal, name='') + geom_line(aes(x=YearWeek, y=Runs, group='TUR'), data=subset(tur.positives.nat[with(tur.positives.nat, order(ShortName, decreasing=TRUE)),], YearWeek >= '2013-26'), size=1.5, color='black') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.text.y=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', y='Test Utilization, Detections', x='Date')
ggplot(subset(cor.count.agg, YearWeek >= '2013-26'), aes(x=YearWeek)) + geom_area(aes(y=Positives, fill=Name, group=Name), stat='identity', position='stack') + scale_fill_manual(values=new.pal, name='') + geom_line(aes(x=YearWeek, y=Runs, group='TUR', color='TUR'), data=subset(cor.count.agg, YearWeek>='2013-26'), size=1.5, color='black') + scale_x_discrete(breaks=dateBreaks, labels=dateLabels) + theme(plot.title=element_text(hjust=0.5),text=element_text(size=22, face='bold'), axis.text=element_text(size=22, color='black', face='bold'), axis.text.x=element_text(angle=90, hjust=1, vjust=0.5), legend.position='bottom', panel.background=element_rect(color='white', fill='white'), axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.text.y=element_blank()) + guides(fill=guide_legend(ncol=7, bycol=TRUE)) + labs(title='', x='Date', y='')
burn.model.rf.df[with(burn.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
set.seed(4042)
burn.model.rf <- randomForest(NormalizedBurn~a+b+c+d+e+f+g+h+i+o+p+q+r+s+t+u+v, data=prev.predict, mtry=3, importance=TRUE)
burn.model.rf.df <- data.frame(importance(burn.model.rf))
burn.model.rf.df$Code <- rownames(burn.model.rf.df)
burn.model.rf.df <- merge(burn.model.rf.df, decoder.agg, by='Code')
burn.model.rf.df[with(burn.model.rf.df, order(IncNodePurity, decreasing = TRUE)), ]
