m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
rm(m.212.ten.combos)
do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(as.character(m.211.combos$PossibleCombo[x]), mm.assays.combo$AssayCombo), ])))
head(mm.assays.combo)
mm.assays.combo$AssayCombo[1]
grep(as.character(mm.assays.combo$AssayCombo[1]), as.character(m.212.combos$PossibleCombo))
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[1]), as.character(m.212.combos$PossibleCombo)), ]
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[2]), as.character(m.212.combos$PossibleCombo)), ]
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[3]), as.character(m.212.combos$PossibleCombo)), ]
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
require(dateManip)
head(m.211.combos)
tail(m.211.combos)
grep(as.character(m.211.combos$PossibleCombo[1941]), as.character(mm.assays.combo$AssayCombo))
as.character(mm.assays.combo$AssayCombo)
View(mm.assays.combo)
mm.assays.combo[838, ]
m.212
tail(m.212.combos)
grep(m.212.combos[1093], mm.assays.combo[838, 'AssayCombo'])
grep(m.212.combos[1093,'PossibleCombo'], mm.assays.combo[838, 'AssayCombo'])
grep(m.212.combos[1093,'PossibleCombo'], mm.assays.combo[, 'AssayCombo'])
mm.assays.combo[grep(m.212.combos[1093,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ]
do.call(rbind, lapply(1090:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
a <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
head(a)
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','hMPV','HRV1','HRV2','HRV3','HRV4','PIV1','PIV4')
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
head(m.211.runs)
head(mm.assays)
head(mm.assays.combo)
query
head(mm.assays)
a <- with(data.frame(mm.assays, Count=1), aggregate(Count~RunDataId, FUN=sum))
head(a)
a[a$Count==15, ]
mm.assays.combo[mm.assays.combo$RunDataId %in% a[a$Count==15, 'RunDataId'], ]
head(mm.assays.combo)
head(m.212.runs)
m.212.runs <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
View(mm.assays.combo)
head(m.212.runs)
m <- unique(m.212.runs)
rm(m)
m.212.runs.distinct <- unique(m.212.runs)
a[a$Count==15, ]
mm.assays.combo[mm.assays.combo$RunDataId %in% a[a$Count==15, 'RunDataId'], ]
head(mm.df)
heaD(m.212.runs.distinct)
head(m.212.runs.distinct)
mm.df[mm.df$RunDataId==69, ]
mm.assays[mm.assays$RunDataId==69, ]
workDir <-'~/FilmArrayTrend/DataCleaningOfQcRuns/'
setwd(workDir)
# load libraries
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
require(dateManip)
# load custom functions
source('~/WebHub/AnalyticsWebHub/Rfunctions/createPaletteOfVariableLength.R')
source('../Rfunctions/generateCombosBetter.R')
# read in the data from FilmArray Data Warehouse DB (ODBC object in Windows "FA_DW" with Lindsay's credentials)
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/AllSitesRespiratoryRuns.sql')
query <- paste(queryVector,collapse="\n")
runs.df <- sqlQuery(FADWcxn,query)
runs.df$Instrument <- as.character(runs.df$Instrument)
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/PositiveBugsRP.sql')
query <- paste(queryVector,collapse="\n")
bugs.df <- sqlQuery(FADWcxn,query)
bugs.df <- bugs.df[bugs.df$BugPositive != 'Bocavirus',]
queryVector <- readLines('../DataSources/ShortNames.sql')
query <- paste(queryVector,collapse="\n")
shortnames.df <- sqlQuery(FADWcxn,query)
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
# read in the data about dates of instrument shipments from PMS_PROD
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/ShipDatesOfInstruments.sql')
query <- paste(queryVector, collapse="\n")
shipments.df <- sqlQuery(PMScxn, query)
shipments.df <- shipments.df[shipments.df$SerialNo %in% runs.df$Instrument, ]
shipments.df$SerialNo <- as.character(shipments.df$SerialNo)
odbcClose(PMScxn)
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/ShipDatesOfInstruments.sql')
query <- paste(queryVector, collapse="\n")
shipments.df <- sqlQuery(PMScxn, query)
query
PMScxn <- odbcConnect('PMS_PROD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/ShipDatesOfInstruments.sql')
query <- paste(queryVector, collapse="\n")
shipments.df <- sqlQuery(PMScxn, query)
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/ShipDatesOfInstruments.sql')
query <- paste(queryVector, collapse="\n")
shipments.df <- sqlQuery(PMScxn, query)
shipments.df <- shipments.df[shipments.df$SerialNo %in% runs.df$Instrument, ]
shipments.df$SerialNo <- as.character(shipments.df$SerialNo)
odbcClose(PMScxn)
positives.per.run <- with(data.frame(bugs.df, Positives = 1), aggregate(Positives~RunDataId, FUN=sum))
runs.df <- merge(runs.df, positives.per.run, by='RunDataId', all.x=TRUE)
runs.df[is.na(runs.df$Positives),'Positives'] <- 0
# do some work to determine the dates of arival of instruments at a site, including rearrival after a service event
serials <- unique(runs.df$Instrument)[order(unique(runs.df$Instrument))]
inst.arrival.marked <- c()
for(i in 294:length(serials)) {
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
if(nrow(inst.runs.arrival)!=0) { inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01') }
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
}
serials
inst.arrival.marked <- c()
for(i in 1:length(serials)) {
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
if(nrow(inst.runs.arrival)!=0) { inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01') }
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
}
i
head(inst.arrival.marked)
inst.arrival.marked$DaysSinceArrival <- with(inst.arrival.marked, as.numeric(Date - ArrivalDate))
mm.assays <- unique(mm.df[mm.df$ResultType=='Organism',c('RunDataId','AssayName')])
mm.assays <- mm.assays[with(mm.assays, order(RunDataId, AssayName)), ]
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
# since some might have false negatives, check for runs that match the signiture of Maine Molecular with a few missing
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','hMPV','HRV1','HRV2','HRV3','HRV4','PIV1','PIV4')
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
m.212.runs <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.212.runs.distinct <- unique(m.212.runs)
m.211.runs.distinct <- unique(m.211.runs)
m.212.runs.distinct <- unique(m.212.runs)
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
unqiue(mm.runs.distinct$RunDataId)
unique(mm.runs.distinct$RunDataId)
length(unique(mm.runs.distinct$RunDataId))
head(mm.runs.distinct)
with(data.frame(mm.runs.distinct, Count=1), aggregate(Count~AssayCombo, FUN=sum))
a <- with(data.frame(mm.runs.distinct, Count=1), aggregate(Count~AssayCombo, FUN=sum))
View(a)
a
unique(mm.runs.distinct$RunDataId)
head(mm.runs.distinct)
head(mm.assays)
head(mm.df)
library(dplyr)
library(tidyr)
head(mm.df)
spread(data = mm.df[1:10,c('RunDataId','Date','LotNo','SerialNo','AssayName','Cp')], key = AssayName, value = Cp)
mm.df[mm.df$RunDataId %in% mm.runs.distinct$RunDataId, ]
head(mm.runs.distinct)
a <- mm.df[mm.df$RunDataId %in% mm.runs.distinct$RunDataId, ]
View(a)
min(a$PositiveAssays)
max(a$PositiveAssays)
a[a$PositiveAssays==5, ]
a[a$PositiveAssays==5, ][with(a[a$PositiveAssays==5, ], order(RunDataId, AssayName)), ]
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
mm.assays <- unique(mm.df[mm.df$ResultType=='Organism', c('RunDataId','AssayName')])
mm.assays <- mm.assays[with(mm.assays, order(RunDataId, AssayName)), ]
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
# since some might have false negatives, check for runs that match the signiture of Maine Molecular with a few missing
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','hMPV','HRV1','HRV2','HRV3','HRV4','PIV1','PIV4')
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.211.runs.distinct <- unique(m.211.runs)
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
m.212.runs <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.212.runs.distinct <- unique(m.212.runs)
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
# in the data frame of possible runs that are Maine Molecular with false negatives, unnest the character string combo
a <- mm.df[mm.df$RunDataId %in% mm.runs.distinct$RunDataId, ]
a[a$PositiveAssays==5, ][with(a[a$PositiveAssays==5, ], order(RunDataId, AssayName)), ]
head(a)
head(a)
do.call(rbind, lapply(1:length(unique(a$RunDataId)), function(x) data.frame(Cps = paste(a[a$RunDataId==unique(a$RunDataId)[x], 'Cp'], collapse=', '))))
do.call(rbind, lapply(1:10, function(x) data.frame(Cps = paste(a[a$RunDataId==unique(a$RunDataId)[x], 'Cp'], collapse=', '))))
head(a)
head(a)
do.call(rbind, lapply(1:length(unique(a$RunDataId)), function(x) do.call(rbind, lapply(1:length(unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(a$RunDataId)[x], AssayName = unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], Cps = paste(a[a$RunDataId==unique(a$RunDataId)[x] & a$AssayName==unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
filter(a, AssayName=='Adeno')
head(a)
do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(a$RunDataId)[x], AssayName = unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], Cps = paste(a[a$RunDataId==unique(a$RunDataId)[x] & a$AssayName==unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(a$RunDataId)[x], AssayName = unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], Cps = paste(a[a$RunDataId==unique(a$RunDataId)[x] & a$AssayName==unique(a[a$RunDataId==unique(a$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
b
b[b$RunDataId==68, ]
a[a$RunDataId==68, ]
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
mm.assays <- unique(mm.df[mm.df$ResultType=='Organism', c('RunDataId','AssayName')])
mm.assays <- mm.assays[with(mm.assays, order(RunDataId, AssayName)), ]
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
# since some might have false negatives, check for runs that match the signiture of Maine Molecular with a few missing
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','hMPV','HRV1','HRV2','HRV3','HRV4','PIV1','PIV4')
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.211.runs.distinct <- unique(m.211.runs)
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
m.212.runs <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.212.runs.distinct <- unique(m.212.runs)
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
mm.qc.runs <- mm.df[mm.df$RunDataId %in% mm.runs.distinct$RunDataId, ]
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
rm(a)
head(b)
head(b)
head(mm.df)
head(m.212.runs)
head(mm.assays.combo)
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ], Key = 'M211v1.1')))
m.211.runs.distinct <- unique(m.211.runs)
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
m.212.runs <- do.call(rbind, lapply(1:length(m.212.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.212.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ], Key = 'M212v1.1')))
m.212.runs.distinct <- unique(m.212.runs)
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
# in the data frame of possible runs that are Maine Molecular with false negatives, unnest the character string combo
mm.qc.runs <- mm.df[mm.df$RunDataId %in% mm.runs.distinct$RunDataId, ]
do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ], Key = 'M211v1.1')))
head(m.211.runs)
m.211.runs <- do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos[x,'PossibleCombo'], mm.assays.combo[, 'AssayCombo']), ])))
m.211.runs$Key <- 'M211v1.1'
m.211.runs.distinct <- unique(m.211.runs)
m.212.runs$Key <- 'M212v1.1'
m.212.runs.distinct <- unique(m.212.runs)
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
head(mm.df)
head(mm.runs.distinct)
mm.qc.runs <- merge(mm.df, mm.runs.distinct[,c('RunDataId','Key')], by='RunDataId')
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
b
head(mm.qc.runs)
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], Mix = unique(mm.qc.runs[mm.qc.runs$ResultType==unique(mm.qc.runs$RunDataId)[x]), 'Key'], AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], Mix = unique(mm.qc.runs[mm.qc.runs$ResultType==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
head(b)
head(mm.qc.runs)
b <- do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], Mix = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
head(b)
rm(b)
mm.qc.cps.agg <- do.call(rbind, lapply(1:length(unique(mm.qc.runs$RunDataId)), function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], Mix = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
head(a)
rm(a)
head(mm.qc.cps.agg)
head(bugs.df)
head(shortnames.df)
head(mm.qc.cps.agg)
unique(mmp.qc.cps.agg)
unique(mm.qc.cps.agg$AssayName)
unique(mm.qc.cps.agg$AssayName)[order(unique(mm.qc.cps.agg$AssayName))]
unique(mm.qc.cps.agg$AssayName)[order(unique(mm.qc.cps.agg$AssayName))]
head(mm.runs.distinct)
head(mm.qc.cps.agg)
as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName']))
as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName']))[order(as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName'])))]
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
mm.qc.cps.212 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', ]
head(mm.qc.cps.211)
as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName']))[order(as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName'])))]
do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName']))[order(as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName'])))], Cps = NA)))
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName']))[order(as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', 'AssayName'])))], Cps = NA)))
mm.qc.cps.212.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.212$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.212$RunDataId)[x], Mix = 'M212v1.1', AssayName = as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', 'AssayName']))[order(as.character(unique(mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', 'AssayName'])))], Cps = NA)))
head(mm.qc.cps.212)
head(mm.qc.cps.212)
m.211
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = c(m.211, 'yeastRNA'), Cps = NA)))
mm.qc.cps.212.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.212$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.212$RunDataId)[x], Mix = 'M212v1.1', AssayName = c(m.212, 'yeastRNA'), Cps = NA)))
head(mm.qc.cps.212.base)
a <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
head(a)
a[is.na(a$Cps.y), ]
head(a)
head(a, 30)
head(mm.qc.cps.211)
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.212 <- merge(mm.qc.cps.211.base, mm.qc.cps.212, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
head(mm.qc.cps.211)
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y']
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = c(m.211, 'yeastRNA'), Cps = NA)))
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), 'Cps'] <- NULL
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y']
head(mm.qc.cps.211)
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), ]
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = c(m.211, 'yeastRNA'), Cps = NA)))
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y']
tail(mm.qc.cps.211)
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), ]
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps), ]
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
head(mm.qc.cps.211)
class(mm.qc.cps.211$Cps)
class(mm.qc.cps.211$Cps.x)
class(mm.qc.cps.211$Cps.y)
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], Mix = 'M211v1.1', AssayName = c(m.211, 'yeastRNA'), Cps = NA)))
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y'])
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
mm.qc.cps.212 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', ]
mm.qc.cps.212.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.212$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.212$RunDataId)[x], Mix = 'M212v1.1', AssayName = c(m.212, 'yeastRNA'), Cps = NA)))
mm.qc.cps.212 <- merge(mm.qc.cps.212.base, mm.qc.cps.212, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps.y'])
mm.qc.cps.212[is.na(mm.qc.cps.212$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
head(mm.qc.cps.211)
mm.runs.cps <- rbind(mm.qc.cps.211[,c('RunDataId','Mix','AssayName','Cps')], mm.qc.cps.212[,c('RunDataId','Mix','AssayName','Cps')])
head(mm.runs.cps)
write.csv(mm.runs.cps, 'PossibleMaineMolecularRunsWithFalseNegatives_TrendCpData.csv', row.names = FALSE)
heaD(mm.runs.cps)
head(mm.runs.cps)
head(mm.runs.cps)
head(inst.arrival.marked)
serials[1]
hist(inst.arrival.marked$DaysSinceArrival)
min(inst.arrival.marked$DaysSinceArrival)
max(inst.arrival.marked$DaysSinceArrival)
hist(subset(inst.arrival.marked$DaysSinceArrival, DaysSinceArrival < 700))
hist(subset(inst.arrival.marked, DaysSinceArrival < 700)$DaysSinceArrival)
ggplot(subset(inst.arrival.marked, DaysSinceArrival < 700), aes(x=DaysSinceArrival, fill=as.factor(Positives))) + geom_bar() + facet_wrap(~Instrument)
ggplot(subset(inst.arrival.marked, DaysSinceArrival < 700 & Instrument %in% serials[1:20]), aes(x=DaysSinceArrival, fill=as.factor(Positives))) + geom_bar() + facet_wrap(~Instrument, scale='free_y')
hist(inst.arrival.marked[inst.arrival.marked$DaysSinceArrival < 700 & inst.arrival.marked$Positives > 4, ])
hist(inst.arrival.marked[inst.arrival.marked$DaysSinceArrival < 700 & inst.arrival.marked$Positives > 4, 'DaysSinceArrival'])
hist(inst.arrival.marked[inst.arrival.marked$DaysSinceArrival < 700 & inst.arrival.marked$Positives > 4, 'DaysSinceArrival'], breaks = seq(0,700,20))
hist(inst.arrival.marked[inst.arrival.marked$DaysSinceArrival < 700 & inst.arrival.marked$Positives > 4, 'DaysSinceArrival'], breaks = seq(0,700,10))
hist(inst.arrival.marked[inst.arrival.marked$DaysSinceArrival < 700 & inst.arrival.marked$Positives > 4, 'DaysSinceArrival'], breaks = seq(0,700,10), freq = FALSE)
head(mm.runs.cps)
head(mm.df)
with(mm.df, aggregate(Cp~RunDataId+LotNo+SerialNo+AssayName, FUN=mean))
mm.runs.cps.avg <- with(mm.df, aggregate(Cp~RunDataId+LotNo+SerialNo+AssayName, FUN=mean))
head(mm.runs.cps)
head(mm.runs.cps.avg)
a <- merge(mm.runs.cps, mm.runs.cps.avg, by=c('RunDataId','AssayName'))
a <- merge(mm.runs.cps, mm.runs.cps.avg, by=c('RunDataId','AssayName'), all.x=TRUE)
a[is.na(a$Cps), ]
head(a)
a[is.na(a$Cp), ]
head(m.212.runs)
head(mm.qc.runs)
do.call(rbind, lapply(1:5, function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], LotNo = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'LotNo']), SerialNo = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'SerialNo']), Mix = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
mm.runs.distinct <- rbind(m.211.runs.distinct, m.212.runs.distinct)
mm.qc.runs <- merge(mm.df, mm.runs.distinct[,c('RunDataId','Key')], by='RunDataId')
mm.qc.cps.agg <- do.call(rbind, lapply(1:length(unique(mm.qc.runs$RunDataId)), function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], LotNo = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'LotNo']), SerialNo = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'SerialNo']), Mix = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
rm(mm.runs.cps.avg)
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
head(mm.qc.cps.211)
head(mm.qc.cps.211.base)
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y'])
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
mm.qc.cps.212 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', ]
mm.qc.cps.212.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.212$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.212$RunDataId)[x], Mix = 'M212v1.1', AssayName = c(m.212, 'yeastRNA'), Cps = NA)))
mm.qc.cps.212 <- merge(mm.qc.cps.212.base, mm.qc.cps.212, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps.y'])
mm.qc.cps.212[is.na(mm.qc.cps.212$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
mm.qc.cps.211
head(mm.qc.cps.211)
head(mm.qc.cps.212)
mm.runs.cps <- rbind(mm.qc.cps.211[,c('RunDataId','LotNo','SerialNo','Mix','AssayName','Cps')], mm.qc.cps.212[,c('RunDataId','LotNo','SerialNo','Mix','AssayName','Cps')])
head(mm.runs.cps)
mm.runs.cps.avg <- with(mm.df, aggregate(Cp~RunDataId+AssayName, FUN=mean))
merge(mm.runs.cps, mm.runs.cps.avg, by=c('RunDataId','AssayName'), all.x=TRUE)
mm.runs.cps <- merge(mm.runs.cps, mm.runs.cps.avg, by=c('RunDataId','AssayName'), all.x=TRUE)
head(mm.runs.cps)
colnames(mm.runs.cps)[length(colnames(mm.runs.cps))]
colnames(mm.runs.cps)[length(colnames(mm.runs.cps))] <- 'AverageCp'
head(mm.runs.cps)
(19.9+20+20.1)/3
head(mm.runs.cps)
mm.runs.cps[is.na(mm.runs.cps$AverageCp), ]
mm.qc.cps.agg <- do.call(rbind, lapply(1:length(unique(mm.qc.runs$RunDataId)), function(x) do.call(rbind, lapply(1:length(unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])), function(y) data.frame(RunDataId = unique(mm.qc.runs$RunDataId)[x], Mix = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x], 'Key']), AssayName = unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], Cps = paste(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x] & mm.qc.runs$AssayName==unique(mm.qc.runs[mm.qc.runs$RunDataId==unique(mm.qc.runs$RunDataId)[x],'AssayName'])[y], 'Cp'], collapse=', '))))))
head(mm.qc.cps.agg)
mm.qc.cps.211 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M211v1.1', ]
mm.qc.cps.211.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.211$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.211$RunDataId)[x], LotNo = unique(mm.df[mm.df$RunDataId==unique(mm.qc.cps.211$RunDataId)[x],'LotNo']), SerialNo = unique(mm.df[mm.df$RunDataId==unique(mm.qc.cps.211$RunDataId)[x],'SerialNo']), Mix = 'M211v1.1', AssayName = c(m.211, 'yeastRNA'), Cps = NA)))
head(mm.qc.cps.211.base)
mm.qc.cps.211 <- merge(mm.qc.cps.211.base, mm.qc.cps.211, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.211[!(is.na(mm.qc.cps.211$Cps.y)), 'Cps.y'])
mm.qc.cps.211[is.na(mm.qc.cps.211$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
mm.qc.cps.212 <- mm.qc.cps.agg[mm.qc.cps.agg$Mix=='M212v1.1', ]
mm.qc.cps.212.base <- do.call(rbind, lapply(1:length(unique(mm.qc.cps.212$RunDataId)), function(x) data.frame(RunDataId = unique(mm.qc.cps.212$RunDataId)[x], LotNo = unique(mm.df[mm.df$RunDataId==unique(mm.qc.cps.212$RunDataId)[x],'LotNo']), SerialNo = unique(mm.df[mm.df$RunDataId==unique(mm.qc.cps.212$RunDataId)[x],'SerialNo']), Mix = 'M212v1.1', AssayName = c(m.212, 'yeastRNA'), Cps = NA)))
mm.qc.cps.212 <- merge(mm.qc.cps.212.base, mm.qc.cps.212, by=c('RunDataId','Mix','AssayName'), all.x=TRUE)
mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps'] <- as.character(mm.qc.cps.212[!(is.na(mm.qc.cps.212$Cps.y)), 'Cps.y'])
mm.qc.cps.212[is.na(mm.qc.cps.212$Cps.y), 'Cps'] <- 'SuspectedFalseNegative'
mm.runs.cps <- rbind(mm.qc.cps.211[,c('RunDataId','LotNo','SerialNo','Mix','AssayName','Cps')], mm.qc.cps.212[,c('RunDataId','LotNo','SerialNo','Mix','AssayName','Cps')])
mm.runs.cps.avg <- with(mm.df, aggregate(Cp~RunDataId+AssayName, FUN=mean))
head(mm.runs.cps)
head(mm.runs.cps)
head(mm.runs.cps, 20)
mm.runs.cps.avg <- with(mm.df, aggregate(Cp~RunDataId+AssayName, FUN=mean))
mm.runs.cps <- merge(mm.runs.cps, mm.runs.cps.avg, by=c('RunDataId','AssayName'), all.x=TRUE)
colnames(mm.runs.cps)[length(colnames(mm.runs.cps))] <- 'AverageCp'
head(mm.runs.cps, 20)
mm.runs.cps <- mm.runs.cps[with(mm.runs.cps, order(RunDataId, AssayName)), ]
mm.runs.cps[is.na(mm.runs.cps$AverageCp), ]
write.csv(mm.runs.cps, 'PossibleMaineMolecularRunsWithFalseNegatives_TrendCpData.csv', row.names = FALSE)
head(mm.df)
head(runs.df)
mm.runs.cps <- merge(mm.runs.cps, runs.df[,c('RunDataId','Date')], by='RunDataId')
mm.runs.cps <- mm.runs.cps[with(mm.runs.cps, order(RunDataId, AssayName)), ]
write.csv(mm.runs.cps, 'PossibleMaineMolecularRunsWithFalseNegatives_TrendCpData.csv', row.names = FALSE)
