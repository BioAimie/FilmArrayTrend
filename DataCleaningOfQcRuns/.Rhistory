shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
inst.first.runs
head(a)
rm(a)
temp
j
head(inst.runs.temp)
i
serials[i]
inst.ship.dates
head(inst.run.dates)
j <- 1
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
inst.first.run
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
temp
inst.first.runs <- c()
inst.first.runs <- rbind(inst.first.runs, temp)
inst.first.runs
j<-j+1
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
inst.first.runs
j<-j+1
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
inst.first.runs
j<-j+1
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
inst.first.runs
j<-j+1
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
inst.first.run
j
temp
inst.ship.dates
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
inst.first.runs
with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
inst.first.runs.agg
inst.first.runs
unique(merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')])
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
inst.runs.arrival
View(inst.runs.arrival)
temp
inst.ship.dates
i
j
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.runs.arrival
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
i
for(i in 192:length(serials)) {
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
}
i
j
serials[i]
temp
inst.run.dates
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
inst.runs.arrival
temp
j
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
length(temp$FirstRunDate)
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
inst.runs.arrival$ArrivalDate <- NA
inst.runs.arrival <- inst.runs.before
inst.runs.arrival$ArrivalDate <- NA
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
inst.runs.arrival
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
inst.runs.arrival$ArrivalDate <- NA
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
rbind(inst.runs.arrival, inst.runs.temp)
as.Date(Sys.Date()-800)
class(inst.run.dates$Date)
inst.run.dates$Date[1]
as.Date('2000-01-01')
class(as.Date('2000-01-01'))
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01')
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
i
for(i in 293:length(serials)) {
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01')
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
}
i
j
temp
serials[i]
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01')
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
if(nrow(inst.runs.arrival)!=0) { inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01') }
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.runs.arrival
inst.runs.before
temp
runs.df[runs.df$Instrument=='FA3345', ]
i
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
for(i in 294:length(serials)) {
print(serials[i])
inst.ship.dates <- shipments.df[shipments.df$SerialNo==serials[i], ][order(shipments.df[shipments.df$SerialNo==serials[i], 'Date']), ]
inst.run.dates <- runs.df[runs.df$Instrument==serials[i], ][order(runs.df[runs.df$Instrument==serials[i], 'Date']), ]
inst.first.runs <- c()
for(j in 1:length(inst.ship.dates$Date)) {
inst.first.run <- min(inst.run.dates[inst.run.dates$Date >= inst.ship.dates$Date[j], 'Date'])
if(is.na(inst.first.run)) { break() }
days.since.shipped <- as.numeric(inst.first.run - inst.ship.dates$Date[j])
temp <- data.frame(Instrument = serials[i], ShipDate = inst.ship.dates$Date[j], FirstRunDate = inst.first.run, DaysSinceShipment = days.since.shipped)
inst.first.runs <- rbind(inst.first.runs, temp)
}
print('made it through first j loop')
inst.first.runs.agg <- with(inst.first.runs[!(is.infinite(inst.first.runs$DaysSinceShipment)), ], aggregate(DaysSinceShipment~FirstRunDate, FUN=min))
temp <- merge(inst.first.runs, inst.first.runs.agg, by=c('FirstRunDate','DaysSinceShipment'))[,c('Instrument','ShipDate','FirstRunDate', 'DaysSinceShipment')]
temp <- unique(temp)
# now there is a data frame called temp that contains the shipment dates and run dates for each instrument... but I need to determine the days since
# arrival for each run, which will require determining the most recent arrival date
inst.run.dates <- inst.run.dates[with(inst.run.dates, order(Date)), ]
inst.runs.before <- inst.run.dates[inst.run.dates$Date < temp$FirstRunDate[1], ]
inst.runs.arrival <- inst.runs.before
if(nrow(inst.runs.arrival)!=0) { inst.runs.arrival$ArrivalDate <- as.Date('2000-01-01') }
for(j in 1:length(temp$FirstRunDate)) {
inst.runs.temp <- inst.run.dates[inst.run.dates$Date >= temp$FirstRunDate[j], ]
if(nrow(inst.runs.temp)==0) { break() }
if(length(temp$FirstRunDate)==1) {
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
if(j < length(temp$FirstRunDate)) {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j] & inst.runs.temp$Date < temp$FirstRunDate[j+1], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
} else {
inst.runs.temp <- inst.runs.temp[inst.runs.temp$Date >= temp$FirstRunDate[j], ]
inst.runs.temp$ArrivalDate <- temp$FirstRunDate[j]
}
}
inst.runs.arrival <- rbind(inst.runs.arrival, inst.runs.temp)
}
inst.arrival.marked <- rbind(inst.arrival.marked, inst.runs.arrival)
}
i
length(serials)
head(inst.arrival.marked)
a <- inst.arrival.marked
a$DaysSinceArrival <- with(a, Date - ArrivalDate)
head(a)
head(a[a$Date==as.Date('2000-01-01'), ])
head(a[a$ArrivalDate==as.Date('2000-01-01'), ])
head(a)
a <- a[with(a, order(Instrument, Date)), ]
View(a)
hist(a[a$DaysSinceArrival < 30, 'Positives'])
plot(x=a$DaysSinceArrival, y=a$Positives)
plot(y=a$DaysSinceArrival, x=a$Positives)
head(a)
a$DaysSinceArrival <- with(a, as.numeric(Date - ArrivalDate))
head(a)
head(bugs.df)
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
library(RODBC)
library(lubridate)
library(EpiWeek)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(gtable)
require(dateManip)
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
head(a)
inst.arrival.marked$DaysSinceArrival <- with(inst.arrival.marked, as.numeric(Date - ArrivalDate))
head(inst.arrival.marked)
rm(a)
head(mm.df)
mm.assays <- unique(mm.df[,c('RunDataId','AssayName')])
head(mm.assays)
do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) paste0(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName'])))
do.call(rbind, lapply(1:4, function(x) paste0(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName'])))
do.call(rbind, lapply(1:4, function(x) paste(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName'], sep=', ')))
head(mm.assays)
head(mm.assays)
mm.assays[mm.assays$RunDataId==637, ]
mm.assays[mm.assays$RunDataId==637, 'AssayName']
as.character(mm.assays[mm.assays$RunDataId==637, 'AssayName'])
paste(as.character(mm.assays[mm.assays$RunDataId==637, 'AssayName']), collapse=',')
do.call(rbind, lapply(1:4, function(x) paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', ')))
do.call(rbind, lapply(1:4, function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
head(mm.assays.combo)
source('../Rfunctions/generateCombosBetter.R')
mm.assays <- mm.assays[with(mm.assays, order(RunDataId, AssayName)), ]
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
FADWcxn <- odbcConnect(dsn = 'FA_DW', uid = 'afaucett', pwd = 'ThisIsAPassword-BAD')
queryVector <- readLines('../DataSources/SQL/DataCleaningOfQcRuns/maineMolecular.sql')
query <- paste(queryVector,collapse="\n")
mm.df <- sqlQuery(FADWcxn,query)
odbcClose(FADWcxn)
mm.assays <- unique(mm.df[mm.df$ResultType=='Organism',c('RunDataId','AssayName')])
mm.assays <- mm.assays[with(mm.assays, order(RunDataId, AssayName)), ]
mm.assays.combo <- do.call(rbind, lapply(1:length(unique(mm.assays$RunDataId)), function(x) data.frame(RunDataId = unique(mm.assays$RunDataId)[x], AssayCombo = paste(as.character(mm.assays[mm.assays$RunDataId==unique(mm.assays$RunDataId)[x], 'AssayName']), collapse=', '))))
head(mm.assays.combo)
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','PIV1','PIV4')
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','HRV1','HRV2','HRV3','HRV4','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','PIV1','PIV4')
generateCombos(m.211, 10, FALSE)
m.211.ten.combos <- generateCombos(m.211, 10, FALSE)
head(m.211.ten.combos)
m.211.ten.combos[[1]]
m.211.ten.combos[[1]]
paste(m.211.ten.combos[[1]], collapse=', ')
length(m.211.ten.combos)
do.call(rbind, m.211.ten.combos)
do.call(paste, m.211.ten.combos)
head(m.211.ten.combos)
lapply(1, function(x) paste(m.211.ten.combos[[x]], collapse=', ')
)
lapply(1, function(x) paste(m.211.ten.combos[[x]], collapse=', '))
do.call(rbind, data.frame(PossibleCombo = lapply(1, function(x) paste(m.211.ten.combos[[x]], collapse=', '))))
do.call(rbind, lapply(1, function(x) data.frame(PossibleCombo = paste(m.211.ten.combos[[x]], collapse=', '))))
do.call(rbind, lapply(1:length(m.211.ten.combos), function(x) data.frame(PossibleCombo = paste(m.211.ten.combos[[x]], collapse=', '))))
m.211.ten.combos <- do.call(rbind, lapply(1:length(m.211.ten.combos), function(x) data.frame(PossibleCombo = paste(m.211.ten.combos[[x]], collapse=', '))))
head(mm.assays)
unique(mm.assays$AssayName)
m.211 <- c('CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','FluA-H1-pan','FluA-pan1','FluB','PIV2','PIV3','RSV','Bper','Cpne','Mpne')
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','HRV1','HRV2','HRV3','HRV4','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','PIV1','PIV4')
m.212 <- c('CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','FluA-H1-pan','FluA-pan1','FluB','PIV2','PIV3','RSV','Bper','Cpne','Mpne')
m.211 <- c('Adeno','Adeno2','hMPV','Entero1','Entero2','HRV1','HRV2','HRV3','HRV4','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','PIV1','PIV4')
m.211.ten.combos <- generateCombos(m.211, 10, FALSE)
m.211.ten.combos <- do.call(rbind, lapply(1:length(m.211.ten.combos), function(x) data.frame(PossibleCombo = paste(m.211.ten.combos[[x]], collapse=', '))))
m.212 <- c('CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','FluA-H1-pan','FluA-pan1','FluB','PIV2','PIV3','RSV','Bper','Cpne','Mpne')
m.212.ten.combos <- generateCombos(m.212, 10, FALSE)
m.212.ten.combos <- do.call(rbind, lapply(1:length(m.212.ten.combos), function(x) data.frame(PossibleCombo = paste(m.212.ten.combos[[x]], collapse=', '))))
m.212
m.211
choose(15, 10)
choose(13, 10)
head(mm.assays.combo)
mm.assays.combo[grep(m.211.ten.combos$PossibleCombo, mm.assays.combo$AssayCombo), ]
head(mm.assays.combo)
mm.assays.combo[grep(m.211.ten.combos$PossibleCombo[1], mm.assays.combo$AssayCombo), ]
mm.assays.combo[grep(m.211.ten.combos$PossibleCombo[2], mm.assays.combo$AssayCombo), ]
do.call(rbind, lapply(1:length(m.211.ten.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.ten.combos[x], mm.assays.combo$AssayCombo), ])))
do.call(rbind, lapply(1:length(m.211.ten.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.ten.combos$PossibleCombo[x], mm.assays.combo$AssayCombo), ])))
head(m.211.ten.combos)
rm(m.211.ten.combos)
m.211.combos <- generateCombos(m.211, 11, FALSE)
m.211.combos
m.211.ten.combos <- generateCombos(m.211, 11, FALSE)
rm(m.211.ten.combos, m.211.combos)
m.211.eleven.combos <- generateCombos(m.211, 11, FALSE)
m.211.combos <- m.211.eleven.combos
m.211.combos[[length(m.211.combos)+1]] <- m.211.twelve.combos
m.211.twelve.combos <- generateCombos(m.211, 12, FALSE)
m.211.combos[[length(m.211.combos)+1]] <- m.211.twelve.combos
rm(m.211.combos)
c(m.211.eleven.combos, m.211.twelve.combos)
m.211.combos <- c(m.211.eleven.combos, m.211.twelve.combos)
1365+455
rm(m.211.combos, m.211.eleven.combos, m.211.twelve.combos)
generateCombos(m.211, 15, FALSE)
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
head(m.211.combos)
do.call(rbind, lapply(1:length(m.211.ten.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.ten.combos$PossibleCombo[x], mm.assays.combo$AssayCombo), ])))
do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(m.211.combos$PossibleCombo[x], mm.assays.combo$AssayCombo), ])))
m.211.combos
m.211.combos[length(m.211.combos$PossibleCombo)]
m.211.combos[length(m.211.combos$PossibleCombo), ]
do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(as.character(m.211.combos$PossibleCombo[x]), mm.assays.combo$AssayCombo), ])))
head(mm.assays.combo)
m.211 <- c('Adeno','Adeno2','Entero1','Entero2','FluA-H1-2009','FluA-H1-pan','FluA-H3','FluA-pan2','hMPV','HRV1','HRV2','HRV3','HRV4','PIV1','PIV4')
m.211.combos <- c(generateCombos(m.211, 11, FALSE), generateCombos(m.211, 12, FALSE), generateCombos(m.211, 13, FALSE), generateCombos(m.211, 14, FALSE), generateCombos(m.211, 15, FALSE))
m.211.combos <- do.call(rbind, lapply(1:length(m.211.combos), function(x) data.frame(PossibleCombo = paste(m.211.combos[[x]], collapse=', '))))
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212 <- c('Bper','CoV-229E','CoV-HKU1','CoV-NL63','CoV-OC43','Cpne','FluA-H1-pan','FluA-pan1','FluB','Mpne','PIV2','PIV3','RSV')
m.212.combos <- c(generateCombos(m.212, 9, FALSE), generateCombos(m.212, 10, FALSE), generateCombos(m.212, 11, FALSE), generateCombos(m.212, 12, FALSE), generateCombos(m.212, 13, FALSE))
m.212.combos <- do.call(rbind, lapply(1:length(m.212.combos), function(x) data.frame(PossibleCombo = paste(m.212.combos[[x]], collapse=', '))))
rm(m.212.ten.combos)
do.call(rbind, lapply(1:length(m.211.combos$PossibleCombo), function(x) data.frame(mm.assays.combo[grep(as.character(m.211.combos$PossibleCombo[x]), mm.assays.combo$AssayCombo), ])))
head(mm.assays.combo)
mm.assays.combo$AssayCombo[1]
grep(as.character(mm.assays.combo$AssayCombo[1]), as.character(m.212.combos$PossibleCombo))
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[1]), as.character(m.212.combos$PossibleCombo)), ]
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[2]), as.character(m.212.combos$PossibleCombo)), ]
mm.assays.combo[grep(as.character(mm.assays.combo$AssayCombo[3]), as.character(m.212.combos$PossibleCombo)), ]
